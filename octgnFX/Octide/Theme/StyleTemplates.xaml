<!--
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.s
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:gong="urn:gong-wpf-dragdrop"
                    xmlns:entities="clr-namespace:Octgn.DataNew.Entities;assembly=Octgn.DataNew"
                    xmlns:local="clr-namespace:Octide"
                    xmlns:model="clr-namespace:Octide.ItemModel"
                    xmlns:metro="http://schemas.codeplex.com/elysium"
                    xmlns:params="http://schemas.codeplex.com/elysium/params">

    <local:RadioButtonStateConverter x:Key="RadioConverter"/>

    <Style x:Key="OctideInputPanel" >
        <Style.Resources>
            <Style TargetType="{x:Type StackPanel}">
                <Setter Property="Orientation" Value="Vertical" />
            </Style>
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="FontSize" Value="20"/>
                <Setter Property="Margin" Value="10,15,0,0"/>
                <Setter Property="Foreground" Value="{x:Static metro:AccentBrushes.Sky}"/>
            </Style>
            <Style TargetType="{x:Type Image}">
                <Setter Property="MaxHeight" Value="20"/>
                <Setter Property="MaxWidth" Value="40"/>
                <Setter Property="Stretch" Value="Uniform" />
                <Setter Property="Margin" Value="10,15,0,0" />
            </Style>
            <Style TargetType="{x:Type Slider}">
                <Setter Property="Margin" Value="10,0,0,0" />
            </Style>
        </Style.Resources>
    </Style>
    <Style TargetType="{x:Type local:KeyInputTextBox}" BasedOn="{StaticResource {x:Type TextBox}}"/>

    <Style x:Key="GridSplitterPreviewStyle" >
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Fill="#80000000"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="PreviewStyle" Value="{StaticResource GridSplitterPreviewStyle}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="ResizeDirection" Value="Columns">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridSplitter}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="Black"
                            CornerRadius="5">
                                <Canvas RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True"
                                Height="50" VerticalAlignment="Center"
                                Width="5" HorizontalAlignment="Center">
                                    <Line Y1="0" Y2="50" X1="0" X2="0"
                                  Stroke="White" StrokeThickness="1"/>
                                    <Line Y1="0" Y2="50" X1="1" X2="1"
                                  Stroke="#A0A0A0" StrokeThickness="1"/>
                                    <Line Y1="0" Y2="50" X1="5" X2="5"
                                  Stroke="White" StrokeThickness="1"/>
                                    <Line Y1="0" Y2="50" X1="6" X2="6"
                                  Stroke="#A0A0A0" StrokeThickness="1"/>
                                </Canvas>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="ResizeDirection" Value="Rows">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridSplitter}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="Black"
                            CornerRadius="5">
                                <Canvas RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True"
                                Height="5" VerticalAlignment="Center"
                                Width="50" HorizontalAlignment="Center">
                                    <Line X1="0" X2="50" Y1="0" Y2="0"
                                  Stroke="White" StrokeThickness="1"/>
                                    <Line X1="0" X2="50" Y1="1" Y2="1"
                                  Stroke="#A0A0A0" StrokeThickness="1"/>
                                    <Line X1="0" X2="50" Y1="5" Y2="5"
                                  Stroke="White" StrokeThickness="1"/>
                                    <Line X1="0" X2="50" Y1="6" Y2="6"
                                  Stroke="#A0A0A0" StrokeThickness="1"/>
                                </Canvas>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:AssetControl}">
        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:AssetControl}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_Button" Content="Load/Drop Asset" AllowDrop="True"  />
                            <ComboBox x:Name="PART_ComboBox" Grid.Column="1" ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=AssetView}" SelectedItem="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedAsset, UpdateSourceTrigger=PropertyChanged}" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate DataType="{x:Type ComboBoxItem}">
                                        <StackPanel Orientation="Horizontal" >
                                            <Image Height="18" Margin="0,0,5,0" >
                                                <Image.Style>
                                                    <Style TargetType="{x:Type Image}">
                                                        <Setter Property="Source" Value="{x:Null}"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Type}" Value="{x:Static local:AssetType.Image}">
                                                                <Setter Property="Source" Value="{Binding FullPath, TargetNullValue={x:Null}}" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>
                                            <TextBlock Text="{Binding RelativePath}" Foreground="WhiteSmoke" />
                                        </StackPanel>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    
    <DataTemplate x:Key="ComboBoxItem" >
        <TextBlock Text="{Binding }" />
    </DataTemplate>

    <Style x:Key="VirtualListBox" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border CornerRadius="4" Background="{TemplateBinding Background}">
                        <Grid>
                            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,0,0,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="#FF017BCD" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="SkyBlue" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="XButton">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="ToolTip" Value="Remove" />
        <Setter Property="Margin" Value="5,0,2,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Background="Transparent">
                        <Path Data="M 0,0 L 12,12 M 12,0 L 0,12" Stroke="#e84000" StrokeThickness="3" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ContextMenu x:Key="ListBoxContextMenu">
        <MenuItem Header="Delete" Command="{Binding RemoveCommand}" >
            <MenuItem.Style>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CanRemove}" Value="False" >
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </MenuItem.Style>
        </MenuItem>
        <MenuItem Header="Copy" Command="{Binding CopyCommand}" >
            <MenuItem.Style>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CanCopy}" Value="False" >
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </MenuItem.Style>
        </MenuItem>
        <MenuItem Header="Insert New" Command="{Binding InsertCommand}" >
            <MenuItem.Style>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CanInsert}" Value="False" >
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </MenuItem.Style>
        </MenuItem>
    </ContextMenu>

    <DataTemplate x:Key="IdeAssetItemAdorner">
        <Border Padding="5" Background="{StaticResource DarkBackground}" BorderBrush="WhiteSmoke" BorderThickness="2">
        <Grid >
            <Grid.RowDefinitions>
                <RowDefinition Height="60" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Image Source="{Binding Asset.FullPath}" Stretch="Uniform"/>
                <TextBlock Foreground="WhiteSmoke" Grid.Row="1" Text="{Binding Name}" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="IdeTextItemAdorner">
        <Border Background="{StaticResource DarkBackground}" BorderThickness="2" BorderBrush="WhiteSmoke" Padding="3">
            <TextBlock Foreground="WhiteSmoke" FontSize="13" Grid.Row="1" Text="{Binding Name}" />
        </Border>
    </DataTemplate>

    <Style x:Key="GenericIdeListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="ContextMenu" Value="{StaticResource ListBoxContextMenu}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="SkyBlue"/>
            </Trigger>
            <DataTrigger Binding="{Binding IsDefault}" Value="True" >
                <Setter Property="BorderThickness" Value="5"/>
                <Setter Property="BorderBrush" Value="Red" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsVisible}" Value="False" >
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="GenericIdeListBoxStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ListBox}}" >
        <Setter Property="gong:DragDrop.IsDragSource" Value="True" />
        <Setter Property="gong:DragDrop.IsDropTarget" Value="True" />
        <Setter Property="gong:DragDrop.DragDropCopyKeyState" Value="ControlKey" />
        <Setter Property="gong:DragDrop.UseDefaultEffectDataTemplate" Value="True" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource GenericIdeListBoxItemStyle}" />
    </Style>

    <Style x:Key="IdeListBoxItemControl" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource GenericIdeListBoxItemStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}" >
                    <StackPanel Orientation="Horizontal" Background="{TemplateBinding Background}" >
                        <Image Stretch="Uniform" Margin="1" MaxHeight="28" VerticalAlignment="Center" Source="{Binding Icon, TargetNullValue={x:Null}}" />
                        <local:EditableTextBlock Padding="6" Text="{Binding Name, Mode=TwoWay}" CanEdit="{Binding CanEdit}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IdeListBoxControl" TargetType="{x:Type ListBox}" BasedOn="{StaticResource GenericIdeListBoxStyle}" >
        <Setter Property="Foreground" Value="White" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource IdeListBoxItemControl}" />
    </Style>

    <Style x:Key="IdeHorizontalListBoxControl" TargetType="{x:Type ListBox}" BasedOn="{StaticResource GenericIdeListBoxStyle}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="local:ScrollViewerHelper.ShiftWheelScrollsHorizontally" Value="True" />
    </Style>

    <Style TargetType="Border" x:Key="PanelControl">
        <Setter Property="Background" Value="{StaticResource ControlFillBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush}" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="3"/>
        <Setter Property="Padding" Value="3" />
    </Style>

    <Style x:Key="SpinUp" TargetType="{x:Type RepeatButton}">
        <Setter Property="FontSize" Value="9" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Bd" SnapsToDevicePixels="True" HorizontalAlignment="Stretch"
                            BorderBrush="{StaticResource ControlBorderBrush}" BorderThickness="0,0,0,1" Background="Transparent">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        HorizontalAlignment="Center" Margin="0,-1,0,0" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="#10000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
   
    <Style x:Key="SpinDown" TargetType="{x:Type RepeatButton}">
        <Setter Property="FontSize" Value="9" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Bd" SnapsToDevicePixels="True" HorizontalAlignment="Stretch"
                            BorderBrush="{StaticResource ControlBorderBrush}" BorderThickness="0,1,0,0" Background="Transparent">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        HorizontalAlignment="Center" Margin="0,-1,0,0" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="#10000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NewItemButton" TargetType="{x:Type Button}" >
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Content" Value="+" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Background" Value="{StaticResource ControlFillBrush}" />
        <Setter Property="Opacity" Value="0.5" />
    </Style>

    <Style x:Key="NewActionButton" TargetType="{x:Type Button}" >
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Height" Value="16" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="{StaticResource ControlFillBrush}" />
        <Setter Property="Margin" Value="1" />
    </Style>

    <Style x:Key="ProxyTemplateAddButton" TargetType="{x:Type Button}" >
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="FontSize" Value="9" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="Black" />
    </Style>

    <Style x:Key="ProxyTemplatePropertyDropDown" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}" >
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="1"/>
        <Setter Property="MinWidth" Value="70"/>
        <Setter Property="DisplayMemberPath" Value="Name"/>
        <Setter Property="FontSize" Value="9"/>
    </Style>
</ResourceDictionary>