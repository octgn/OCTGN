<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#
    XDocument doc = XDocument.Load(Host.ResolvePath(@"..\..\Octgn.Library\Scripting\GameEvents.xml"));
#>
/* 
 * This file was automatically generated by Jesus!
 * Do not modify, or your sins will be regenerated!!
 * XML: <#= new System.IO.DirectoryInfo(Host.ResolvePath(@"..\..\Octgn.Library\Scripting\GameEvents.xml")).FullName #>
 *
 * To create the .CS file for this document, 
 * right click the .tt file and click 'Run Custom Tool'
 */
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;
using Octgn.Play;
using log4net;

namespace Octgn.Scripting
{
	public class GameEventProxy
	{
		internal static ILog Log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
	    private readonly Engine engine;
	    
	    public GameEventProxy(Engine scriptEngine)
		{
			engine = scriptEngine;
		}
	<#
    foreach (var eve in doc.Root.Elements().Where(x => x.Name.LocalName == "event"))
    {
        string eventName = eve.Attribute("name").Value;
        PopIndent();
    #>

		public void <#= eventName #>(<#= ParametersList(eve, true) #>)
		{
			Log.Info("Firing event <#=  eventName #>");
			<#
        var paramArray = eve.Elements().Where(x => x.Name.LocalName == "param").ToArray();
        if (paramArray.Length > 0)
        {
            WriteLine("var args = new object[{0}];", paramArray.Length);
        }
        PushIndent("\t");
        PushIndent("\t");
        PushIndent("\t");
        for (var i = 0; i < paramArray.Length; i++)
        {
            WriteLine("args[{0}] = {1};", i, paramArray[i].Attribute("name").Value);
            //PopIndent();
        }
        var comma = paramArray.Length == 0 ?
            ""
            : ",";
        PopIndent();
        PopIndent();
	  #>    
        if(Program.GameEngine.Definition.Events.ContainsKey("<#= eventName #>"))
		{
			foreach(var e in Program.GameEngine.Definition.Events["<#= eventName #>"])
			{
				Log.InfoFormat("Firing event <#= eventName #> -> {0}",e.Name);
				engine.ExecuteFunction(e.PythonFunction<#= comma #><#= ParametersList(eve,false) #>);
			}
	  <#
        PopIndent();
			#>
	}
		}
<# } #>
	}
}
<#+
    private string ParametersList(XElement eve, bool includeTypeNames)
    {
        var sb = new StringBuilder();
        foreach (var p in eve.Elements("{http://octgn.net/GameEvents.xsd}param"))
        {
            if (includeTypeNames)
            {
                sb.Append(
                    //ConvertParamType(
                        p.Attribute("type").Value
                    //)
                );
                sb.Append(" ");
            }
            sb.Append(p.Attribute("name").Value);
            sb.Append(", ");
        }
        if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
        return sb.ToString();
    }

    private string ConvertParamType(string type)
    {
        switch (type)
        {
            case "Player":
                return "byte";
            case "ControllableObject":
            case "Group":
            case "Card":
            case "Counter":
                return "int";
            case "Player[]":
                return "byte[]";
            case "Group[]":
                return "int[]";
            case "Color?":
                return "string";
            default:
                return type;
        }
    }

    private Dictionary<string, string> paramsOutput = new Dictionary<string, string>()
  {
    { "Version", "{0}.ToString()" },
    { "Guid", "{0}.ToString()" },
  
    { "Guid[]", @"{0}.Select(x=>x.ToString()).ToArray()" },

    { "CardOrientation", "{0}" },

    { "short[]", @"{0}" },

    { "int[]", @"{0}" },
    
    { "Player[]", @"{0}" },

    { "Group[]", @"{0}"},

    { "ulong[]", @"{0}" }
  };
#>