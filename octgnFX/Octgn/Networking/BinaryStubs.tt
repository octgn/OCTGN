<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#
  XDocument doc = XDocument.Load(Host.ResolvePath(@"..\..\Octgn.Server\Protocol.xml"));
#>
/*
 * This file was automatically generated by MyGeneration! (from BinarySender.zeus)
 * Do not modify, changes will get lost when the file is regenerated!
 */
using System;
using System.IO;
using System.Windows.Media;
using Octgn.Library.Networking;
using Octgn.Play;
using log4net;

namespace Octgn.Networking
{
	public abstract class BaseBinaryStub : IServerCalls
	{
		private static ILog Log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
		protected abstract void Send(byte[] data);
<#
  int msgId = -1;
  foreach (var msg in doc.Root.Elements("msg"))
  {
    msgId++;
    if ((bool?)msg.Attribute("server") != true) continue;
    string msgName = msg.Attribute("name").Value;
#>

		public void <#= msgName #>(<#= ParametersList(msg) #>)
		{
<# if(msgName != "Ping"){ #>
			Log.Debug($"OCTGN OUT: {nameof(<#= msgName #>)}");
<# } #>
		    if(Program.Client == null)return;
			MemoryStream stream = new MemoryStream(512);
			stream.Seek(4, SeekOrigin.Begin);
			BinaryWriter writer = new BinaryWriter(stream);

			writer.Write(Program.Client.Muted);
			writer.Write((byte)<#= msgId #>);
<#
  PushIndent("\t\t\t");
  foreach (var p in msg.Elements("param"))
  {
    string code;
    if (!paramsOutput.TryGetValue(p.Attribute("type").Value, out code))
      code = "writer.Write({0});";
    WriteLine(code, p.Attribute("name").Value);
  }
  PopIndent();
#>
			writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
			writer.Write((int)stream.Length);
			writer.Close();
			Send(stream.ToArray());
		}
<# } #>
	}

	public class BinarySenderStub : BaseBinaryStub
	{
		private ISocket to;

		public BinarySenderStub(ISocket to)
		{ this.to = to; }

		protected override void Send(byte[] data)
		{
			to.Send(data);
		}
	}
}
<#+
  private string ParametersList(XElement msg)
  {
    var sb = new StringBuilder();
    foreach (var p in msg.Elements("param"))
        {
            var ptype= p.Attribute("type").Value;
			if(ptype == "PlayerOrSpectator")
                ptype = "Player";
            sb.Append(ptype)
                .Append(" ")
                .Append(p.Attribute("name").Value)
                .Append(", ");
        }
    if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
    return sb.ToString();
  }

  private Dictionary<string, string> paramsOutput = new Dictionary<string, string>()
  {
    { "Version", "writer.Write({0}.ToString());" },
    { "Guid", "writer.Write({0}.ToByteArray());" },

    { "Guid[]", @"writer.Write((short){0}.Length);
foreach (Guid g in {0})
	writer.Write(g.ToByteArray());" },
    { "string[]", @"writer.Write((short){0}.Length);
foreach (string s in {0})
	writer.Write(s);" },
    { "CardOrientation", "writer.Write((byte){0});" },

    { "short[]", @"writer.Write((short){0}.Length);
foreach (short p in {0})
	writer.Write(p);" },

    { "int[]", @"writer.Write((short){0}.Length);
foreach (int p in {0})
	writer.Write(p);" },

    { "bool[]", @"writer.Write((short){0}.Length);
foreach (bool p in {0})
	writer.Write(p);" },

    { "ulong[]", @"writer.Write((short){0}.Length);
			foreach (ulong p in {0})
				writer.Write(p);" },

    { "Player", "writer.Write({0}.Id);" },
    { "PlayerOrSpectator", "writer.Write({0}.Id);" },
    { "ControllableObject", "writer.Write({0}.Id);" },
    { "Group", "writer.Write({0}.Id);" },
    { "Card", "writer.Write({0}.Id);" },
    { "Counter", "writer.Write({0}.Id);" },
    { "Color?", "writer.Write({0} == null ? \"\" : {0}.ToString());" },

    { "Player[]", @"writer.Write((short){0}.Length);
foreach (Player p in {0})
	writer.Write(p.Id);" },

    { "Group[]", @"writer.Write((short){0}.Length);
foreach (Group p in {0})
	writer.Write(p.Id);" },
  };
#>