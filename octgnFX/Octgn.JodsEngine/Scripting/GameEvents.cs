/* 
 * This file was automatically generated by Jesus!
 * Do not modify, or your sins will be regenerated!!
 * XML: "..\..\Octgn.Library\Scripting\GameEvents.xml"
 *
 * To create the .CS file for this document, 
 * right click the .tt file and click 'Run Custom Tool'
 */
using System;
using System.Collections.Generic;
using Octgn.Play;
using log4net;

namespace Octgn.Scripting
{
	public class GameEventProxy
	{
		internal static ILog Log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
		private readonly Engine engine;
		private readonly GameEngine gameEngine;
		private readonly Dictionary<string,Octgn.DataNew.Entities.GameEvent[]> eventCache;
		private readonly Version BASEOBJECTVERSION = new Version("3.1.0.2");

		public bool MuteEvents {get;set;}
		public GameEventProxy(Engine scriptEngine, GameEngine gameEngine)
		{
			engine = scriptEngine;
			this.gameEngine = gameEngine;
			eventCache = new Dictionary<string,Octgn.DataNew.Entities.GameEvent[]>();
						eventCache.Add("OnTableLoad",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnTableLoad"))
				eventCache["OnTableLoad"] = gameEngine.Definition.Events["OnTableLoad"];
								eventCache.Add("OnGameStart",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnGameStart"))
				eventCache["OnGameStart"] = gameEngine.Definition.Events["OnGameStart"];
								eventCache.Add("OnLoadDeck",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnLoadDeck"))
				eventCache["OnLoadDeck"] = gameEngine.Definition.Events["OnLoadDeck"];
								eventCache.Add("OnChangeCounter",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnChangeCounter"))
				eventCache["OnChangeCounter"] = gameEngine.Definition.Events["OnChangeCounter"];
								eventCache.Add("OnEndTurn",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnEndTurn"))
				eventCache["OnEndTurn"] = gameEngine.Definition.Events["OnEndTurn"];
								eventCache.Add("OnTurn",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnTurn"))
				eventCache["OnTurn"] = gameEngine.Definition.Events["OnTurn"];
								eventCache.Add("OnTargetCard",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnTargetCard"))
				eventCache["OnTargetCard"] = gameEngine.Definition.Events["OnTargetCard"];
								eventCache.Add("OnTargetCardArrow",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnTargetCardArrow"))
				eventCache["OnTargetCardArrow"] = gameEngine.Definition.Events["OnTargetCardArrow"];
								eventCache.Add("OnMoveCard",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnMoveCard"))
				eventCache["OnMoveCard"] = gameEngine.Definition.Events["OnMoveCard"];
								eventCache.Add("OnMoveCards",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnMoveCards"))
				eventCache["OnMoveCards"] = gameEngine.Definition.Events["OnMoveCards"];
								eventCache.Add("OnPlayerGlobalVariableChanged",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnPlayerGlobalVariableChanged"))
				eventCache["OnPlayerGlobalVariableChanged"] = gameEngine.Definition.Events["OnPlayerGlobalVariableChanged"];
								eventCache.Add("OnGlobalVariableChanged",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnGlobalVariableChanged"))
				eventCache["OnGlobalVariableChanged"] = gameEngine.Definition.Events["OnGlobalVariableChanged"];
								eventCache.Add("OnCardClick",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnCardClick"))
				eventCache["OnCardClick"] = gameEngine.Definition.Events["OnCardClick"];
								eventCache.Add("OnCardDoubleClick",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnCardDoubleClick"))
				eventCache["OnCardDoubleClick"] = gameEngine.Definition.Events["OnCardDoubleClick"];
								eventCache.Add("OnMarkerChanged",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnMarkerChanged"))
				eventCache["OnMarkerChanged"] = gameEngine.Definition.Events["OnMarkerChanged"];
								eventCache.Add("OnPlayerConnect",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnPlayerConnect"))
				eventCache["OnPlayerConnect"] = gameEngine.Definition.Events["OnPlayerConnect"];
								eventCache.Add("OnPlayerLeaveGame",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnPlayerLeaveGame"))
				eventCache["OnPlayerLeaveGame"] = gameEngine.Definition.Events["OnPlayerLeaveGame"];
								eventCache.Add("OnScriptedMoveCard",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnScriptedMoveCard"))
				eventCache["OnScriptedMoveCard"] = gameEngine.Definition.Events["OnScriptedMoveCard"];
								eventCache.Add("OnScriptedMoveCards",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnScriptedMoveCards"))
				eventCache["OnScriptedMoveCards"] = gameEngine.Definition.Events["OnScriptedMoveCards"];
								eventCache.Add("OnTableLoaded",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnTableLoaded"))
				eventCache["OnTableLoaded"] = gameEngine.Definition.Events["OnTableLoaded"];
								eventCache.Add("OnGameStarted",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnGameStarted"))
				eventCache["OnGameStarted"] = gameEngine.Definition.Events["OnGameStarted"];
								eventCache.Add("OnPlayerConnected",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnPlayerConnected"))
				eventCache["OnPlayerConnected"] = gameEngine.Definition.Events["OnPlayerConnected"];
								eventCache.Add("OnPlayerQuit",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnPlayerQuit"))
				eventCache["OnPlayerQuit"] = gameEngine.Definition.Events["OnPlayerQuit"];
								eventCache.Add("OnDeckLoaded",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnDeckLoaded"))
				eventCache["OnDeckLoaded"] = gameEngine.Definition.Events["OnDeckLoaded"];
								eventCache.Add("OnCounterChanged",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnCounterChanged"))
				eventCache["OnCounterChanged"] = gameEngine.Definition.Events["OnCounterChanged"];
								eventCache.Add("OnTurnPaused",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnTurnPaused"))
				eventCache["OnTurnPaused"] = gameEngine.Definition.Events["OnTurnPaused"];
								eventCache.Add("OnTurnPassed",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnTurnPassed"))
				eventCache["OnTurnPassed"] = gameEngine.Definition.Events["OnTurnPassed"];
								eventCache.Add("OnCardTargeted",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnCardTargeted"))
				eventCache["OnCardTargeted"] = gameEngine.Definition.Events["OnCardTargeted"];
								eventCache.Add("OnCardArrowTargeted",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnCardArrowTargeted"))
				eventCache["OnCardArrowTargeted"] = gameEngine.Definition.Events["OnCardArrowTargeted"];
								eventCache.Add("OnCardClicked",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnCardClicked"))
				eventCache["OnCardClicked"] = gameEngine.Definition.Events["OnCardClicked"];
								eventCache.Add("OnCardDoubleClicked",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnCardDoubleClicked"))
				eventCache["OnCardDoubleClicked"] = gameEngine.Definition.Events["OnCardDoubleClicked"];
								eventCache.Add("OnCardControllerChanged",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnCardControllerChanged"))
				eventCache["OnCardControllerChanged"] = gameEngine.Definition.Events["OnCardControllerChanged"];
								eventCache.Add("OnCardsMoved",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnCardsMoved"))
				eventCache["OnCardsMoved"] = gameEngine.Definition.Events["OnCardsMoved"];
								eventCache.Add("OnScriptedCardsMoved",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnScriptedCardsMoved"))
				eventCache["OnScriptedCardsMoved"] = gameEngine.Definition.Events["OnScriptedCardsMoved"];
								eventCache.Add("OnPhasePassed",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnPhasePassed"))
				eventCache["OnPhasePassed"] = gameEngine.Definition.Events["OnPhasePassed"];
								eventCache.Add("OnPhasePaused",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OnPhasePaused"))
				eventCache["OnPhasePaused"] = gameEngine.Definition.Events["OnPhasePaused"];
								eventCache.Add("OverrideCardsMoved",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OverrideCardsMoved"))
				eventCache["OverrideCardsMoved"] = gameEngine.Definition.Events["OverrideCardsMoved"];
								eventCache.Add("OverrideTurnPassed",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OverrideTurnPassed"))
				eventCache["OverrideTurnPassed"] = gameEngine.Definition.Events["OverrideTurnPassed"];
								eventCache.Add("OverrideGameReset",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OverrideGameReset"))
				eventCache["OverrideGameReset"] = gameEngine.Definition.Events["OverrideGameReset"];
								eventCache.Add("OverridePhasePassed",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OverridePhasePassed"))
				eventCache["OverridePhasePassed"] = gameEngine.Definition.Events["OverridePhasePassed"];
								eventCache.Add("OverridePhaseClicked",new DataNew.Entities.GameEvent[0]);
			if(gameEngine.Definition.Events.ContainsKey("OverridePhaseClicked"))
				eventCache["OverridePhaseClicked"] = gameEngine.Definition.Events["OverridePhaseClicked"];
							}
		private static readonly Version C_3_1_0_0 = Version.Parse("3.1.0.0");
		public void OnTableLoad_3_1_0_0()
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
			}
			foreach(var e in eventCache["OnTableLoad"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction);
				else
				{
					engine.ExecuteFunction(e.PythonFunction);
				}
			}
		}
		public void OnGameStart_3_1_0_0()
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
			}
			foreach(var e in eventCache["OnGameStart"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction);
				else
				{
					engine.ExecuteFunction(e.PythonFunction);
				}
			}
		}
		public void OnLoadDeck_3_1_0_0(Player player, Group[] groups)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.groups = groups;
			}
			foreach(var e in eventCache["OnLoadDeck"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, groups);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnChangeCounter_3_1_0_0(Player player, Counter counter, int oldValue)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.counter = counter;
				args.oldValue = oldValue;
			}
			foreach(var e in eventCache["OnChangeCounter"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, counter, oldValue);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnEndTurn_3_1_0_0(Player player)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
			}
			foreach(var e in eventCache["OnEndTurn"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnTurn_3_1_0_0(Player player, int turnNumber)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.turnNumber = turnNumber;
			}
			foreach(var e in eventCache["OnTurn"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, turnNumber);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnTargetCard_3_1_0_0(Player player, Card card, bool isTargeted)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.card = card;
				args.isTargeted = isTargeted;
			}
			foreach(var e in eventCache["OnTargetCard"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, card, isTargeted);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnTargetCardArrow_3_1_0_0(Player player, Card fromCard, Card toCard, bool isTargeted)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.fromCard = fromCard;
				args.toCard = toCard;
				args.isTargeted = isTargeted;
			}
			foreach(var e in eventCache["OnTargetCardArrow"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, fromCard, toCard, isTargeted);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnMoveCard_3_1_0_0(Player player, Card card, Group fromGroup, Group toGroup, int oldIndex, int index, int oldX, int oldY, int x, int y, bool isScriptMove)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.card = card;
				args.fromGroup = fromGroup;
				args.toGroup = toGroup;
				args.oldIndex = oldIndex;
				args.index = index;
				args.oldX = oldX;
				args.oldY = oldY;
				args.x = x;
				args.y = y;
				args.isScriptMove = isScriptMove;
			}
			foreach(var e in eventCache["OnMoveCard"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, card, fromGroup, toGroup, oldIndex, index, oldX, oldY, x, y, isScriptMove);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnMoveCards_3_1_0_0(Player player, Card[] cards, Group[] fromGroup, Group[] toGroup, int[] oldIndexs, int[] indexs, int[] oldX, int[] oldY, int[] x, int[] y, string[] highlights, string[] markers, bool isScriptMove)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.cards = cards;
				args.fromGroup = fromGroup;
				args.toGroup = toGroup;
				args.oldIndexs = oldIndexs;
				args.indexs = indexs;
				args.oldX = oldX;
				args.oldY = oldY;
				args.x = x;
				args.y = y;
				args.highlights = highlights;
				args.markers = markers;
				args.isScriptMove = isScriptMove;
			}
			foreach(var e in eventCache["OnMoveCards"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, cards, fromGroup, toGroup, oldIndexs, indexs, oldX, oldY, x, y, highlights, markers, isScriptMove);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnPlayerGlobalVariableChanged_3_1_0_0(Player player, string name, string oldValue, string Value)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.name = name;
				args.oldValue = oldValue;
				args.Value = Value;
			}
			foreach(var e in eventCache["OnPlayerGlobalVariableChanged"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, name, oldValue, Value);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnGlobalVariableChanged_3_1_0_0(string name, string oldValue, string Value)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.name = name;
				args.oldValue = oldValue;
				args.Value = Value;
			}
			foreach(var e in eventCache["OnGlobalVariableChanged"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,name, oldValue, Value);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnCardClick_3_1_0_0(Card card, int mouseButton, string[] keysDown)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.card = card;
				args.mouseButton = mouseButton;
				args.keysDown = keysDown;
			}
			foreach(var e in eventCache["OnCardClick"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,card, mouseButton, keysDown);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnCardDoubleClick_3_1_0_0(Card card, int mouseButton, string[] keysDown)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.card = card;
				args.mouseButton = mouseButton;
				args.keysDown = keysDown;
			}
			foreach(var e in eventCache["OnCardDoubleClick"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,card, mouseButton, keysDown);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnMarkerChanged_3_1_0_0(Card card, string markerName, int oldValue, int newValue, bool isScriptChange)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_0 )
				return;
			var thisVersion = Version.Parse("3.1.0.0");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.card = card;
				args.markerName = markerName;
				args.oldValue = oldValue;
				args.newValue = newValue;
				args.isScriptChange = isScriptChange;
			}
			foreach(var e in eventCache["OnMarkerChanged"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,card, markerName, oldValue, newValue, isScriptChange);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
	private static readonly Version C_3_1_0_1 = Version.Parse("3.1.0.1");
		public void OnTableLoad_3_1_0_1()
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
			}
			foreach(var e in eventCache["OnTableLoad"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction);
				else
				{
					engine.ExecuteFunction(e.PythonFunction);
				}
			}
		}
		public void OnGameStart_3_1_0_1()
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
			}
			foreach(var e in eventCache["OnGameStart"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction);
				else
				{
					engine.ExecuteFunction(e.PythonFunction);
				}
			}
		}
		public void OnPlayerConnect_3_1_0_1(Player player)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
			}
			foreach(var e in eventCache["OnPlayerConnect"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnPlayerLeaveGame_3_1_0_1(Player player)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
			}
			foreach(var e in eventCache["OnPlayerLeaveGame"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnLoadDeck_3_1_0_1(Player player, Group[] groups)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.groups = groups;
			}
			foreach(var e in eventCache["OnLoadDeck"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, groups);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnChangeCounter_3_1_0_1(Player player, Counter counter, int oldValue)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.counter = counter;
				args.oldValue = oldValue;
			}
			foreach(var e in eventCache["OnChangeCounter"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, counter, oldValue);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnEndTurn_3_1_0_1(Player player)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
			}
			foreach(var e in eventCache["OnEndTurn"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnTurn_3_1_0_1(Player player, int turnNumber)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.turnNumber = turnNumber;
			}
			foreach(var e in eventCache["OnTurn"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, turnNumber);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnTargetCard_3_1_0_1(Player player, Card card, bool isTargeted)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.card = card;
				args.isTargeted = isTargeted;
			}
			foreach(var e in eventCache["OnTargetCard"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, card, isTargeted);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnTargetCardArrow_3_1_0_1(Player player, Card fromCard, Card toCard, bool isTargeted)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.fromCard = fromCard;
				args.toCard = toCard;
				args.isTargeted = isTargeted;
			}
			foreach(var e in eventCache["OnTargetCardArrow"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, fromCard, toCard, isTargeted);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnPlayerGlobalVariableChanged_3_1_0_1(Player player, string name, string oldValue, string Value)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.name = name;
				args.oldValue = oldValue;
				args.Value = Value;
			}
			foreach(var e in eventCache["OnPlayerGlobalVariableChanged"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, name, oldValue, Value);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnGlobalVariableChanged_3_1_0_1(string name, string oldValue, string Value)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.name = name;
				args.oldValue = oldValue;
				args.Value = Value;
			}
			foreach(var e in eventCache["OnGlobalVariableChanged"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,name, oldValue, Value);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnCardClick_3_1_0_1(Card card, int mouseButton, string[] keysDown)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.card = card;
				args.mouseButton = mouseButton;
				args.keysDown = keysDown;
			}
			foreach(var e in eventCache["OnCardClick"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,card, mouseButton, keysDown);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnCardDoubleClick_3_1_0_1(Card card, int mouseButton, string[] keysDown)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.card = card;
				args.mouseButton = mouseButton;
				args.keysDown = keysDown;
			}
			foreach(var e in eventCache["OnCardDoubleClick"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,card, mouseButton, keysDown);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnMarkerChanged_3_1_0_1(Card card, string markerName, int oldValue, int newValue, bool isScriptChange)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.card = card;
				args.markerName = markerName;
				args.oldValue = oldValue;
				args.newValue = newValue;
				args.isScriptChange = isScriptChange;
			}
			foreach(var e in eventCache["OnMarkerChanged"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,card, markerName, oldValue, newValue, isScriptChange);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnMoveCard_3_1_0_1(Player player, Card card, Group fromGroup, Group toGroup, int oldIndex, int index, int oldX, int oldY, int x, int y, bool faceup, string highlight, string markers)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.card = card;
				args.fromGroup = fromGroup;
				args.toGroup = toGroup;
				args.oldIndex = oldIndex;
				args.index = index;
				args.oldX = oldX;
				args.oldY = oldY;
				args.x = x;
				args.y = y;
				args.faceup = faceup;
				args.highlight = highlight;
				args.markers = markers;
			}
			foreach(var e in eventCache["OnMoveCard"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, card, fromGroup, toGroup, oldIndex, index, oldX, oldY, x, y, faceup, highlight, markers);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnMoveCards_3_1_0_1(Player player, Card[] cards, Group[] fromGroups, Group[] toGroups, int[] oldIndexs, int[] indexs, int[] oldX, int[] oldY, int[] x, int[] y, string[] highlights, string[] markers, bool[] faceups)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.cards = cards;
				args.fromGroups = fromGroups;
				args.toGroups = toGroups;
				args.oldIndexs = oldIndexs;
				args.indexs = indexs;
				args.oldX = oldX;
				args.oldY = oldY;
				args.x = x;
				args.y = y;
				args.highlights = highlights;
				args.markers = markers;
				args.faceups = faceups;
			}
			foreach(var e in eventCache["OnMoveCards"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, cards, fromGroups, toGroups, oldIndexs, indexs, oldX, oldY, x, y, highlights, markers, faceups);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnScriptedMoveCard_3_1_0_1(Player player, Card card, Group fromGroup, Group toGroup, int oldIndex, int index, int oldX, int oldY, int x, int y, bool faceup, string highlight, string markers)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.card = card;
				args.fromGroup = fromGroup;
				args.toGroup = toGroup;
				args.oldIndex = oldIndex;
				args.index = index;
				args.oldX = oldX;
				args.oldY = oldY;
				args.x = x;
				args.y = y;
				args.faceup = faceup;
				args.highlight = highlight;
				args.markers = markers;
			}
			foreach(var e in eventCache["OnScriptedMoveCard"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, card, fromGroup, toGroup, oldIndex, index, oldX, oldY, x, y, faceup, highlight, markers);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnScriptedMoveCards_3_1_0_1(Player player, Card[] cards, Group[] fromGroups, Group[] toGroups, int[] oldIndexs, int[] indexs, int[] oldX, int[] oldY, int[] x, int[] y, string[] highlights, string[] markers, bool[] faceups)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_1 )
				return;
			var thisVersion = Version.Parse("3.1.0.1");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.cards = cards;
				args.fromGroups = fromGroups;
				args.toGroups = toGroups;
				args.oldIndexs = oldIndexs;
				args.indexs = indexs;
				args.oldX = oldX;
				args.oldY = oldY;
				args.x = x;
				args.y = y;
				args.highlights = highlights;
				args.markers = markers;
				args.faceups = faceups;
			}
			foreach(var e in eventCache["OnScriptedMoveCards"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, cards, fromGroups, toGroups, oldIndexs, indexs, oldX, oldY, x, y, highlights, markers, faceups);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
	private static readonly Version C_3_1_0_2 = Version.Parse("3.1.0.2");
		public void OnTableLoaded_3_1_0_2()
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
			}
			foreach(var e in eventCache["OnTableLoaded"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction);
				else
				{
					engine.ExecuteFunction(e.PythonFunction);
				}
			}
		}
		public void OnGameStarted_3_1_0_2()
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
			}
			foreach(var e in eventCache["OnGameStarted"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction);
				else
				{
					engine.ExecuteFunction(e.PythonFunction);
				}
			}
		}
		public void OnPlayerConnected_3_1_0_2(Player player)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
			}
			foreach(var e in eventCache["OnPlayerConnected"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnPlayerQuit_3_1_0_2(Player player)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
			}
			foreach(var e in eventCache["OnPlayerQuit"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnDeckLoaded_3_1_0_2(Player player, Group[] groups)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.groups = groups;
			}
			foreach(var e in eventCache["OnDeckLoaded"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, groups);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnCounterChanged_3_1_0_2(Player player, Counter counter, int value, bool scripted)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.counter = counter;
				args.value = value;
				args.scripted = scripted;
			}
			foreach(var e in eventCache["OnCounterChanged"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, counter, value, scripted);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnTurnPaused_3_1_0_2(Player player)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
			}
			foreach(var e in eventCache["OnTurnPaused"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnTurnPassed_3_1_0_2(Player player, int turn, bool force)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.turn = turn;
				args.force = force;
			}
			foreach(var e in eventCache["OnTurnPassed"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, turn, force);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnCardTargeted_3_1_0_2(Player player, Card card, bool targeted, bool scripted)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.card = card;
				args.targeted = targeted;
				args.scripted = scripted;
			}
			foreach(var e in eventCache["OnCardTargeted"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, card, targeted, scripted);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnCardArrowTargeted_3_1_0_2(Player player, Card fromCard, Card toCard, bool targeted, bool scripted)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.fromCard = fromCard;
				args.toCard = toCard;
				args.targeted = targeted;
				args.scripted = scripted;
			}
			foreach(var e in eventCache["OnCardArrowTargeted"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, fromCard, toCard, targeted, scripted);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnPlayerGlobalVariableChanged_3_1_0_2(Player player, string name, string oldValue, string value)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.name = name;
				args.oldValue = oldValue;
				args.value = value;
			}
			foreach(var e in eventCache["OnPlayerGlobalVariableChanged"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, name, oldValue, value);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnGlobalVariableChanged_3_1_0_2(string name, string oldValue, string value)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.name = name;
				args.oldValue = oldValue;
				args.value = value;
			}
			foreach(var e in eventCache["OnGlobalVariableChanged"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,name, oldValue, value);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnCardClicked_3_1_0_2(Card card, int mouseButton, string[] keysDown)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.card = card;
				args.mouseButton = mouseButton;
				args.keysDown = keysDown;
			}
			foreach(var e in eventCache["OnCardClicked"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,card, mouseButton, keysDown);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnCardDoubleClicked_3_1_0_2(Card card, int mouseButton, string[] keysDown)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.card = card;
				args.mouseButton = mouseButton;
				args.keysDown = keysDown;
			}
			foreach(var e in eventCache["OnCardDoubleClicked"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,card, mouseButton, keysDown);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnMarkerChanged_3_1_0_2(Card card, string marker, string id, int value, bool scripted)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.card = card;
				args.marker = marker;
				args.id = id;
				args.value = value;
				args.scripted = scripted;
			}
			foreach(var e in eventCache["OnMarkerChanged"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,card, marker, id, value, scripted);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnCardControllerChanged_3_1_0_2(Card card, Player oldPlayer, Player player)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.card = card;
				args.oldPlayer = oldPlayer;
				args.player = player;
			}
			foreach(var e in eventCache["OnCardControllerChanged"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,card, oldPlayer, player);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnCardsMoved_3_1_0_2(Player player, Card[] cards, Group[] fromGroups, Group[] toGroups, int[] indexs, int[] xs, int[] ys, string[] highlights, string[] markers, bool[] faceups, string[] filters, string[] alternates)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.cards = cards;
				args.fromGroups = fromGroups;
				args.toGroups = toGroups;
				args.indexs = indexs;
				args.xs = xs;
				args.ys = ys;
				args.highlights = highlights;
				args.markers = markers;
				args.faceups = faceups;
				args.filters = filters;
				args.alternates = alternates;
			}
			foreach(var e in eventCache["OnCardsMoved"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, cards, fromGroups, toGroups, indexs, xs, ys, highlights, markers, faceups, filters, alternates);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnScriptedCardsMoved_3_1_0_2(Player player, Card[] cards, Group[] fromGroups, Group[] toGroups, int[] indexs, int[] xs, int[] ys, string[] highlights, string[] markers, bool[] faceups, string[] filters, string[] alternates)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
				args.cards = cards;
				args.fromGroups = fromGroups;
				args.toGroups = toGroups;
				args.indexs = indexs;
				args.xs = xs;
				args.ys = ys;
				args.highlights = highlights;
				args.markers = markers;
				args.faceups = faceups;
				args.filters = filters;
				args.alternates = alternates;
			}
			foreach(var e in eventCache["OnScriptedCardsMoved"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player, cards, fromGroups, toGroups, indexs, xs, ys, highlights, markers, faceups, filters, alternates);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnPhasePassed_3_1_0_2(string name, int id, bool force)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.name = name;
				args.id = id;
				args.force = force;
			}
			foreach(var e in eventCache["OnPhasePassed"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,name, id, force);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OnPhasePaused_3_1_0_2(Player player)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
			}
			foreach(var e in eventCache["OnPhasePaused"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OverrideCardsMoved_3_1_0_2(Card[] cards, Group[] toGroups, int[] indexs, int[] xs, int[] ys, bool[] faceups)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.cards = cards;
				args.toGroups = toGroups;
				args.indexs = indexs;
				args.xs = xs;
				args.ys = ys;
				args.faceups = faceups;
			}
			foreach(var e in eventCache["OverrideCardsMoved"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,cards, toGroups, indexs, xs, ys, faceups);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OverrideTurnPassed_3_1_0_2(Player player)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.player = player;
			}
			foreach(var e in eventCache["OverrideTurnPassed"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,player);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OverrideGameReset_3_1_0_2()
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
			}
			foreach(var e in eventCache["OverrideGameReset"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction);
				else
				{
					engine.ExecuteFunction(e.PythonFunction);
				}
			}
		}
		public void OverridePhasePassed_3_1_0_2(string name, int id)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.name = name;
				args.id = id;
			}
			foreach(var e in eventCache["OverridePhasePassed"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,name, id);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
		public void OverridePhaseClicked_3_1_0_2(string name, int id)
		{
			if(Player.LocalPlayer.Spectator || Program.GameEngine.IsReplay)return;
			if(MuteEvents)return;
			if(gameEngine.Definition.ScriptVersion != C_3_1_0_2 )
				return;
			var thisVersion = Version.Parse("3.1.0.2");
			dynamic args = new System.Dynamic.ExpandoObject();
			if(thisVersion >= BASEOBJECTVERSION)
			{
				args.name = name;
				args.id = id;
			}
			foreach(var e in eventCache["OverridePhaseClicked"])
			{
				if(thisVersion < BASEOBJECTVERSION)
					engine.ExecuteFunction(e.PythonFunction,name, id);
				else
				{
					engine.ExecuteFunction(e.PythonFunction, args);
				}
			}
		}
	}
}
