<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#
  XDocument doc = XDocument.Load(Host.ResolvePath(@"Protocol.xml"));
#>
/* 
 * This file was automatically generated by MyGeneration! (from BinarySender.zeus)
 * Do not modify, changes will get lost when the file is regenerated!
 */
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;

namespace Octgn.Server
{
	abstract class BaseBinaryStub : Octgn.Server.IClientCalls
	{
	    private Handler handler;
	    
	    public BaseBinaryStub(Handler handler)
	    { this.handler = handler; }
				
		protected abstract void Send(byte[] data);
<#
  int msgId = -1;
  foreach (var msg in doc.Root.Elements("msg"))
  {
    msgId++;
    if ((bool?)msg.Attribute("client") != true) continue;
    string msgName = msg.Attribute("name").Value;
#>

    public void <#= msgName #>(<#= ParametersList(msg) #>)
    {
			MemoryStream stream = new MemoryStream(512);
			stream.Seek(4, SeekOrigin.Begin);
			BinaryWriter writer = new BinaryWriter(stream);

      writer.Write(handler.muted);
			writer.Write((byte)<#= msgId #>);
<# 
  PushIndent("\t\t\t");
  foreach (var p in msg.Elements("param"))
  {
    string code;
    if (!paramsOutput.TryGetValue(p.Attribute("type").Value, out code))
      code = "writer.Write({0});";
    WriteLine(code, p.Attribute("name").Value);
  }
  PopIndent();
#>
			writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
			writer.Write((int)stream.Length);
			writer.Close();
			Send(stream.ToArray());
		}
<# } #>
	}
	
	class BinarySenderStub : BaseBinaryStub
	{
		private TcpClient to;
		
		public BinarySenderStub(TcpClient to, Handler handler) : base(handler)
		{ this.to = to; }
		
		protected override void Send(byte[] data)
		{
			try
			{
				Stream stream = to.GetStream();
				stream.Write(data, 0, data.Length); stream.Flush();
			}
			catch 
			{ 
// TODO: Notify disconnection
//				if (Program.Server != null && Program.Server.Disconnected(to))
//					return;
//				Program.Client.Disconnected();
			}
		}
	}
}
<#+
  private string ParametersList(XElement msg)
  {
    var sb = new StringBuilder();
    foreach (var p in msg.Elements("param"))
      sb.Append(ConvertParamType(p.Attribute("type").Value))
        .Append(" ")
        .Append(p.Attribute("name").Value)
        .Append(", ");
    if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
    return sb.ToString();
  }

  private string ConvertParamType(string type)
  {
    switch (type)
    {
      case "Player":
        return "byte";
      case "ControllableObject":
      case "Group":
      case "Card":
      case "Counter":
        return "int";
      case "Player[]":
        return "byte[]";
      case "Group[]":
        return "int[]";
      case "Color?":
        return "string";
      default:
        return type;
    }
  }

  private Dictionary<string, string> paramsOutput = new Dictionary<string, string>()
  {
    { "Version", "writer.Write({0}.ToString());" },
    { "Guid", "writer.Write({0}.ToByteArray());" },
  
    { "Guid[]", @"writer.Write((short){0}.Length);
foreach (Guid g in {0})
	writer.Write(g.ToByteArray());" },
	{ "string[]", @"writer.Write((short){0}.Length);
foreach (string s in {0})
	writer.Write(s);" },

    { "CardOrientation", "writer.Write((byte){0});" },

    { "short[]", @"writer.Write((short){0}.Length);
foreach (short p in {0})
	writer.Write(p);" },

    { "int[]", @"writer.Write((short){0}.Length);
foreach (int p in {0})
	writer.Write(p);" },
    
    { "Player[]", @"writer.Write((short){0}.Length);
foreach (byte p in {0})
	writer.Write(p);" },

    { "Group[]", @"writer.Write((short){0}.Length);
foreach (int p in {0})
	writer.Write(p);" },

    { "ulong[]", @"writer.Write((short){0}.Length);
			foreach (ulong p in {0})
				writer.Write(p);" }
  };
#>