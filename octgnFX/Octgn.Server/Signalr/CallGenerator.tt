<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
<#
    FillGameHub();
    FillHubBroadcaster();
    FillHubRpc();
#>
<#+
    private void FillGameHub()
    {
        var hubPath = Host.ResolvePath("GameHub.cs");
        var hubString = File.ReadAllText(hubPath);

        var sb = new StringBuilder();
        var doc = XDocument.Load(Host.ResolvePath(@"..\Protocol.xml"));
        foreach (var msg in doc.Root.Elements("msg").Where(m => IsServerMessage(m))){
            var str = string.Format(@"        public void {0}({1})
        {{
            using (var context = new RequestContext(_gameRepo, _settings, _broadcaster)) {{
                context.Initialize(Context, this.Clients.Caller).Wait();
                if (!_handler.InitializeRequest(context)) return;
                _handler.{0}({2});
            }}
        }}
", msg.Attribute("name").Value, BuildParameters(msg, true, true, false, null), BuildParameters(msg, false, true, true, null));
            sb.AppendLine(str);
        }

        string newString = "";
        var regionName = "IClientToServerCalls";
        int startSpot = hubString.IndexOf("#region " + regionName);
        int endSpot = hubString.IndexOf("#endregion " + regionName);
        string startString = hubString.Substring(0,startSpot + ("#region " + regionName).Length + 2) + Environment.NewLine;
        string endString = "		" + hubString.Substring(endSpot, hubString.Length - endSpot);

        string finalString= startString + sb.ToString() + endString;

        WriteLine($"Outputting GameHub.cs info");

        File.WriteAllText(hubPath,finalString);
    }
    private void FillHubBroadcaster()
    {
        var hubBroadcasterPath = Host.ResolvePath("HubBroadcaster.cs");
        var hubBroadcasterString = File.ReadAllText(hubBroadcasterPath);

        var sb = new StringBuilder();
        var doc = XDocument.Load(Host.ResolvePath(@"..\Protocol.xml"));
        foreach (var msg in doc.Root.Elements("msg").Where(m => IsClientMessage(m))){
            var str = string.Format(@"        public void {0}({1})
        {{
            _hub.Clients.All.{0}({2});
        }}
", msg.Attribute("name").Value, BuildParameters(msg, true, false, false, "Guid sender, "), BuildParameters(msg, false, false, false, "sender, "));
            sb.AppendLine(str);
        }

        string newString = "";
        var regionName = "IServerToClientCalls";
        int startSpot = hubBroadcasterString.IndexOf("#region " + regionName);
        int endSpot = hubBroadcasterString.IndexOf("#endregion " + regionName);
        string startString = hubBroadcasterString.Substring(0,startSpot + ("#region " + regionName).Length + 2) + Environment.NewLine;
        string endString = "		" + hubBroadcasterString.Substring(endSpot, hubBroadcasterString.Length - endSpot);

        string finalString= startString + sb.ToString() + endString;

        WriteLine($"Outputting HubBroadcaster.cs info");

        File.WriteAllText(hubBroadcasterPath,finalString);
    }
    private void FillHubRpc()
    {
        var hubRpcPath = Host.ResolvePath("HubRpc.cs");
        var hubRpcString = File.ReadAllText(hubRpcPath);

        var sb = new StringBuilder();
        var doc = XDocument.Load(Host.ResolvePath(@"..\Protocol.xml"));
        foreach (var msg in doc.Root.Elements("msg").Where(m => IsClientMessage(m))){
            var str = string.Format(@"        public void {0}({1})
        {{
            _rpc.{0}({2});
        }}
", msg.Attribute("name").Value, BuildParameters(msg, true, false, false, "Guid sender, "), BuildParameters(msg, false, false, false, "sender, "));
            sb.AppendLine(str);
        }

        string newString = "";
        var regionName = "IServerToClientCalls";
        int startSpot = hubRpcString.IndexOf("#region " + regionName);
        int endSpot = hubRpcString.IndexOf("#endregion " + regionName);
        string startString = hubRpcString.Substring(0,startSpot + ("#region " + regionName).Length + 2) + Environment.NewLine;
        string endString = "		" + hubRpcString.Substring(endSpot, hubRpcString.Length - endSpot);

        string finalString= startString + sb.ToString() + endString;

        WriteLine($"Outputting HubRpc.cs info");

        File.WriteAllText(hubRpcPath, finalString);
    }
	private string BuildParameters(XElement msg, bool withType, bool client, bool withConverters, string senderString)
	{
		var sb = new StringBuilder();
        if(senderString != null){
            sb.Append(senderString);
        }
		foreach (var p in msg.Elements("param").Where(m => ((bool?)m.Attribute(client ? "client" : "server") ?? true) == true))
        {
            if(withType)
                sb.Append(ConvertParameterType(p.Attribute("type").Value)).Append(" ");
            if(!withConverters) sb.Append(p.Attribute("name").Value);
            else sb.Append(ApplyFormatter(p.Attribute("name").Value, p.Attribute("type").Value));
            sb.Append(", ");
        }
		if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
		return sb.ToString();
	}

	private string ConvertParameterType(string type)
	{
		switch (type)
		{
			case "Player":
			case "PlayerOrSpectator":
			case "ControllableObject":
			case "Group":
			case "Card":
			case "Counter":
				return "Guid";
			case "Player[]":
			case "Group[]":
				return "Guid[]";
			case "Color?":
				return "string";
			default:
				return type;
		}
	}

    private string ApplyFormatter(string name, string type) {
        switch(type) {
			//case "Player":
			//case "PlayerOrSpectator":
                //return string.Format("(Player)_gameRepo.Players.Get({0}.ToString())", name);
			default:
				return name;
        }
    }

    private bool IsClientMessage(XElement elem) {
        var client = elem.Attribute("client");
        if (client == null) return false;
        return bool.Parse(client.Value);
    }
    private bool IsServerMessage(XElement elem) {
        var server = elem.Attribute("server");
        if (server == null) return false;
        return bool.Parse(server.Value);
    }
#>
