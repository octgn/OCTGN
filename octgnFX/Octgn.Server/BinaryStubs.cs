/*
 * This file was automatically generated by MyGeneration! (from BinarySender.zeus)
 * Do not modify, changes will get lost when the file is regenerated!
 */
using System;
using System.IO;

namespace Octgn.Server
{
	public abstract class BaseBinaryStub : Octgn.Server.IClientCalls
	{
        private static log4net.ILog Log = log4net.LogManager.GetLogger(nameof(BaseBinaryStub));

	    private readonly ServerSocket _socket;

	    public BaseBinaryStub(ServerSocket socket)
	    { this._socket = socket; }

		protected abstract void Send(byte[] data);

    public void Error(string msg)
    {
		Log.Debug($"SERVER OUT: {nameof(Error)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)0);
				writer.Write(msg);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Kick(string reason)
    {
		Log.Debug($"SERVER OUT: {nameof(Kick)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)2);
				writer.Write(reason);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Welcome(byte id, Guid gameSessionId, string gameName, bool waitForGameState)
    {
		Log.Debug($"SERVER OUT: {nameof(Welcome)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)5);
				writer.Write(id);
				writer.Write(gameSessionId.ToByteArray());
				writer.Write(gameName);
				writer.Write(waitForGameState);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Settings(bool twoSidedTable, bool allowSpectators, bool muteSpectators)
    {
		Log.Debug($"SERVER OUT: {nameof(Settings)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)6);
				writer.Write(twoSidedTable);
				writer.Write(allowSpectators);
				writer.Write(muteSpectators);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void PlayerSettings(byte playerId, bool invertedTable, bool spectator)
    {
		Log.Debug($"SERVER OUT: {nameof(PlayerSettings)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)7);
				writer.Write(playerId);
				writer.Write(invertedTable);
				writer.Write(spectator);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void NewPlayer(byte id, string nick, string userId, ulong pkey, bool tableSide, bool spectator)
    {
		Log.Debug($"SERVER OUT: {nameof(NewPlayer)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)8);
				writer.Write(id);
				writer.Write(nick);
				writer.Write(userId);
				writer.Write(pkey);
				writer.Write(tableSide);
				writer.Write(spectator);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Leave(byte player)
    {
		Log.Debug($"SERVER OUT: {nameof(Leave)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)9);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Start()
    {
		Log.Debug($"SERVER OUT: {nameof(Start)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)10);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Reset(byte player)
    {
		Log.Debug($"SERVER OUT: {nameof(Reset)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)12);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void NextTurn(byte player, bool setActive, bool force)
    {
		Log.Debug($"SERVER OUT: {nameof(NextTurn)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)13);
				writer.Write(player);
				writer.Write(setActive);
				writer.Write(force);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void StopTurn(byte player)
    {
		Log.Debug($"SERVER OUT: {nameof(StopTurn)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)15);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void SetPhase(byte phase, byte[] players, bool force)
    {
		Log.Debug($"SERVER OUT: {nameof(SetPhase)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)17);
				writer.Write(phase);
				writer.Write((short)players.Length);
				foreach (var p in players)
					writer.Write(p);
				writer.Write(force);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void SetActivePlayer(byte player)
    {
		Log.Debug($"SERVER OUT: {nameof(SetActivePlayer)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)19);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void ClearActivePlayer()
    {
		Log.Debug($"SERVER OUT: {nameof(ClearActivePlayer)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)20);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Chat(byte player, string text)
    {
		Log.Debug($"SERVER OUT: {nameof(Chat)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)22);
				writer.Write(player);
				writer.Write(text);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Print(byte player, string text)
    {
		Log.Debug($"SERVER OUT: {nameof(Print)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)24);
				writer.Write(player);
				writer.Write(text);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Random(int result)
    {
		Log.Debug($"SERVER OUT: {nameof(Random)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)26);
				writer.Write(result);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Counter(byte player, int counter, int value, bool isScriptChange)
    {
		Log.Debug($"SERVER OUT: {nameof(Counter)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)28);
				writer.Write(player);
				writer.Write(counter);
				writer.Write(value);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void LoadDeck(int[] id, Guid[] type, int[] group, string[] size, string sleeve, bool limited)
    {
		Log.Debug($"SERVER OUT: {nameof(LoadDeck)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)29);
				writer.Write((short)id.Length);
				foreach (var p in id)
					writer.Write(p);
				writer.Write((short)type.Length);
				foreach (var g in type)
					writer.Write(g.ToByteArray());
				writer.Write((short)group.Length);
				foreach (var p in group)
					writer.Write(p);
				writer.Write((short)size.Length);
				foreach (var s in size)
					writer.Write(s);
				writer.Write(sleeve);
				writer.Write(limited);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void CreateCard(int[] id, Guid[] type, string[] size, int group)
    {
		Log.Debug($"SERVER OUT: {nameof(CreateCard)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)30);
				writer.Write((short)id.Length);
				foreach (var p in id)
					writer.Write(p);
				writer.Write((short)type.Length);
				foreach (var g in type)
					writer.Write(g.ToByteArray());
				writer.Write((short)size.Length);
				foreach (var s in size)
					writer.Write(s);
				writer.Write(group);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void CreateCardAt(int[] id, Guid[] modelId, int[] x, int[] y, bool faceUp, bool persist)
    {
		Log.Debug($"SERVER OUT: {nameof(CreateCardAt)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)31);
				writer.Write((short)id.Length);
				foreach (var p in id)
					writer.Write(p);
				writer.Write((short)modelId.Length);
				foreach (var g in modelId)
					writer.Write(g.ToByteArray());
				writer.Write((short)x.Length);
				foreach (var p in x)
					writer.Write(p);
				writer.Write((short)y.Length);
				foreach (var p in y)
					writer.Write(p);
				writer.Write(faceUp);
				writer.Write(persist);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void CreateAliasDeprecated(int[] id, ulong[] type)
    {
		Log.Debug($"SERVER OUT: {nameof(CreateAliasDeprecated)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)32);
				writer.Write((short)id.Length);
				foreach (var p in id)
					writer.Write(p);
				writer.Write((short)type.Length);
							foreach (var p in type)
								writer.Write(p);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void MoveCard(byte player, int[] id, int group, int[] idx, bool[] faceUp, bool isScriptMove)
    {
		Log.Debug($"SERVER OUT: {nameof(MoveCard)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)34);
				writer.Write(player);
				writer.Write((short)id.Length);
				foreach (var p in id)
					writer.Write(p);
				writer.Write(group);
				writer.Write((short)idx.Length);
				foreach (var p in idx)
					writer.Write(p);
				writer.Write((short)faceUp.Length);
				foreach (var p in faceUp)
					writer.Write(p);
				writer.Write(isScriptMove);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void MoveCardAt(byte player, int[] id, int[] x, int[] y, int[] idx, bool[] faceUp, bool isScriptMove)
    {
		Log.Debug($"SERVER OUT: {nameof(MoveCardAt)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)36);
				writer.Write(player);
				writer.Write((short)id.Length);
				foreach (var p in id)
					writer.Write(p);
				writer.Write((short)x.Length);
				foreach (var p in x)
					writer.Write(p);
				writer.Write((short)y.Length);
				foreach (var p in y)
					writer.Write(p);
				writer.Write((short)idx.Length);
				foreach (var p in idx)
					writer.Write(p);
				writer.Write((short)faceUp.Length);
				foreach (var p in faceUp)
					writer.Write(p);
				writer.Write(isScriptMove);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Peek(byte player, int card)
    {
		Log.Debug($"SERVER OUT: {nameof(Peek)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)38);
				writer.Write(player);
				writer.Write(card);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Untarget(byte player, int card, bool isScriptChange)
    {
		Log.Debug($"SERVER OUT: {nameof(Untarget)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)40);
				writer.Write(player);
				writer.Write(card);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Target(byte player, int card, bool isScriptChange)
    {
		Log.Debug($"SERVER OUT: {nameof(Target)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)42);
				writer.Write(player);
				writer.Write(card);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void TargetArrow(byte player, int card, int otherCard, bool isScriptChange)
    {
		Log.Debug($"SERVER OUT: {nameof(TargetArrow)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)44);
				writer.Write(player);
				writer.Write(card);
				writer.Write(otherCard);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Highlight(int card, string color)
    {
		Log.Debug($"SERVER OUT: {nameof(Highlight)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)45);
				writer.Write(card);
				writer.Write(color);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Turn(byte player, int card, bool up)
    {
		Log.Debug($"SERVER OUT: {nameof(Turn)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)47);
				writer.Write(player);
				writer.Write(card);
				writer.Write(up);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Rotate(byte player, int card, CardOrientation rot)
    {
		Log.Debug($"SERVER OUT: {nameof(Rotate)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)49);
				writer.Write(player);
				writer.Write(card);
				writer.Write((byte)rot);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void ShuffleDeprecated(int group, int[] card)
    {
		Log.Debug($"SERVER OUT: {nameof(ShuffleDeprecated)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)50);
				writer.Write(group);
				writer.Write((short)card.Length);
				foreach (var p in card)
					writer.Write(p);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Shuffled(byte player, int group, int[] card, short[] pos)
    {
		Log.Debug($"SERVER OUT: {nameof(Shuffled)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)51);
				writer.Write(player);
				writer.Write(group);
				writer.Write((short)card.Length);
				foreach (var p in card)
					writer.Write(p);
				writer.Write((short)pos.Length);
				foreach (var p in pos)
					writer.Write(p);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void UnaliasGrpDeprecated(int group)
    {
		Log.Debug($"SERVER OUT: {nameof(UnaliasGrpDeprecated)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)52);
				writer.Write(group);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void UnaliasDeprecated(int[] card, ulong[] type)
    {
		Log.Debug($"SERVER OUT: {nameof(UnaliasDeprecated)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)53);
				writer.Write((short)card.Length);
				foreach (var p in card)
					writer.Write(p);
				writer.Write((short)type.Length);
							foreach (var p in type)
								writer.Write(p);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void AddMarker(byte player, int card, string id, string name, ushort count, ushort origCount, bool isScriptChange)
    {
		Log.Debug($"SERVER OUT: {nameof(AddMarker)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)55);
				writer.Write(player);
				writer.Write(card);
				writer.Write(id);
				writer.Write(name);
				writer.Write(count);
				writer.Write(origCount);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void RemoveMarker(byte player, int card, string id, string name, ushort count, ushort origCount, bool isScriptChange)
    {
		Log.Debug($"SERVER OUT: {nameof(RemoveMarker)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)57);
				writer.Write(player);
				writer.Write(card);
				writer.Write(id);
				writer.Write(name);
				writer.Write(count);
				writer.Write(origCount);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void TransferMarker(byte player, int from, int to, string id, string name, ushort count, ushort origCount, bool isScriptChange)
    {
		Log.Debug($"SERVER OUT: {nameof(TransferMarker)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)59);
				writer.Write(player);
				writer.Write(from);
				writer.Write(to);
				writer.Write(id);
				writer.Write(name);
				writer.Write(count);
				writer.Write(origCount);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void PassTo(byte player, int id, byte to, bool requested)
    {
		Log.Debug($"SERVER OUT: {nameof(PassTo)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)61);
				writer.Write(player);
				writer.Write(id);
				writer.Write(to);
				writer.Write(requested);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void TakeFrom(int id, byte to)
    {
		Log.Debug($"SERVER OUT: {nameof(TakeFrom)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)63);
				writer.Write(id);
				writer.Write(to);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void DontTake(int id)
    {
		Log.Debug($"SERVER OUT: {nameof(DontTake)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)65);
				writer.Write(id);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void FreezeCardsVisibility(int group)
    {
		Log.Debug($"SERVER OUT: {nameof(FreezeCardsVisibility)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)66);
				writer.Write(group);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void GroupVis(byte player, int group, bool defined, bool visible)
    {
		Log.Debug($"SERVER OUT: {nameof(GroupVis)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)68);
				writer.Write(player);
				writer.Write(group);
				writer.Write(defined);
				writer.Write(visible);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void GroupVisAdd(byte player, int group, byte who)
    {
		Log.Debug($"SERVER OUT: {nameof(GroupVisAdd)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)70);
				writer.Write(player);
				writer.Write(group);
				writer.Write(who);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void GroupVisRemove(byte player, int group, byte who)
    {
		Log.Debug($"SERVER OUT: {nameof(GroupVisRemove)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)72);
				writer.Write(player);
				writer.Write(group);
				writer.Write(who);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void LookAt(byte player, int uid, int group, bool look)
    {
		Log.Debug($"SERVER OUT: {nameof(LookAt)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)74);
				writer.Write(player);
				writer.Write(uid);
				writer.Write(group);
				writer.Write(look);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void LookAtTop(byte player, int uid, int group, int count, bool look)
    {
		Log.Debug($"SERVER OUT: {nameof(LookAtTop)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)76);
				writer.Write(player);
				writer.Write(uid);
				writer.Write(group);
				writer.Write(count);
				writer.Write(look);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void LookAtBottom(byte player, int uid, int group, int count, bool look)
    {
		Log.Debug($"SERVER OUT: {nameof(LookAtBottom)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)78);
				writer.Write(player);
				writer.Write(uid);
				writer.Write(group);
				writer.Write(count);
				writer.Write(look);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void StartLimited(byte player, Guid[] packs)
    {
		Log.Debug($"SERVER OUT: {nameof(StartLimited)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)80);
				writer.Write(player);
				writer.Write((short)packs.Length);
				foreach (var g in packs)
					writer.Write(g.ToByteArray());
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void CancelLimited(byte player)
    {
		Log.Debug($"SERVER OUT: {nameof(CancelLimited)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)82);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void CardSwitchTo(byte player, int card, string alternate)
    {
		Log.Debug($"SERVER OUT: {nameof(CardSwitchTo)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)83);
				writer.Write(player);
				writer.Write(card);
				writer.Write(alternate);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void PlayerSetGlobalVariable(byte player, string name, string oldval, string val)
    {
		Log.Debug($"SERVER OUT: {nameof(PlayerSetGlobalVariable)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)84);
				writer.Write(player);
				writer.Write(name);
				writer.Write(oldval);
				writer.Write(val);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void SetGlobalVariable(string name, string oldval, string val)
    {
		Log.Debug($"SERVER OUT: {nameof(SetGlobalVariable)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)85);
				writer.Write(name);
				writer.Write(oldval);
				writer.Write(val);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Ping()
    {
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)87);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void IsTableBackgroundFlipped(bool isFlipped)
    {
		Log.Debug($"SERVER OUT: {nameof(IsTableBackgroundFlipped)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)88);
				writer.Write(isFlipped);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void PlaySound(byte player, string name)
    {
		Log.Debug($"SERVER OUT: {nameof(PlaySound)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)89);
				writer.Write(player);
				writer.Write(name);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Ready(byte player)
    {
		Log.Debug($"SERVER OUT: {nameof(Ready)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)90);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void PlayerState(byte player, byte state)
    {
		Log.Debug($"SERVER OUT: {nameof(PlayerState)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)91);
				writer.Write(player);
				writer.Write(state);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void RemoteCall(byte player, string function, string args)
    {
		Log.Debug($"SERVER OUT: {nameof(RemoteCall)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)92);
				writer.Write(player);
				writer.Write(function);
				writer.Write(args);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void GameStateReq(byte player)
    {
		Log.Debug($"SERVER OUT: {nameof(GameStateReq)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)93);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void GameState(byte toPlayer, string state)
    {
		Log.Debug($"SERVER OUT: {nameof(GameState)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)94);
				writer.Write(toPlayer);
				writer.Write(state);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void DeleteCard(int card, byte player)
    {
		Log.Debug($"SERVER OUT: {nameof(DeleteCard)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)95);
				writer.Write(card);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void PlayerDisconnect(byte player)
    {
		Log.Debug($"SERVER OUT: {nameof(PlayerDisconnect)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)96);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void AddPacks(byte player, Guid[] packs, bool selfOnly)
    {
		Log.Debug($"SERVER OUT: {nameof(AddPacks)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)98);
				writer.Write(player);
				writer.Write((short)packs.Length);
				foreach (var g in packs)
					writer.Write(g.ToByteArray());
				writer.Write(selfOnly);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void AnchorCard(int id, byte player, bool anchor)
    {
		Log.Debug($"SERVER OUT: {nameof(AnchorCard)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)99);
				writer.Write(id);
				writer.Write(player);
				writer.Write(anchor);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void SetCardProperty(int id, byte player, string name, string val, string valtype)
    {
		Log.Debug($"SERVER OUT: {nameof(SetCardProperty)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)100);
				writer.Write(id);
				writer.Write(player);
				writer.Write(name);
				writer.Write(val);
				writer.Write(valtype);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void ResetCardProperties(int id, byte player)
    {
		Log.Debug($"SERVER OUT: {nameof(ResetCardProperties)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)101);
				writer.Write(id);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Filter(int card, string color)
    {
		Log.Debug($"SERVER OUT: {nameof(Filter)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)102);
				writer.Write(card);
				writer.Write(color);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void SetBoard(string name)
    {
		Log.Debug($"SERVER OUT: {nameof(SetBoard)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)103);
				writer.Write(name);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void SetPlayerColor(byte player, string color)
    {
		Log.Debug($"SERVER OUT: {nameof(SetPlayerColor)}");
		using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(_socket?.Server.Context.IsMuted ?? 0);
				writer.Write((byte)104);
				writer.Write(player);
				writer.Write(color);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}
	}

	class BinarySenderStub : BaseBinaryStub
	{
		private ServerSocket to;

		public BinarySenderStub(ServerSocket to) : base(to)
		{ this.to = to; }

		protected override void Send(byte[] data)
		{
			try
			{
				to.Send(data);
			}
			catch
			{
// TODO: Notify disconnection
//				if (Program.Server != null && Program.Server.Disconnected(to))
//					return;
//				Program.Client.Disconnected();
			}
		}
	}
}
