<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#
  XDocument doc = XDocument.Load(Host.ResolvePath(@"Protocol.xml"));
#>
/*
 * This file was automatically generated!
 * Do not modify, changes will get lost when the file is regenerated!
 */
using System;
using System.Diagnostics;
using System.IO;
using Octgn.Library.Localization;

namespace Octgn.Server
{
	public sealed class BinaryParser
	{
		private static log4net.ILog Log = log4net.LogManager.GetLogger(nameof(BinaryParser));

		private readonly ServerSocket _socket;

		public BinaryParser(ServerSocket socket)
		{
			_socket = socket ?? throw new ArgumentNullException(nameof(socket));
		}

		public void Parse(byte[] data)
		{
			MemoryStream stream = new MemoryStream(data);
			BinaryReader reader = new BinaryReader(stream);
			short length;
			_socket.Server.Context.IsMuted = reader.ReadInt32();
			byte method = reader.ReadByte();
			switch (method)
			{
<#
  var anonymousCalls = new List<int>();
  var pingId = -1;
  int msgId = -1;
  PushIndent("\t\t\t\t");
  foreach (var msg in doc.Root.Elements("msg"))
  {
    ++msgId;
    if ((bool?)msg.Attribute("server") != true) continue;
	if((bool?)msg.Attribute("anonymous") == true) anonymousCalls.Add(msgId);
    WriteLine("case {0}:", msgId);
    WriteLine("{");
    PushIndent("\t");
    string msgName = msg.Attribute("name").Value;
	if(msgName.ToLower() == "ping") pingId = msgId;
    int paramId = 0;
    foreach (var param in msg.Elements("param"))
    {
      string code = paramTypes[param.Attribute("type").Value];
      WriteLine(code, paramId++, msgName);
    }
	if(msgName != "Ping")
		WriteLine("Log.Debug($\"SERVER IN:  {0}\");", msgName);
    WriteLine("_socket.Handler.{0}({1});", msgName, BuildParameters(paramId));
    WriteLine("break;");
    PopIndent();
    WriteLine("}");
  }
  PopIndent();
#>
				default:
					Debug.WriteLine(L.D.ServerMessage__UnknownBinaryMessage + method);
					break;
			}
			reader.Close();
		}

		public static byte PingId = <#=pingId#>;

		public static byte[] AnonymousCalls = new byte[] { <#=string.Join(", ", anonymousCalls)#> };
	}
}
<#+
  private string BuildParameters(int paramCount)
  {
    var sb = new StringBuilder();
    for (int i = 0; i < paramCount; ++i)
    {
      sb.Append("arg").Append(i).Append(", ");
    }
    if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
    return sb.ToString();
  }

  private Dictionary<string, string> paramTypes = new Dictionary<string, string>()
  {
    { "byte", "byte arg{0} = reader.ReadByte();" },
    { "ushort", "ushort arg{0} = reader.ReadUInt16();" },
    { "short", "short arg{0} = reader.ReadInt16();" },

    { "short[]", @"length = reader.ReadInt16();
short[] arg{0} = new short[length];
for (int i = 0; i < length; ++i)
	arg{0}[i] = reader.ReadInt16();" },

    { "int", "int arg{0} = reader.ReadInt32();" },

    { "int[]", @"length = reader.ReadInt16();
int[] arg{0} = new int[length];
for (int i = 0; i < length; ++i)
	arg{0}[i] = reader.ReadInt32();" },

    { "ulong", "ulong arg{0} = reader.ReadUInt64();" },

    { "ulong[]", @"length = reader.ReadInt16();
ulong[] arg{0} = new ulong[length];
for (int i = 0; i < length; ++i)
	arg{0}[i] = reader.ReadUInt64();" },

    { "float", "float arg{0} = reader.ReadSingle();" },
    { "bool", "bool arg{0} = reader.ReadBoolean();" },
    { "bool[]", @"length = reader.ReadInt16();
bool[] arg{0} = new bool[length];
for (int i = 0; i < length; ++i)
	arg{0}[i] = reader.ReadBoolean();" },
    { "string", "string arg{0} = reader.ReadString();" },
	{ "string[]", @"length = reader.ReadInt16();
string[] arg{0} = new string[length];
for (int i = 0; i < length; ++i)
	arg{0}[i] = reader.ReadString();" },
    { "Version", "Version arg{0} = new Version(reader.ReadString());" },
    { "Guid", "Guid arg{0} = new Guid(reader.ReadBytes(16));" },

    { "Guid[]", @"length = reader.ReadInt16();
Guid[] arg{0} = new Guid[length];
for (int i = 0; i < length; ++i)
	arg{0}[i] = new Guid(reader.ReadBytes(16));" },

    { "Player", "byte arg{0} = reader.ReadByte();" },
    { "PlayerOrSpectator", "byte arg{0} = reader.ReadByte();" },
    { "ControllableObject", "int arg{0} = reader.ReadInt32();" },
    { "Group", "int arg{0} = reader.ReadInt32();" },

    { "Player[]", @"length = reader.ReadInt16();
byte[] arg{0} = new byte[length];
for (int i = 0; i < length; ++i)
arg{0}[i] = reader.ReadByte();" },

    { "Group[]", @"length = reader.ReadInt16();
int[] arg{0} = new int[length];
for (int i = 0; i < length; ++i)
arg{0}[i] = reader.ReadInt32();" },

    { "Card", "int arg{0} = reader.ReadInt32();" },
    { "Counter", "int arg{0} = reader.ReadInt32();" },
    { "CardOrientation", "CardOrientation arg{0} = (CardOrientation)reader.ReadByte();" },
    { "Color?", @"string arg{0} = reader.ReadString();" }
  };
#>