<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#
  XDocument doc = XDocument.Load(Host.ResolvePath(@"Protocol.xml"));
#>
/*
 * This file was automatically generated.
 * Do not modify, changes will get lots when the file is regenerated!
 */
using System;

namespace Octgn.Server
{
	internal sealed class Broadcaster : Octgn.Server.IClientCalls
	{
		private static log4net.ILog Log = log4net.LogManager.GetLogger(nameof(Broadcaster));

		private byte[] binData = new byte[1024];
		private BinFormatter bin;

		private sealed class BinFormatter : BaseBinaryStub
		{
			private Broadcaster bcast;

			internal BinFormatter(Broadcaster bcast, Handler handler) : base(handler)
			{ this.bcast = bcast; }

			protected override void Send(byte[] data)
			{ bcast.binData = data; }
		}

		private readonly State _state;

		internal Broadcaster(State state)
		{
			_state = state;
			bin = new BinFormatter(this, _state.Handler);
		}

		internal void RefreshTypes()
		{

		}

		internal void Send()
		{
			foreach (var player in _state.Players)
				try
				{
					if (player.Connected == false) continue;
					player.Socket.Send(binData);
				}
				catch (Exception ex)
				{
					Log.Error($"{nameof(Send)}", ex);
				}
		}
<#
  foreach (var msg in doc.Root.Elements("msg").Where(m => (bool?)m.Attribute("client") == true))
  {
    string msgName = msg.Attribute("name").Value;
#>

    public void <#= msgName #>(<#= DeclareParameters(msg) #>)
    {
      bin.<#= msgName #>(<#= CallParameters(msg) #>);
      Send();
    }
<# } #>
	}
}
<#+
  private string DeclareParameters(XElement msg)
  {
    var sb = new StringBuilder();
    foreach (var p in msg.Elements("param"))
      sb.Append(ConvertParameterType(p.Attribute("type").Value))
        .Append(" ")
        .Append(p.Attribute("name").Value)
        .Append(", ");
    if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
    return sb.ToString();
  }

  private string CallParameters(XElement msg)
  {
    var sb = new StringBuilder();
    foreach (var p in msg.Elements("param"))
      sb.Append(p.Attribute("name").Value)
        .Append(", ");
    if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
    return sb.ToString();
  }

  private string ConvertParameterType(string type)
  {
    switch (type)
    {
      case "Player":
	  case "PlayerOrSpectator":
        return "byte";
      case "ControllableObject":
      case "Group":
      case "Card":
      case "Counter":
        return "int";
      case "Player[]":
        return "byte[]";
      case "Group[]":
        return "int[]";
      case "Color?":
        return "string";
      default:
        return type;
    }
  }
#>