<div id="script">
    <style>
      canvas {
        border: 1px solid #9C9898;
      }
      </style>
    <script language="javascript" src="/Content/js/kinetic-v3.10.3.min.js"></script>
    <script language="javascript">
            //Card back constant
            var cardBackLocation = '';

            //Check if magic is installed in normal octgn.
            var installed = false;
            var checkInstall = true;
            if (checkInstall)
            {
                $.get("/api/ResourceList/Get", { resourcePath: "" }, checkInstallCallback);
            }

            function checkInstallCallback(data) {
                if (data.directories != null) {
                    $.each(data.directories, function (key, val) {
                        if (val.indexOf("a6c8d2e8-7cd8-11dd-8f94-e62b56d89593") >= 0) {
                            installed = true;
                            checkInstall = false;
                            return false;
                        }
                    });
                }
                if(installed)
                {
                    GetCardBackLocation();
                }
                else
                {
                    alert("magic is not installed in octgn");
                }
            }

            //set the card back constant from the o8g
            function GetCardBackLocation() {
                $.get("/api/ResourceList/Get", { resourcePath: "a6c8d2e8-7cd8-11dd-8f94-e62b56d89593/Defs"}, GetCardBackLocationCallback);
            }

            function GetCardBackLocationCallback(data)
            {
                if (data.files != null) {
                    $.each(data.files, function (key, val) {
                        if (val.lastIndexOf(".o8g") != -1) {
                            cardBackLocation = "/Resource/cards--back.jpg/" + val.replace(/\//g, "--");
                            return false;
                        }
                    });
                }
                if (cardBackLocation.length > 0)
                {
                    GetSetLocation();
                }
            }

            //temp cardimage holder since there are no decks or shuffle stuff yet
            var cards = [];

            //get the first non marker set location
            function GetSetLocation() {
                $.get("/api/ResourceList/Get", { resourcePath: "a6c8d2e8-7cd8-11dd-8f94-e62b56d89593/Sets"}, GetSetLocationCallback);
            }

            function GetSetLocationCallback(data)
            {
                if(data.files != null)
                {
                    $.each(data.files, function (key, val) {
                        if (val.indexOf("MarkersAndTokens") == -1 && val.lastIndexOf(".o8s") != -1) {
                            setLocation = val;
                            return false;
                        }
                    });
                }
                if(setLocation.length > 0)
                {
                    GetCardImageLocations();
                }
            }

            //get the image locations inside the o8s set
            function GetCardImageLocations() {
                $.get("/api/ResourceList/Get", { resourcePath: "cards", o8xPath: setLocation }, GetCardImageLocationsCallback);
            }

            function GetCardImageLocationsCallback(data)
            {
                if(data.files != null)
                {
                    $.each(data.files, function (key, val) {
                        var url = "/Resource/";
                        var pathInO8x = val.replace(/\//g, "--");
                        var pathToO8x = setLocation.replace(/\//g, "--");
                        var url = url + pathInO8x + "/" + pathToO8x;
                        cards.push(url);
                    });
                }
                if(cards.length > 0)
                {
                    LoadStage();
                }
            }

            //set cardBack to #testimg
            function LoadStage2() {
                    var stage = new Kinetic.Stage({
                        container: "container",
                        width: 1024,
                        height: 768
                    });
                    var layer = new Kinetic.Layer();
                    var colors = ["red", "orange", "yellow", "green", "blue", "purple"];

                    for (var n = 0; n < 6; n++) {
                        // anonymous function to induce scope
                        (function () {
                            var i = n;
                            var box = new Kinetic.Rect({
                                x: i * 30 + 150,
                                y: i * 18 + 40,
                                fill: colors[i],
                                stroke: "black",
                                strokeWidth: 4,
                                draggable: true,
                                width: 100,
                                height: 50
                            });

                            box.on("dragstart", function () {
                                box.moveToTop();
                                layer.draw();
                            });

                            box.on("dragmove", function () {
                                document.body.style.cursor = "pointer";
                            });
                            /*
                            * dblclick to remove box for desktop app
                            * and dbltap to remove box for mobile app
                            */
                            box.on("dblclick dbltap", function () {
                                layer.remove(box);
                                layer.draw();
                            });

                            box.on("mouseover", function () {
                                document.body.style.cursor = "pointer";
                            });
                            box.on("mouseout", function () {
                                document.body.style.cursor = "default";
                            });

                            layer.add(box);
                        })();
                    }

                    stage.add(layer);
                }

                var imageHeight = 200;
                var imageWidth = 160;
                var stage;
                function LoadStage() {
                    stage = new Kinetic.Stage({
                        container: "container",
                        width: 1024,
                        height: 768
                    });
                    var layer = new Kinetic.Layer();

                    var deckImageObj = new Image();
                    deckImageObj.onload = function () {
                        var deckImage = new Kinetic.Image({
                            x: stage.getWidth() - imageWidth,
                            y: stage.getHeight() - imageHeight,
                            image: deckImageObj,
                            width: imageWidth,
                            height: imageHeight,
                            draggable: false,
                            stroke: "black",
                            strokeWidth: 1
                        });

                        deckImage.on("dblclick", function () {
                            DrawCard();
                        });

                        // add the shape to the layer
                        layer.add(deckImage);

                        // add the layer to the stage
                        stage.add(layer);
                    };
                    deckImageObj.src = cardBackLocation;
                }
                var count = 0;
                function DrawCard() {
                    if (count > cards.length) {
                        count = 0;
                    }
                    
                    var layer = new Kinetic.Layer();
                    var cardImageObj = new Image();
                    cardImageObj.onload = function () {
                        var cardImage = new Kinetic.Image({
                            x: stage.getWidth() - (imageWidth * 2),
                            y: stage.getHeight() - imageHeight,
                            image: cardImageObj,
                            width: imageWidth,
                            height: imageHeight,
                            draggable: true,
                            stroke: "black",
                            strokeWidth: 1
                        });

                        cardImage.on("dragstart", function () {
                            cardImage.moveToTop();
                            layer.draw();
                        });

                        cardImage.on("dragmove", function () {
                            document.body.style.cursor = "pointer";
                        });
                        /*
                        * dblclick to remove box for desktop app
                        * and dbltap to remove box for mobile app
                        */
                        cardImage.on("dblclick dbltap", function () {
                            layer.remove(cardImage);
                            layer.draw();
                        });

                        cardImage.on("mouseover", function () {
                            document.body.style.cursor = "pointer";
                        });
                        cardImage.on("mouseout", function () {
                            document.body.style.cursor = "default";
                        });

                        layer.add(cardImage);

                        // add the layer to the stage
                        stage.add(layer);
                    };
                    cardImageObj.src = cards[count];
                    count = count + 1;
                }
            

            //Assign next card image to #testimg
            var count = 0;
            function GetNextCard()
            {
                if(count > cards.length)
                {
                    count = 0;
                }
                $('#testimg').attr('src', cards[count]);
                count = count + 1;
            }


            //helper function for getting resource listing from normal filesystem
            function GetDirs(dir)
            {
                $.get("/api/ResourceList/Get", { resourcePath: dir }, function (data) {
                    var dirs = [];
                    var files = [];

                    $.each(data.directories, function (key, val) {
                        dirs.push('<li id="' + key + '"><a href="#" onclick="GetList(\'' + val + '\')">' + val + '</a></li>');
                    });
                    $.each(data.files, function (key, val) {
                        files.push('<li id="' + key + '">' + val + '</li>');
                    });
                    $('#dirdiv').empty();
                    $('<ul/>', {
                        'class': 'my-new-list',
                        html: dirs.join('')
                    }).appendTo('#dirdiv');
                    $('#filediv').empty();
                    $('<ul/>', {
                        'class': 'my-new-list',
                        html: files.join('')
                    }).appendTo('#filediv');
                });
            }
    </script>
</div>
<div id="gameboard">
 <!--<a href ="#" onclick="GetNextCard()"><img src="" id="testimg" height="400" width="300" /></a>
 <h2>Directories:</h2>
 <div id="dirdiv"></div>
 <h2>Files:</h2>
 <div id="filediv"></div>-->
 <div id="container">
 </div>
</div>
