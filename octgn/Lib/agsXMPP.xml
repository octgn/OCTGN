<?xml version="1.0"?>
<doc>
    <assembly>
        <name>agsXMPP</name>
    </assembly>
    <members>
        <member name="T:agsXMPP.Xml.xpnet.NS">
            <summary>
            Namespace stack.
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.NS.#ctor">
            <summary>
            Create a new stack, primed with xmlns and xml as prefixes.
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.NS.PushScope">
            <summary>
            Declare a new scope, typically at the start of each element
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.NS.PopScope">
            <summary>
            Pop the current scope off the stack.  Typically at the end of each element.
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.NS.AddNamespace(System.String,System.String)">
            <summary>
            Add a namespace to the current scope.
            </summary>
            <param name="prefix"></param>
            <param name="uri"></param>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.NS.LookupNamespace(System.String)">
            <summary>
            Lookup a prefix to find a namespace.  Searches down the stack, starting at the current scope.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.NS.ToString">
            <summary>
            Debug output only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.Xml.xpnet.NS.DefaultNamespace">
            <summary>
            The current default namespace.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Status">
            <summary>
            Summary description for MucUser.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Dom.Node">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Node.AddChild(agsXMPP.Xml.Dom.Node)">
            <summary>
            Appends the given Element as child element
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Node.ToString">
            <summary>
            Returns the Xml of the current Element (Node) as string
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Node.ToString(System.Xml.Formatting)">
            <summary>
            returns the Xml, difference to the Xml property is that you can set formatting porperties
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Node.ToString(System.Xml.Formatting,System.Int32)">
            <summary>
            returns the Xml, difference to the Xml property is that you can set formatting properties
            </summary>
            <param name="format"></param>
            <param name="indent"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetAttributeBool(System.String)">
            <summary>
            Reads a boolean Attribute, if the attrib is absent it returns also false.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetAttributeDouble(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="ifp"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetAttributeDouble(System.String)">
            <summary>
            Get a Attribute of type double (Decimal seperator = ".")
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetTag(System.String)">
            <summary>
            Return the Text of the first Tag with a specified Name.
            It doesnt traverse the while tree and checks only the unerlying childnodes
            </summary>
            <param name="TagName">Name of Tag to find as string</param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetTagBase64(System.String,System.String)">
            <summary>
            Adds a Tag and encodes the Data to BASE64
            </summary>
            <param name="argTagname"></param>
            <param name="argText"></param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetTagBase64(System.String,System.Byte[])">
            <summary>
            Adds a Tag end decodes the byte buffer to BASE64
            </summary>
            <param name="argTagname"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetTagBool(System.String)">
            <summary>
            Return the Text of the first Tag with a specified Name in all childnodes as boolean
            </summary>
            <param name="TagName">name of Tag to findas string</param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetTagDouble(System.String)">
            <summary>
            Get a Tag of type double (Decimal seperator = ".")
            </summary>
            <param name="TagName"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetTagDouble(System.String,System.IFormatProvider)">
            <summary>
            Get a Tag of type double with the given iFormatProvider
            </summary>
            <param name="TagName"></param>
            <param name="nfi"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.HasTagEnum(System.Type)">
            <summary>
            
            </summary>
            <param name="enumType"></param>
            <returns></returns>		
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.RemoveTag(System.String)">
            <summary>
            Remove a Tag when it exists
            </summary>
            <param name="TagName">Tagname to remove</param>
            <returns>true when existing and removed, false when not existing</returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.RemoveTag(System.Type)">
            <summary>
            Remove a Tag when it exists
            </summary>
            <param name="type">Type of the tag that should be removed</param>
            <returns>true when existing and removed, false when not existing</returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.RemoveTags(System.Type)">
            <summary>
            Removes all Tags of the given type. Doesnt traverse the tree
            </summary>
            <param name="type">Type of the tags that should be removed</param>
            <returns>true when tags were removed, false when no tags were found and removed</returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.ReplaceChild(agsXMPP.Xml.Dom.Element)">
            <summary>
            Same as AddChild, but Replaces the childelement when it exists
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.RemoveAttribute(System.String)">
            <summary>
            Removes a Attribute
            </summary>
            <param name="name">Attribute as string to remove</param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,System.String)">
            <summary>
            Adds a new Attribue or changes a Attriv when already exists
            </summary>
            <param name="name">name of Attribute to add/change</param>
            <param name="value">value of teh Attribute to add/change</param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,System.Boolean)">
            <summary>
            Writes a boolean attribute, the value is either 'true' or 'false'
            </summary>
            <param name="name"></param>
            <param name="val"></param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,agsXMPP.Jid)">
            <summary>
            Set a attribute of type Jid
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,System.Double)">
            <summary>
            Set a attribute from a double in english number format
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,System.Double,System.IFormatProvider)">
            <summary>
            Set a attribute from a double with the given Format provider
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="ifp"></param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SelectSingleElement(System.Type)">
            <summary>
            Find a Element by type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SelectSingleElement(System.Type,System.Boolean)">
            <summary>
            find a Element by type and loop thru all children
            </summary>
            <param name="type"></param>
            <param name="loopChildren"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SelectElements(System.String)">
            <summary>
            Returns all childNodes with the given Tagname,
            this function doesn't traverse the whole tree!!!
            </summary>
            <param name="TagName"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element._SelectElements(agsXMPP.Xml.Dom.Element,System.Type,agsXMPP.Xml.Dom.ElementList)">
            <summary>
            returns a nodelist of all found nodes of the given Type
            </summary>
            <param name="e"></param>
            <param name="type"></param>
            <param name="es"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element._SelectElement(agsXMPP.Xml.Dom.Node,System.String)">
            <summary>
            Select a single Element.
            This function doesnt traverse the whole tree and checks only the underlying childnodes
            </summary>
            <param name="se"></param>
            <param name="tagname"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element._SelectElement(agsXMPP.Xml.Dom.Node,System.String,System.Boolean)">
            <summary>
            Select a single Elemnt
            </summary>
            <param name="se"></param>
            <param name="tagname"></param>
            <param name="traverseChildren">when set to true then the function traverses the whole tree</param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element._SelectElement(agsXMPP.Xml.Dom.Node,System.String,System.String,System.Boolean)">
            <summary>
            Find Element by Namespace
            </summary>
            <param name="se"></param>
            <param name="tagname"></param>
            <param name="AttribName"></param>
            <param name="AttribValue"></param>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.Xml.Dom.Element.IsRootElement">
            <summary>
            Is this Element a Rootnode?
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Dom.Element.TagName">
            <summary>
            The Full Qualified Name
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Dom.Element.HasChildElements">
            <summary>
            returns whether the current element has child elements or not.
            cares only about element, not text nodes etc...
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Dom.Element.FirstChild">
            <summary>
            returns the first child element (no textNodes)
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Dom.Element.FirstNode">
            <summary>
            Returns the first ChildNode, doesnt matter of which type it is
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Dom.Element.LastNode">
            <summary>
            Returns the last ChildNode, doesnt matter of which type it is
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.Value">
            <summary>
            Summary description for Value.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.tls.Failure">
            <summary>
            Summary description for Failure.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.search.SearchIq">
            <summary>
            Summary description for SearchIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.IQ">
            <summary>
            Iq Stanza.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.Stanza">
            <summary>
            Base XMPP Element
            This must ne used to build all other new packets
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.DirectionalElement">
            <summary>
            Base XMPP Element
            This must ne used to build all other new packets
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.Base.DirectionalElement.SwitchDirection">
            <summary>
            Switches the from and to attributes when existing
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.Base.Stanza.GenerateId">
            <summary>
            Generates a automatic id for the packet.
            !!! Overwrites existing Ids
            </summary>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.protocol.Base.Stanza.Language">
            <summary>        
            XML Language attribute
            </summary>
            <remarks>
            The language 'xml:lang' attribute  SHOULD be included by the initiating entity on the header for the initial stream 
            to specify the default language of any human-readable XML character data it sends over that stream. 
            If the attribute is included, the receiving entity SHOULD remember that value as the default for both the 
            initial stream and the response stream; if the attribute is not included, the receiving entity SHOULD use 
            a configurable default value for both streams, which it MUST communicate in the header for the response stream. 
            For all stanzas sent over the initial stream, if the initiating entity does not include an 'xml:lang' attribute, 
            the receiving entity SHOULD apply the default value; if the initiating entity does include an 'xml:lang' attribute, 
            the receiving entity MUST NOT modify or delete it (see also xml:langxml:lang). 
            The value of the 'xml:lang' attribute MUST conform to the format defined in RFC 3066 (Tags for the Identification of Languages, January 2001.[LANGTAGS]).
            </remarks>
        </member>
        <member name="P:agsXMPP.protocol.client.IQ.Query">
            <summary>
            The query Element. Value can also be null which removes the Query tag when existing
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.IQ.Error">
            <summary>
            Error Child Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.IQ.Vcard">
            <summary>
            Get or Set the VCard if it is a Vcard IQ
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.IQ.Bind">
            <summary>
            Get or Set the Bind ELement if it is a BingIq
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.IQ.Session">
            <summary>
            Get or Set the Session Element if it is a SessionIq
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.oob.OobIq">
            <summary>
            Summary description for OobIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoItemsIq">
            <summary>
            Discovering the Items Associated with a Jabber Entity
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoItem">
             <summary>
            
             </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.PrivacyIq">
            <summary>
            Summary description for PrivateIq.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.Item.Id">
            <summary>
            The optional id
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.component.Route">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.Route.Type">
            <summary>
            Gets or Sets the logtype
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.Route.RouteElement">
            <summary>
            sets or gets the element to route
            </summary>
        </member>
        <member name="T:agsXMPP.net.dns.SRVRecord">
            <summary>
            Summary description for SRVRecord.
            </summary>
        </member>
        <member name="T:agsXMPP.net.dns.RecordBase">
            <summary>
            A simple base class for the different ResourceRecords, ANAME, MX, SOA, NS etc.
            </summary>
        </member>
        <member name="M:agsXMPP.net.dns.SRVRecord.#ctor(agsXMPP.net.dns.Pointer)">
            <summary>
            Constructs a NS record by reading bytes from a return message
            </summary>
            <param name="pointer">A logical pointer to the bytes holding the record</param>
        </member>
        <member name="M:agsXMPP.net.dns.SRVRecord.CompareTo(System.Object)">
            <summary>
            Implements the IComparable interface so that we can sort the SRV records by their
            lowest priority
            </summary>
            <param name="other">the other SRVRecord to compare against</param>
            <returns>1, 0, -1</returns>
        </member>
        <member name="T:agsXMPP.net.dns.Resolver">
            <summary>
            Summary description for Dns.
            </summary>
        </member>
        <member name="M:agsXMPP.net.dns.Resolver.#ctor">
            <summary>
            Private constructor - this static class should never be instantiated
            </summary>
        </member>
        <member name="M:agsXMPP.net.dns.Resolver.SRVLookup(System.String,System.Net.IPAddress)">
            <summary>
            Shorthand form to make SRV querying easier, essentially wraps up the retreival
            of the SRV records, and sorts them by preference
            </summary>
            <param name="domain">domain name to retreive SRV RRs for</param>
            <param name="dnsServer">the server we're going to ask</param>
            <returns>An array of SRVRecords</returns>
        </member>
        <member name="M:agsXMPP.net.dns.Resolver.Lookup(agsXMPP.net.dns.Request,System.Net.IPAddress)">
            <summary>
            The principal look up function, which sends a request message to the given
            DNS server and collects a response. This implementation re-sends the message
            via UDP up to two times in the event of no response/packet loss
            </summary>
            <param name="request">The logical request to send to the server</param>
            <param name="dnsServer">The IP address of the DNS server we are querying</param>
            <returns>The logical response from the DNS server or null if no response</returns>
        </member>
        <member name="T:agsXMPP.protocol.iq.agent.AgentsIq">
            <summary>
            Summary description for AgentsIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.html.Body">
            <summary>
            The Body Element of a XHTML message
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.html.Body.InnerHtml">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.xpnet.Token">
            <summary>
            A token that was parsed.
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.xpnet.Token.TokenEnd">
            <summary>
            The end of the current token, in relation to the beginning of the buffer.
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.xpnet.Token.NameEnd">
            <summary>
            The end of the current token's name, in relation to the beginning of the buffer.
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.xpnet.Token.RefChar1">
            <summary>
            The parsed-out character. &amp; for &amp;amp;
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.xpnet.Token.RefChar2">
            <summary>
            The second of two parsed-out characters.  TODO: find example.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.xpnet.BufferAggregate">
            <summary>
            Aggregate byte arrays together, so we can parse across IP packet boundaries
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.BufferAggregate.#ctor">
            <summary>
            Create an empty buffer
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.BufferAggregate.Write(System.Byte[])">
            <summary>
            Write to the buffer.  Please make sure that you won't use this memory any more after you hand it in.  
            It will get mangled.
            </summary>
            <param name="buf"></param>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.BufferAggregate.GetBuffer">
            <summary>
            Get the current aggregate contents of the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.BufferAggregate.Clear(System.Int32)">
            <summary>
            Clear the first "offset" bytes of the buffer, so they won't be parsed again.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.BufferAggregate.ToString">
            <summary>
            UTF8 encode the current contents of the buffer.  Just for prettiness in the debugger.
            </summary>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.Xml.Dom.Document">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Document.Clear">
            <summary>
            Clears the Document
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.stream.Features">
            <summary>
            Summary description for Features.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.stream.Features.SupportsCompression">
            <summary>
            Is Stream Compression supported?
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.stream.Features.SupportsRegistration">
            <summary>
            Is Registration supported?
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Challenge">
            <summary>
            Summary description for Challenge.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.private.Private">
            <summary>
            Private XML Storage JEP-0049
            </summary>
            <remarks>
            A Jabber client can store any arbitrary XML on the server side by sending an
            iq stanza of type "set" to the server with a query child scoped by the 'jabber:iq:private' namespace.
            The query element MAY contain any arbitrary XML fragment as long as the root element of that 
            fragment is scoped by its own namespace. The data can then be retrieved by sending an iq stanza 
            of type "get" with a query child scoped by the 'jabber:iq:private' namespace, 
            which in turn contains a child element scoped by the namespace used for storage of that fragment.
            Using this method, Jabber entities can store private data on the server and retrieve it 
            whenever necessary. The data stored might be anything, as long as it is valid XML.
            One typical usage for this namespace is the server-side storage of client-specific preferences; 
            another is Bookmark Storage.
            </remarks>
        </member>
        <member name="P:agsXMPP.protocol.iq.private.Private.Storage">
            <summary>
            The <see cref="T:agsXMPP.protocol.extensions.bookmarks.Storage">Storage</see> object 
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.oob.Oob">
            <summary>
            Zusammenfassung für Oob.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.FieldContainer">
            <summary>
            Bass class for all xdata classes that contain xData fields
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.data.FieldContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.x.data.FieldContainer"/> class.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.data.FieldContainer.AddField">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.x.data.FieldContainer.AddField(agsXMPP.protocol.x.data.Field)">
            <summary>
            
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.data.FieldContainer.GetField(System.String)">
            <summary>
            Retrieve a field with the given "var"
            </summary>
            <param name="var"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.x.data.FieldContainer.GetFields">
            <summary>
            Gets a list of all form fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.CreateNode(agsXMPP.Jid,System.String)">
            <summary>
            Create a Node with default configuration
            </summary>
            <param name="to"></param>
            <param name="node"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.CreateNode(agsXMPP.Jid,agsXMPP.Jid,System.String,System.Boolean)">
            <summary>
            Create a Node
            </summary>
            <param name="to"></param>
            <param name="from"></param>
            <param name="defaultConfig"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.PublishItem(agsXMPP.Jid,System.String,agsXMPP.protocol.extensions.pubsub.Item)">
            <summary>
            Publish a payload to a Node
            </summary>
            <param name="to"></param>
            <param name="node"></param>
            <param name="payload"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.PublishItem(agsXMPP.Jid,System.String,agsXMPP.protocol.extensions.pubsub.Item,agsXMPP.IqCB)">
            <summary>
            Publish a payload to a Node
            </summary>
            <param name="to"></param>
            <param name="node"></param>
            <param name="payload"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.PublishItem(agsXMPP.Jid,System.String,agsXMPP.protocol.extensions.pubsub.Item,agsXMPP.IqCB,System.Object)">
            <summary>
            Publish a payload to a Node
            </summary>
            <param name="to"></param>
            <param name="node"></param>
            <param name="payload"></param>
            <param name="cb"></param>
            <param name="cbArgs"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.PublishItem(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.protocol.extensions.pubsub.Item)">
            <summary>
            Publish a payload to a Node
            </summary>
            <param name="to"></param>
            <param name="from"></param>
            <param name="node"></param>
            <param name="payload"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.PublishItem(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.protocol.extensions.pubsub.Item,agsXMPP.IqCB)">
            <summary>
            Publish a payload to a Node
            </summary>
            <param name="to"></param>
            <param name="from"></param>
            <param name="node"></param>
            <param name="payload"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.PublishItem(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.protocol.extensions.pubsub.Item,agsXMPP.IqCB,System.Object)">
            <summary>
            Publish a payload to a Node
            </summary>
            <param name="to"></param>
            <param name="from"></param>
            <param name="node"></param>
            <param name="payload"></param>
            <param name="cb"></param>
            <param name="cbArgs"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.Subscribe(agsXMPP.Jid,agsXMPP.Jid,System.String)">
            <summary>
            
            </summary>
            <param name="to">Jid of the Publish Subscribe Service</param>
            <param name="subscribe">Jid which should be subscribed</param>
            <param name="node">node to which we want to subscribe</param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.Unsubscribe(agsXMPP.Jid,agsXMPP.Jid,System.String)">
            <summary>
            
            </summary>
            <param name="to">Jid of the Publish Subscribe Service</param>
            <param name="subscribe">Jid which should be subscribed</param>
            <param name="node">node to which we want to subscribe</param>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.owner.Pending.Data">
            <summary>
            The x-Data Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.commands.Command.Node">
            <summary>
            Node is Required
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.commands.Command.Data">
            <summary>
            The X-Data Element
            </summary>
        </member>
        <member name="T:agsXMPP.net.SocketConnectionType">
            <summary>
            Summary description for SocketType.
            </summary>
        </member>
        <member name="F:agsXMPP.net.SocketConnectionType.Direct">
            <summary>
            Direct TCP/IP Connection
            </summary>
        </member>
        <member name="F:agsXMPP.net.SocketConnectionType.HttpPolling">
            <summary>
            A HTTP Polling Socket connection (JEP-0025)
            </summary>
        </member>
        <member name="F:agsXMPP.net.SocketConnectionType.Bosh">
            <summary>
            <para>XEP-0124: Bidirectional-streams Over Synchronous HTTP (BOSH)</para>
            <para>http://www.xmpp.org/extensions/xep-0124.html</para>
            </summary>
        </member>
        <member name="T:agsXMPP.net.dns.Request">
            <summary>
            A Request logically consists of a number of questions to ask the DNS Server. Create a request and
            add questions to it, then pass the request to Resolver.Lookup to query the DNS Server. It is important
            to note that many DNS Servers DO NOT SUPPORT MORE THAN 1 QUESTION PER REQUEST, and it is advised that
            you only add one question to a request. If not ensure you check Response.ReturnCode to see what the
            server has to say about it.
            </summary>
        </member>
        <member name="M:agsXMPP.net.dns.Request.#ctor">
            <summary>
            Construct this object with the default values and create an ArrayList to hold
            the questions as they are added
            </summary>
        </member>
        <member name="M:agsXMPP.net.dns.Request.AddQuestion(agsXMPP.net.dns.Question)">
            <summary>
            Adds a question to the request to be sent to the DNS server.
            </summary>
            <param name="question">The question to add to the request</param>
        </member>
        <member name="M:agsXMPP.net.dns.Request.GetMessage">
            <summary>
            Convert this request into a byte array ready to send direct to the DNS server
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.net.dns.Request.AddDomain(System.Collections.ArrayList,System.String)">
            <summary>
            Adds a domain name to the ArrayList of bytes. This implementation does not use
            the domain name compression used in the class Pointer - maybe it should.
            </summary>
            <param name="data">The ArrayList representing the byte array message</param>
            <param name="domainName">the domain name to encode and add to the array</param>
        </member>
        <member name="T:agsXMPP.protocol.extensions.msgreceipts.Received">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.comprFunc">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.#ctor(agsXMPP.IO.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buf">The buffer containing input data.</param>
            <param name="off">The index of the first byte of data.</param>
            <param name="len">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Return true if input is needed via <see cref="M:agsXMPP.IO.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)"> SetInput</see>
            </summary>		
        </member>
        <member name="P:agsXMPP.IO.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:agsXMPP.IO.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:agsXMPP.IO.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:agsXMPP.IO.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <!-- Badly formed XML comment ignored for member "T:agsXMPP.Idn.Stringprep" -->
        <member name="M:agsXMPP.Idn.Stringprep.NamePrep(System.String)">
            <summary> Preps a name according to the Stringprep profile defined in
            RFC3491. Unassigned code points are not allowed.
            *
            </summary>
            <param name="input">the name to prep.
            </param>
            <returns> the prepped name.
            @throws StringprepException If the name cannot be prepped with
            this profile.
            @throws NullPointerException If the name is null.
            
            </returns>
        </member>
        <member name="M:agsXMPP.Idn.Stringprep.NamePrep(System.String,System.Boolean)">
            <summary> Preps a name according to the Stringprep profile defined in
            RFC3491.
            *
            </summary>
            <param name="input">the name to prep.
            </param>
            <param name="allowUnassigned">true if the name may contain unassigned
            code points.
            </param>
            <returns> the prepped name.
            @throws StringprepException If the name cannot be prepped with
            this profile.
            @throws NullPointerException If the name is null.
            
            </returns>
        </member>
        <member name="F:agsXMPP.Idn.Stringprep.RFC3920_NODEPREP_PROHIBIT">
            Characters prohibited by RFC3920 nodeprep that aren't defined as
            part of the RFC3454 tables.
        </member>
        <member name="M:agsXMPP.Idn.Stringprep.NodePrep(System.String)">
            <summary> Preps a node name according to the Stringprep profile defined in
            RFC3920. Unassigned code points are not allowed.
            *
            </summary>
            <param name="input">the node name to prep.
            </param>
            <returns> the prepped node name.
            @throws StringprepException If the node name cannot be prepped
            with this profile.
            @throws NullPointerException If the node name is null.
            
            </returns>
        </member>
        <member name="M:agsXMPP.Idn.Stringprep.NodePrep(System.String,System.Boolean)">
            <summary>
            Preps a node name according to the Stringprep profile defined in RFC3920.
            </summary>
            <param name="input">the node name to prep.
            </param>
            <param name="allowUnassigned">true if the node name may contain
            unassigned code points.
            </param>
            <returns> the prepped node name.
            @throws StringprepException If the node name cannot be prepped
            with this profile.
            @throws NullPointerException If the node name is null.
            
            </returns>
        </member>
        <member name="M:agsXMPP.Idn.Stringprep.ResourcePrep(System.String)">
            <summary>
            Preps a resource name according to the Stringprep profile defined
            in RFC3920. Unassigned code points are not allowed.
            </summary>
            <param name="input">the resource name to prep.
            </param>
            <returns> the prepped node name.
            @throws StringprepException If the resource name cannot be prepped
            with this profile.
            @throws NullPointerException If the resource name is null.
            
            </returns>
        </member>
        <member name="M:agsXMPP.Idn.Stringprep.ResourcePrep(System.String,System.Boolean)">
            <summary>
            Preps a resource name according to the Stringprep profile defined
            in RFC3920.
            </summary>
            <param name="input">the resource name to prep.
            </param>
            <param name="allowUnassigned">true if the resource name may contain
            unassigned code points.
            </param>
            <returns>
            the prepped node name.
            @throws StringprepException If the resource name cannot be prepped
            with this profile.
            @throws NullPointerException If the resource name is null.
            
            </returns>        
        </member>
        <member name="M:agsXMPP.protocol.x.vcard_update.VcardUpdate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.x.vcard_update.VcardUpdate"/> class.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.vcard_update.VcardUpdate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.x.vcard_update.VcardUpdate"/> class.
            </summary>
            <param name="photo">The photo.</param>
        </member>
        <member name="P:agsXMPP.protocol.x.vcard_update.VcardUpdate.Photo">
            <summary>
            SHA1 hash of the avatar image data
            <para>if no image/avatar should be advertised, or other clients should be forced
            to remove the image set it to a empty string value ("")</para>
            <para>if this protocol is supported but you ae not ready o advertise a imaeg yet
            set teh value to null.</para>
            <para>Otherwise teh value must the SHA1 hash of the image data.</para>
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.shim.Headers">
            <summary>
            JEP-0131: Stanza Headers and Internet Metadata (SHIM)
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.shim.Headers.AddHeader">
            <summary>
            Adds a new Header
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.shim.Headers.AddHeader(agsXMPP.protocol.extensions.shim.Header)">
            <summary>
            Adds the given Header
            </summary>
            <param name="header"></param>
            <returns>returns the given Header</returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.shim.Headers.AddHeader(System.String,System.String)">
            <summary>
            Adds a new Header
            </summary>
            <param name="name">header name</param>
            <param name="val">header value</param>
            <returns>returns the new added header</returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.shim.Headers.GetHeader(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:agsXMPP.protocol.x.data.Item">
            <summary>
            Used in XData seach.
            includes the headers of the search results
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.jivesoftware.phone.PhoneAction.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.Publish.#ctor(System.String)">
            <summary>
            Its recommended to use this constructor because a node is required
            </summary>
            <param name="node">Node to publish</param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.Publish.AddItem">
            <summary>
            Add a payload Item
            </summary>
            <returns>returns the added Item</returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.Publish.AddItem(agsXMPP.protocol.extensions.pubsub.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns>returns the added item</returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.Publish.GetItems">
            <summary>
            This will return all payload items. Multiple items are possible, but doe the most implementaions one item 
            should be enough
            </summary>
            <returns>returns an Array of Items</returns>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.Publish.Node">
            <summary>
            The node to publish to. This Property is required
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.Message">
            <summary>
            This class represents a XMPP message.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.client.Message.CreateNewThread">
            <summary>
            Create a new unique Thread indendifier
            </summary>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Body">
            <summary>
            The body of the message. This contains the message text.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Subject">
            <summary>
            subject of this message. Its like a subject in a email. The Subject is optional.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Thread">
            <summary>
            messages and conversations could be threaded. You can compare this with threads in newsgroups or forums.
            Threads are optional.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Type">
            <summary>
            message type (chat, groupchat, normal, headline or error).
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Error">
            <summary>
            Error Child Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Html">
            <summary>
            The html part of the message if you want to support the html-im Jep. This part of the message is optional.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.XEvent">
            <summary>
            The event Element for JEP-0022 Message events
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.XDelay">
            <summary>
            The event Element for JEP-0022 Message events
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Headers">
            <summary>
            Stanza Headers and Internet Metadata
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Nickname">
            <summary>
            Nickname Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.Item">
            <summary>
            Summary description for Item.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.Avatar">
            <summary>
            Summary description for Avatar.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.ibb.Close">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.ibb.Base">
            <summary>
            IBB base class
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.ibb.Base.Sid">
            <summary>
            Sid
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.ibb.Close.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.ibb.Close.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="sid"></param>
        </member>
        <member name="T:agsXMPP.IO.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>setInput()</code>, then inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>needsInput() returns true because the input buffer is empty.
             You have to provide more input with <code>setInput()</code>.
             NOTE: needsInput() also returns true when, the stream is finished.
             </li>
             <li>needsDictionary() returns true, you have to provide a preset
                dictionary with <code>setDictionary()</code>.</li>
             <li>finished() returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:agsXMPP.IO.Compression.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:agsXMPP.IO.Compression.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:agsXMPP.IO.Compression.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:agsXMPP.IO.Compression.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="offset">
            The offset into buffer where the dictionary starts.
            </param>
            <param name="len">
            The length of the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:agsXMPP.IO.Compression.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buf">
            the input.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="offset">
            The offset into buffer where the input starts.
            </param>
            <param name="length">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The off and/or len are wrong.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buf has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <param name="offset">
            the offset into buffer where the output should start.
            </param>
            <param name="len">
            the maximum length of the output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if len is &lt;= 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the offset and/or len are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:agsXMPP.IO.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="lvl">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="off">
            the start of the data.
            </param>
            <param name="len">
            the length of the data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended() or if previous input is still pending.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="lvl">
            the new compression level.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.SetStrategy(agsXMPP.IO.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            setLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If end() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset and/or length don't match the array length.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dict">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dict">
            The dictionary data
            </param>
            <param name="offset">
            An offset into the dictionary.
            </param>
            <param name="length">
            The length of the dictionary data to use
            </param>
            <exception cref="T:System.InvalidOperationException">
            If setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="P:agsXMPP.IO.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:agsXMPP.IO.StringWriterWithEncoding">
            <summary>
            This class is inherited from the StringWriter Class
            The standard StringWriter class supports no encoding
            With this Class we can set the Encoding of a StringWriter in the Constructor
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Dom.Text">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.sasl.Anonymous.AnonymousMechanism">
            <summary>
            SALS ANONYMOUS Mechanism, this allows anonymous logins to a xmpp server.
            </summary>
        </member>
        <member name="T:agsXMPP.sasl.Mechanism">
            <summary>
            Summary description for Mechanism.
            </summary>
        </member>
        <member name="M:agsXMPP.sasl.Mechanism.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.sasl.Mechanism.Init(agsXMPP.XmppClientConnection)">
            <summary>
            
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:agsXMPP.sasl.Mechanism.Parse(agsXMPP.Xml.Dom.Node)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:agsXMPP.sasl.Mechanism.Username">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.sasl.Mechanism.Password">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.sasl.Mechanism.Server">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.sasl.Anonymous.AnonymousMechanism.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.sasl.Anonymous.AnonymousMechanism.Init(agsXMPP.XmppClientConnection)">
            <summary>
            
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:agsXMPP.sasl.Anonymous.AnonymousMechanism.Parse(agsXMPP.Xml.Dom.Node)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Invite">
            <summary>
            Invite other users t a chatroom
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Invitation">
            <summary>
            A base class vor Decline and Invite
            We need From, To and SwitchDirection here. This is why we inherit from XmppPacket Base
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Invitation.Reason">
            <summary>
            A reason why you want to invite this contact
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Invite.Nickname">
            <summary>
            Nickname Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.session.SessionIq">
            <summary>
            Starting the session, this is done after resource binding
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Response">
            <summary>
            Summary description for Response.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Email">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.vcard.Email.#ctor(agsXMPP.protocol.iq.vcard.EmailType,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type">Type of the new Email Adress</param>
            <param name="address">Email Adress</param>
            <param name="prefered">Is this adressed prefered</param>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Email.IsPrefered">
            <summary>
            Is this the prefered contact adress?
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Email.UserId">
            <summary>
            The email Adress
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoInfoIq">
            <summary>
            Discovering Information About a Jabber Entity
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoFeature">
            <summary>
            Disco feature
            </summary>
            <remarks>
            see: http://www.jabber.org/registrar/disco-features.html
            </remarks>
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoFeature.Var">
            <summary>
            feature name or namespace
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.primary.Primary">
            <summary>
            http://www.jabber.org/jeps/inbox/primary.html
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.jivesoftware.phone.PhoneStatus">
            <summary>
            A user's presence is updated when on a phone call.
            The Jive Messenger/Asterisk implementation will update the user's presence automatically 
            by adding the following packet extension to the user's presence:
            &lt;phone-status xmlns="http://jivesoftware.com/xmlns/phone" status="ON_PHONE" &gt; 
            Jive Messenger can also be configured to change the user's availability
            to "Away -- on the phone" when the user is on a call (in addition to the packet extension).
            This is useful when interacting with clients that don't understand the extended presence information
            or when using transports to other IM networks where extended presence information is not available.        
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.jivesoftware.phone.PhoneStatusType">
            <summary>
            Events are sent to the user when their phone is ringing, 
            when a call ends, etc. As with presence, 
            pubsub should probably be the mechanism used for sending this information, 
            but message packets are used to send events for the time being
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.event.Items.AddItem">
            <summary>
            Add a payload Item
            </summary>
            <returns>returns the added Item</returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.event.Items.AddItem(agsXMPP.protocol.extensions.pubsub.event.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns>returns the added item</returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.event.Items.GetItems">
            <summary>
            This will return all payload items. Multiple items are possible, but doe the most implementaions one item 
            should be enough
            </summary>
            <returns>returns an Array of Items</returns>
        </member>
        <member name="T:agsXMPP.protocol.extensions.geoloc.GeoLoc">
            <summary>
            XEP-0080 Geographical Location (GeoLoc)
            This JEP defines a format for capturing data about an entity's geographical location (geoloc).
            The namespace defined herein is intended to provide a semi-structured format for 
            describing a geographical location that may change fairly frequently, 
            where the geoloc information is provided as Global Positioning System (GPS) coordinates.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.geoloc.GeoLoc.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.geoloc.GeoLoc.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Latitude"></param>
            <param name="Longitude"></param>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Description">
            <summary>
            A natural-language description of the location
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Datum">
            <summary>
            GPS datum
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Latitude">
            <summary>
            Latitude in decimal degrees North
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Longitude">
            <summary>
            Longitude in decimal degrees East
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Altitude">
            <summary>
            Altitude in meters above or below sea level
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Bearing">
            <summary>
            GPS bearing (direction in which the entity is heading to reach its next waypoint),
            measured in decimal degrees relative to true north
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Error">
            <summary>
            Horizontal GPS error in arc minutes
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Timestamp">
            <summary>
            UTC timestamp specifying the moment when the reading was taken           
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.compression.Compress.#ctor(agsXMPP.protocol.extensions.compression.CompressionMethod)">
            <summary>
            Constructor with a given method/algorithm for Stream compression
            </summary>
            <param name="method">method/algorithm used to compressing the stream</param>
        </member>
        <member name="P:agsXMPP.protocol.extensions.compression.Compress.Method">
            <summary>
            method/algorithm used to compressing the stream
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.PresenceType">
            <summary>
            Enumeration for the Presence Type structure. 
            This enum is used to describe what type of Subscription Type the current subscription is.
            When sending a presence or receiving a subscription this type is used to easily identify the type of subscription it is.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.available">
            <summary>
            Used when one wants to send presence to someone/server/transport that you’re available. 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.subscribe">
            <summary>
            Used to send a subscription request to someone.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.subscribed">
            <summary>
            Used to accept a subscription request.
            </summary>		
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.unsubscribe">
            <summary>
            Used to unsubscribe someone from your presence. 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.unsubscribed">
            <summary>
            Used to deny a subscription request.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.unavailable">
            <summary>
            Used when one wants to send presence to someone/server/transport that you’re unavailable.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.invisible">
            <summary>
            Used when you want to see your roster, but don't want anyone on you roster to see you
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.error">
            <summary>
            presence error
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.probe">
            <summary>
            used in server to server protocol to request presences
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.disco.DiscoManager.#ctor(agsXMPP.XmppClientConnection)">
            <summary>
            Constructor
            </summary>
            <param name="con"></param>
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoManager.AutoAnswerDiscoInfoRequests">
            <summary>
            Automatically answer DiscoInfo requests.
            Set disco information (identties and features) in the DiscoInfo property object.        
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.caps.Capabilities">
            <summary>
            <para>
            It is often desirable for a Jabber/XMPP application (commonly but not necessarily a client) to take different actions 
            depending on the capabilities of another application from which it receives presence information. Examples include: 
            </para> 
            <list type="bullet">
            <item>
                <term>Showing a different set of icons depending on the capabilities of other clients.</term>
            </item>
            <item>
                <term>Not sending XHTML-IM content to plaintext clients such as cell phones.</term>
            </item>
            <item>
                <term>Allowing the initiation of Voice over IP (VoIP) sessions only to clients that support VoIP.</term>
            </item>
            <item>
                <term>Not showing a "Send a File" button if another user's client does not support File Transfer.</term>
            </item>
            </list>
            <para>
            Recently, some existing Jabber clients have begun sending Software Version requests to each entity from which they 
            receive presence. That solution is impractical on a larger scale, particularly for users or applications with large rosters. 
            This document proposes a more robust and scalable solution: namely, a presence-based mechanism for exchanging information 
            about entity capabilities.
            </para>
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.caps.Capabilities.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.caps.Capabilities.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="version"></param>
            <param name="node"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.caps.Capabilities.SetVersion(agsXMPP.protocol.iq.disco.DiscoInfo)">
            <summary>
            Builds and sets the caps ver attribute from a DiscoInfo object
            </summary>
            <param name="di"></param>
        </member>
        <member name="P:agsXMPP.protocol.extensions.caps.Capabilities.Node">
            <summary>
            Required node attribute
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.caps.Capabilities.Version">
            <summary>
            Required version attribute
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.InflaterHuffmanTree.GetSymbol(agsXMPP.IO.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:agsXMPP.Collections.BareJidComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.Collections.BareJidComparer.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.Xml.xpnet.UTF8Encoding">
            <summary>
            UTF-8 specific tokenizer.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.xpnet.Encoding">
            <summary>
            Base tokenizer class
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_LEAD2">
            <summary>
            Need more bytes
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_LEAD3">
            <summary>
            Need more bytes
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_LEAD4">
            <summary>
            Need more bytes
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_NONXML">
            <summary>
            Not XML
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_MALFORM">
            <summary>
            Malformed XML
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_LT">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_AMP">
            <summary>
            Ampersand
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_RSQB">
            <summary>
            right square bracket
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_CR">
            <summary>
            carriage return
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_LF">
            <summary>
            line feed
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_GT">
            <summary>
            greater than
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_QUOT">
            <summary>
            Quote
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_APOS">
            <summary>
            Apostrophe
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_EQUALS">
            <summary>
            Equal sign
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_QUEST">
            <summary>
            Question mark
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_EXCL">
            <summary>
            Exclamation point
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_SOL">
            <summary>
            Solidus (/)
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_SEMI">
            <summary>
            Semicolon
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_NUM">
            <summary>
            Hash
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_LSQB">
            <summary>
            Left square bracket
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_S">
            <summary>
            space
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_NMSTRT">
            <summary>
            
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_NAME">
            <summary>
            
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_MINUS">
            <summary>
            Minus
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_OTHER">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_PERCNT">
            <summary>
            Percent
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_LPAR">
            <summary>
            Left paren
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_RPAR">
            <summary>
            Right paren
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_AST">
            <summary>
            
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_PLUS">
            <summary>
            +
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_COMMA">
            <summary>
            ,
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.BT_VERBAR">
            <summary>
            Pipe
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.asciiTypeTable">
            <summary>
            What syntax do each of the ASCII7 characters have?
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            
            </summary>
            <param name="sourceBuf"></param>
            <param name="sourceStart"></param>
            <param name="sourceEnd"></param>
            <param name="targetBuf"></param>
            <param name="targetStart"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.#ctor(System.Int32)">
            <summary>
            Constructor called by subclasses to set the minimum bytes per character
            </summary>
            <param name="minBPC"></param>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.byteType(System.Byte[],System.Int32)">
            <summary>
            Get the byte type of the next byte.  There are guaranteed to be minBPC available bytes starting at off.
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.byteToAscii(System.Byte[],System.Int32)">
            <summary>
            Really only works for ASCII7.
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.charMatches(System.Byte[],System.Int32,System.Char)">
            <summary>
            This must only be called when c is an (XML significant)
            ASCII character.
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.byteType2(System.Byte[],System.Int32)">
            <summary>
            Called only when byteType(buf, off) == BT_LEAD2
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.byteType3(System.Byte[],System.Int32)">
            <summary>
            Called only when byteType(buf, off) == BT_LEAD3
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.byteType4(System.Byte[],System.Int32)">
            <summary>
            Called only when byteType(buf, off) == BT_LEAD4
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.movePosition(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.xpnet.Position)">
            Moves a position forward.  On entry, <code>pos</code> gives
            the position of the byte at index <code>off</code> in
            <code>buf</code>.  On exit, it <code>pos</code> will give
            the position of the byte at index <code>end</code>, which
            must be greater than or equal to <code>off</code>.  The
            bytes between <code>off</code> and <code>end</code> must
            encode one or more complete characters.  A carriage return
            followed by a line feed will be treated as a single line
            delimiter provided that they are given to
            <code>movePosition</code> together.
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.tokenizeCdataSection(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.xpnet.Token)">
             Scans the first token of a byte subarrary that starts with the
             content of a CDATA section.
             Returns one of the following integers according to the type of token
             that the subarray starts with:
             <ul>
             <li><code>TOK.DATA_CHARS</code></li>
             <li><code>TOK.DATA_NEWLINE</code></li>
             <li><code>TOK.CDATA_SECT_CLOSE</code></li>
             </ul>
             <p>
             Information about the token is stored in <code>token</code>.
             </p>
             After <code>TOK.CDATA_SECT_CLOSE</code> is returned, the application
             should use <code>tokenizeContent</code>.
            
             @exception EmptyTokenException if the subarray is empty
             @exception PartialTokenException if the subarray contains only part of
             a legal token
             @exception InvalidTokenException if the subarrary does not start
             with a legal token or part of one
             @exception ExtensibleTokenException if the subarray encodes just a carriage
             return ('\r')
            
             @see #TOK.DATA_CHARS
             @see #TOK.DATA_NEWLINE
             @see #TOK.CDATA_SECT_CLOSE
             @see Token
             @see EmptyTokenException
             @see PartialTokenException
             @see InvalidTokenException
             @see ExtensibleTokenException
             @see #tokenizeContent
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.tokenizeContent(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.xpnet.ContentToken)">
             Scans the first token of a byte subarrary that contains content.
             Returns one of the following integers according to the type of token
             that the subarray starts with:
             <ul>
             <li><code>TOK.START_TAG_NO_ATTS</code></li>
             <li><code>TOK.START_TAG_WITH_ATTS</code></li>
             <li><code>TOK.EMPTY_ELEMENT_NO_ATTS</code></li>
             <li><code>TOK.EMPTY_ELEMENT_WITH_ATTS</code></li>
             <li><code>TOK.END_TAG</code></li>
             <li><code>TOK.DATA_CHARS</code></li>
             <li><code>TOK.DATA_NEWLINE</code></li>
             <li><code>TOK.CDATA_SECT_OPEN</code></li>
             <li><code>TOK.ENTITY_REF</code></li>
             <li><code>TOK.MAGIC_ENTITY_REF</code></li>
             <li><code>TOK.CHAR_REF</code></li>
             <li><code>TOK.CHAR_PAIR_REF</code></li>
             <li><code>TOK.PI</code></li>
             <li><code>TOK.XML_DECL</code></li>
             <li><code>TOK.COMMENT</code></li>
             </ul>
             <p>
             Information about the token is stored in <code>token</code>.
             </p>
             When <code>TOK.CDATA_SECT_OPEN</code> is returned,
             <code>tokenizeCdataSection</code> should be called until
             it returns <code>TOK.CDATA_SECT</code>.
            
             @exception EmptyTokenException if the subarray is empty
             @exception PartialTokenException if the subarray contains only part of
             a legal token
             @exception InvalidTokenException if the subarrary does not start
             with a legal token or part of one
             @exception ExtensibleTokenException if the subarray encodes just a carriage
             return ('\r')
            
             @see #TOK.START_TAG_NO_ATTS
             @see #TOK.START_TAG_WITH_ATTS
             @see #TOK.EMPTY_ELEMENT_NO_ATTS
             @see #TOK.EMPTY_ELEMENT_WITH_ATTS
             @see #TOK.END_TAG
             @see #TOK.DATA_CHARS
             @see #TOK.DATA_NEWLINE
             @see #TOK.CDATA_SECT_OPEN
             @see #TOK.ENTITY_REF
             @see #TOK.MAGIC_ENTITY_REF
             @see #TOK.CHAR_REF
             @see #TOK.CHAR_PAIR_REF
             @see #TOK.PI
             @see #TOK.XML_DECL
             @see #TOK.COMMENT
             @see ContentToken
             @see EmptyTokenException
             @see PartialTokenException
             @see InvalidTokenException
             @see ExtensibleTokenException
             @see #tokenizeCdataSection
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.getInitialEncoding(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.xpnet.Token)">
             Returns an encoding object to be used to start parsing an
             external entity.  The encoding is chosen based on the
             initial 4 bytes of the entity.
             
             @param buf the byte array containing the initial bytes of
             the entity @param off the index in <code>buf</code> of the
             first byte of the entity @param end the index in
             <code>buf</code> following the last available byte of the
             entity; <code>end - off</code> must be greater than or
             equal to 4 unless the entity has fewer that 4 bytes, in
             which case it must be equal to the length of the entity
             @param token receives information about the presence of a
             byte order mark; if the entity starts with a byte order
             mark then <code>token.getTokenEnd()</code> will return
             <code>off + 2</code>, otherwise it will return
             <code>off</code>
            
             @see TextDecl
             @see XmlDecl
             @see #TOK.XML_DECL
             @see #getEncoding
             @see #getInternalEncoding
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.getEncoding(System.String)">
            Returns an <code>Encoding</code> corresponding to the
            specified IANA character set name.  Returns this
            <code>Encoding</code> if the name is null.  Returns null if
            the specified encoding is not supported.  Note that there
            are two distinct <code>Encoding</code> objects associated
            with the name <code>UTF-16</code>, one for each possible
            byte order; if this <code>Encoding</code> is UTF-16 with
            little-endian byte ordering, then
            <code>getEncoding("UTF-16")</code> will return this,
            otherwise it will return an <code>Encoding</code> for
            UTF-16 with big-endian byte ordering.  @param name a string
            specifying the IANA name of the encoding; this is case
            insensitive
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.getSingleByteEncoding(System.String)">
            Returns an <code>Encoding</code> for entities encoded with
            a single-byte encoding (an encoding in which each byte
            represents exactly one character).  @param map a string
            specifying the character represented by each byte; the
            string must have a length of 256;
            <code>map.charAt(b)</code> specifies the character encoded
            by byte <code>b</code>; bytes that do not represent any
            character should be mapped to <code>\uFFFD</code>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.getInternalEncoding">
            Returns an <code>Encoding</code> object for use with
            internal entities.  This is a UTF-16 big endian encoding,
            except that newlines are assumed to have been normalized
            into line feed, so carriage return is treated like a space.
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.tokenizeProlog(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.xpnet.Token)">
            Scans the first token of a byte subarray that contains part of a
            prolog.
            Returns one of the following integers according to the type of token
            that the subarray starts with:
            <ul>
            <li><code>TOK.PI</code></li>
            <li><code>TOK.XML_DECL</code></li>
            <li><code>TOK.COMMENT</code></li>
            <li><code>TOK.PARAM_ENTITY_REF</code></li>
            <li><code>TOK.PROLOG_S</code></li>
            <li><code>TOK.DECL_OPEN</code></li>
            <li><code>TOK.DECL_CLOSE</code></li>
            <li><code>TOK.NAME</code></li>
            <li><code>TOK.NMTOKEN</code></li>
            <li><code>TOK.POUND_NAME</code></li>
            <li><code>TOK.OR</code></li>
            <li><code>TOK.PERCENT</code></li>
            <li><code>TOK.OPEN_PAREN</code></li>
            <li><code>TOK.CLOSE_PAREN</code></li>
            <li><code>TOK.OPEN_BRACKET</code></li>
            <li><code>TOK.CLOSE_BRACKET</code></li>
            <li><code>TOK.LITERAL</code></li>
            <li><code>TOK.NAME_QUESTION</code></li>
            <li><code>TOK.NAME_ASTERISK</code></li>
            <li><code>TOK.NAME_PLUS</code></li>
            <li><code>TOK.COND_SECT_OPEN</code></li>
            <li><code>TOK.COND_SECT_CLOSE</code></li>
            <li><code>TOK.CLOSE_PAREN_QUESTION</code></li>
            <li><code>TOK.CLOSE_PAREN_ASTERISK</code></li>
            <li><code>TOK.CLOSE_PAREN_PLUS</code></li>
            <li><code>TOK.COMMA</code></li>
            </ul>
            @exception EmptyTokenException if the subarray is empty
            @exception PartialTokenException if the subarray contains only part of
            a legal token
            @exception InvalidTokenException if the subarrary does not start
            with a legal token or part of one
            @exception EndOfPrologException if the subarray starts with the document
            element; <code>tokenizeContent</code> should be used on the remainder
            of the entity
            @exception ExtensibleTokenException if the subarray is a legal token
            but subsequent bytes in the same entity could be part of the token
            @see #TOK.PI
            @see #TOK.XML_DECL
            @see #TOK.COMMENT
            @see #TOK.PARAM_ENTITY_REF
            @see #TOK.PROLOG_S
            @see #TOK.DECL_OPEN
            @see #TOK.DECL_CLOSE
            @see #TOK.NAME
            @see #TOK.NMTOKEN
            @see #TOK.POUND_NAME
            @see #TOK.OR
            @see #TOK.PERCENT
            @see #TOK.OPEN_PAREN
            @see #TOK.CLOSE_PAREN
            @see #TOK.OPEN_BRACKET
            @see #TOK.CLOSE_BRACKET
            @see #TOK.LITERAL
            @see #TOK.NAME_QUESTION
            @see #TOK.NAME_ASTERISK
            @see #TOK.NAME_PLUS
            @see #TOK.COND_SECT_OPEN
            @see #TOK.COND_SECT_CLOSE
            @see #TOK.CLOSE_PAREN_QUESTION
            @see #TOK.CLOSE_PAREN_ASTERISK
            @see #TOK.CLOSE_PAREN_PLUS
            @see #TOK.COMMA
            @see ContentToken
            @see EmptyTokenException
            @see PartialTokenException
            @see InvalidTokenException
            @see ExtensibleTokenException
            @see EndOfPrologException
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.tokenizeAttributeValue(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.xpnet.Token)">
            Scans the first token of a byte subarrary that contains part of
            literal attribute value.  The opening and closing delimiters
            are not included in the subarrary.
            Returns one of the following integers according to the type of
            token that the subarray starts with:
            <ul>
            <li><code>TOK.DATA_CHARS</code></li>
            <li><code>TOK.DATA_NEWLINE</code></li>
            <li><code>TOK.ATTRIBUTE_VALUE_S</code></li>
            <li><code>TOK.MAGIC_ENTITY_REF</code></li>
            <li><code>TOK.ENTITY_REF</code></li>
            <li><code>TOK.CHAR_REF</code></li>
            <li><code>TOK.CHAR_PAIR_REF</code></li>
            </ul>
            @exception EmptyTokenException if the subarray is empty
            @exception PartialTokenException if the subarray contains only part of
            a legal token
            @exception InvalidTokenException if the subarrary does not start
            with a legal token or part of one
            @exception ExtensibleTokenException if the subarray encodes just a carriage
            return ('\r')
            @see #TOK.DATA_CHARS
            @see #TOK.DATA_NEWLINE
            @see #TOK.ATTRIBUTE_VALUE_S
            @see #TOK.MAGIC_ENTITY_REF
            @see #TOK.ENTITY_REF
            @see #TOK.CHAR_REF
            @see #TOK.CHAR_PAIR_REF
            @see Token
            @see EmptyTokenException
            @see PartialTokenException
            @see InvalidTokenException
            @see ExtensibleTokenException
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.tokenizeEntityValue(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.xpnet.Token)">
            Scans the first token of a byte subarrary that contains part of
            literal entity value.  The opening and closing delimiters
            are not included in the subarrary.
            Returns one of the following integers according to the type of
            token that the subarray starts with:
            <ul>
            <li><code>TOK.DATA_CHARS</code></li>
            <li><code>TOK.DATA_NEWLINE</code></li>
            <li><code>TOK.PARAM_ENTITY_REF</code></li>
            <li><code>TOK.MAGIC_ENTITY_REF</code></li>
            <li><code>TOK.ENTITY_REF</code></li>
            <li><code>TOK.CHAR_REF</code></li>
            <li><code>TOK.CHAR_PAIR_REF</code></li>
            </ul>
            @exception EmptyTokenException if the subarray is empty
            @exception PartialTokenException if the subarray contains only part of
            a legal token
            @exception InvalidTokenException if the subarrary does not start
            with a legal token or part of one
            @exception ExtensibleTokenException if the subarray encodes just a carriage
            return ('\r')
            @see #TOK.DATA_CHARS
            @see #TOK.DATA_NEWLINE
            @see #TOK.MAGIC_ENTITY_REF
            @see #TOK.ENTITY_REF
            @see #TOK.PARAM_ENTITY_REF
            @see #TOK.CHAR_REF
            @see #TOK.CHAR_PAIR_REF
            @see Token
            @see EmptyTokenException
            @see PartialTokenException
            @see InvalidTokenException
            @see ExtensibleTokenException
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.skipIgnoreSect(System.Byte[],System.Int32,System.Int32)">
             Skips over an ignored conditional section.
             The subarray starts following the <code>&lt;![ IGNORE [</code>.
            
             @return the index of the character following the closing
             <code>]]&gt;</code>
            
             @exception PartialTokenException if the subarray does not contain the
             complete ignored conditional section
             @exception InvalidTokenException if the ignored conditional section
             contains illegal characters
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.getPublicId(System.Byte[],System.Int32,System.Int32)">
            Checks that a literal contained in the specified byte subarray
            is a legal public identifier and returns a string with
            the normalized content of the public id.
            The subarray includes the opening and closing quotes.
            @exception InvalidTokenException if it is not a legal public identifier
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.matchesXMLstring(System.Byte[],System.Int32,System.Int32,System.String)">
            Returns true if the specified byte subarray is equal to the string.
            The string must contain only XML significant characters.
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Encoding.skipS(System.Byte[],System.Int32,System.Int32)">
             Skips over XML whitespace characters at the start of the specified
             subarray.
            
             @return the index of the first non-whitespace character,
             <code>end</code> if there is the subarray is all whitespace
        </member>
        <member name="F:agsXMPP.Xml.xpnet.Encoding.charTypeTable">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.xpnet.Encoding.MinBytesPerChar">
            Returns the minimum number of bytes required to represent a single
            character in this encoding.  The value will be 1, 2 or 4.
        </member>
        <member name="M:agsXMPP.Xml.xpnet.UTF8Encoding.#ctor">
            <summary>
            New tokenizer
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.UTF8Encoding.byteType(System.Byte[],System.Int32)">
            <summary>
            What is the type of the current byte?
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.UTF8Encoding.byteToAscii(System.Byte[],System.Int32)">
            <summary>
            Current byte to ASCII char
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.UTF8Encoding.charMatches(System.Byte[],System.Int32,System.Char)">
            <summary>
            c is a significant ASCII character
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.UTF8Encoding.byteType2(System.Byte[],System.Int32)">
            <summary>
            A 2 byte UTF-8 representation splits the characters 11 bits
            between the bottom 5 and 6 bits of the bytes.
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.UTF8Encoding.convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            
            </summary>
            <param name="sourceBuf"></param>
            <param name="sourceStart"></param>
            <param name="sourceEnd"></param>
            <param name="targetBuf"></param>
            <param name="targetStart"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.UTF8Encoding.movePosition(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.xpnet.Position)">
            <summary>
            
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <param name="end"></param>
            <param name="pos"></param>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Role">
            <summary>
            There are four defined roles that an occupant may have
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.Role.none">
            <summary>
            the absence of a role
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.iq.owner.OwnerIq">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.storage.AvatarIq">
            <summary>
            Summary description for AvatarIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.storage.Avatar">
            <summary>
            Summary description for Avatar.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Mechanism">
            <summary>
            Summary description for Mechanism.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.sasl.Mechanism.MechanismType">
            <summary>
            SASL mechanis as enum
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.sasl.Mechanism.KerberosPrincipal">
            <summary>
            Gets or sets the kerberos principal.
            </summary>
            <value>The kerberos proncipal.</value>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Failure">
            <summary>
            Summary description for Failure.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.featureneg.FeatureNegIq">
            <summary>
            JEP-0020: Feature Negotiation
            This JEP defines a A protocol that enables two Jabber entities to mutually negotiate feature options.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.Event">
            <summary>
            JEP-0022: Message Events
            This JEP defines protocol extensions used to request and respond to events relating to the delivery, display, and composition of messages.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.Event.Offline">
            <summary>
            Indicates that the message has been stored offline by the intended recipient's server.
            This event is triggered only if the intended recipient's server supports offline storage, 
            has that support enabled, and the recipient is offline when the server receives the message for delivery.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.Event.Delivered">
            <summary>
            Indicates that the message has been delivered to the recipient. 
            This signifies that the message has reached the recipient's Jabber client, 
            but does not necessarily mean that the message has been displayed. 
            This event is to be raised by the Jabber client.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.Event.Displayed">
            <summary>
            Once the message has been received by the recipient's Jabber client, 
            it may be displayed to the user. 
            This event indicates that the message has been displayed, and is to be raised by the Jabber client.
            Even if a message is displayed multiple times, this event should be raised only once.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.Event.Composing">
            <summary>
            In threaded chat conversations, this indicates that the recipient is composing a reply to a message.
            The event is to be raised by the recipient's Jabber client. 
            A Jabber client is allowed to raise this event multiple times in response to the same request, 
            providing the original event is cancelled first.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.Event.Id">
            <summary>
            'id' attribute of the original message to which this event notification pertains.
            (If no 'id' attribute was included in the original message, then the id tag must still be included with no 
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.html.Html.Body">
            <summary>
            The Body Element of the XHTML Message
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.chatstates.Composing">
            <summary>
            User is composing a message.
            User is interacting with a message input interface specific to this chat session 
            (e.g., by typing in the input area of a chat window).
            </summary>
        </member>
        <member name="T:agsXMPP.net.dns.Question">
            <summary>
            Represents a DNS Question, comprising of a domain to query, the type of query (QTYPE) and the class
            of query (QCLASS). This class is an encapsulation of these three things, and extensive argument checking
            in the constructor as this may well be created outside the assembly (public protection)
            </summary>	
        </member>
        <member name="M:agsXMPP.net.dns.Question.#ctor(System.String,agsXMPP.net.dns.DnsType,agsXMPP.net.dns.DnsClass)">
            <summary>
            Construct the question from parameters, checking for safety
            </summary>
            <param name="domain">the domain name to query eg. bigdevelopments.co.uk</param>
            <param name="dnsType">the QTYPE of query eg. DnsType.MX</param>
            <param name="dnsClass">the CLASS of query, invariably DnsClass.IN</param>
        </member>
        <member name="M:agsXMPP.net.dns.Question.#ctor(agsXMPP.net.dns.Pointer)">
            <summary>
            Construct the question reading from a DNS Server response. Consult RFC1035 4.1.2
            for byte-wise details of this structure in byte array form
            </summary>
            <param name="pointer">a logical pointer to the Question in byte array form</param>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.MucManager">
            <summary>
            A helper class for Multi User Chat
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.Invite(agsXMPP.Jid,agsXMPP.Jid)">
            <summary>
            Invite a contact to join a chatroom
            </summary>
            <param name="to">The Jid of the contact to invite</param>
            <param name="room">The Jid of the chatroom</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.Invite(agsXMPP.Jid,agsXMPP.Jid,System.String)">
            <summary>
            Invite a contact to join a chatroom
            </summary>
            <param name="to">The Jid of the contact to invite</param>
            <param name="room">The Jid of the chatroom</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.Invite(agsXMPP.Jid[],agsXMPP.Jid,System.String)">
            <summary>
            Invite multiple contacts to a chatroom
            </summary>
            <param name="jids"></param>
            <param name="room"></param>
            <param name="reason"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.Decline(agsXMPP.Jid,agsXMPP.Jid)">
            <summary>
            Decline a groupchat invitation
            </summary>
            <param name="to">the jid which invited us</param>
            <param name="room">to room to which we send the decline (this is normally the same room we were invited to)</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.Decline(agsXMPP.Jid,agsXMPP.Jid,System.String)">
            <summary>
            Decline a groupchat invitation
            </summary>
            <param name="to">the jid which invited us</param>
            <param name="room">to room to which we send the decline (this is normally the same room we were invited to)</param>
            <param name="reason">reason why we decline the invitation</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.ChangeSubject(agsXMPP.Jid,System.String)">
            <summary>
            Change the subject of a room
            </summary>
            <param name="room"></param>
            <param name="newSubject"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.ChangeSubject(agsXMPP.Jid,System.String,System.String)">
            <summary>
            Change the subject of a room
            </summary>
            <param name="room"></param>
            <param name="newSubject"></param>
            <param name="body"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.ChangeNickname(agsXMPP.Jid,System.String)">
            <summary>
            Change the Nickname in a room
            </summary>
            <param name="room"></param>
            <param name="newNick"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.JoinRoom(agsXMPP.Jid,System.String)">
            <summary>
            Join a chatroom
            </summary>
            <param name="room">jid of the room to join</param>
            <param name="nickname">nickname to use in the room</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.JoinRoom(agsXMPP.Jid,System.String,System.Boolean)">
            <summary>
            Join a chatroom
            </summary>
            <param name="room">jid of the room to join</param>
            <param name="nickname">nickname to use in the room</param>
            <param name="disableHistory">true for joining without chat room history</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.JoinRoom(agsXMPP.Jid,System.String,System.String,System.Boolean)">
            <summary>
            Join a chatroom
            </summary>
            <param name="room">jid of the room to join</param>
            <param name="nickname">nickname to use in the room</param>
            <param name="password">password for password protected chat rooms</param>
            <param name="disableHistory">true for joining without chat room history</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.LeaveRoom(agsXMPP.Jid,System.String)">
            <summary>
            Leave a conference room
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.AcceptDefaultConfiguration(agsXMPP.Jid)">
            <summary>
            create an "instant room". This means you accept the default configuration and dont want to configure the room.
            </summary>
            <param name="room"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.AcceptDefaultConfiguration(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            create an "instant room". This means you accept the default configuration and dont want to configure the room.
            </summary>
            <param name="room"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.AcceptDefaultConfiguration(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            create an "instant room". This means you accept the default configuration and dont want to configure the room.
            </summary>
            <param name="room"></param>
            <param name="cb"></param>
            <param name="cbArgs"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestConfigurationForm(agsXMPP.Jid)">
            <summary>
            Request the configuration form of a chatroom.
            You can request the from when creating a new room. or at any time later if you want to change the room configuration.
            Only room owners can request this from. Otherwise the service must return a 403 forbidden error
            </summary>
            <param name="room"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestConfigurationForm(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            Request the configuration form of a chatroom.
            You can request the from when creating a new room. or at any time later if you want to change the room configuration.
            Only room owners can request this from. Otherwise the service must return a 403 forbidden error
            </summary>
            <param name="room"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestConfigurationForm(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            Request the configuration form of a chatroom.
            You can request the from when creating a new room. or at any time later if you want to change the room configuration.
            Only room owners can request this from. Otherwise the service must return a 403 forbidden error
            </summary>
            <param name="room"></param>
            <param name="cb"></param>
            <param name="cbArgs"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.KickOccupant(agsXMPP.Jid,System.String)">
            <summary>
            Kick a occupant
            A moderator has permissions kick a visitor or participant from a room.
            The kick is normally performed based on the occupant's room nickname (though it MAY be based on the full JID)
            and is completed by setting the role of a participant or visitor to a value of "none".
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname">Nickname od the occupant to kick</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.KickOccupant(agsXMPP.Jid,System.String,System.String)">
            <summary>
            Kick a occupant
            A moderator has permissions kick a visitor or participant from a room.
            The kick is normally performed based on the occupant's room nickname (though it MAY be based on the full JID)
            and is completed by setting the role of a participant or visitor to a value of "none".
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname">Nickname od the occupant to kick</param>
            <param name="reason">A optional reason why you kick this occupant</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.KickOccupant(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB)">
            <summary>
            Kick a occupant
            A moderator has permissions kick a visitor or participant from a room.
            The kick is normally performed based on the occupant's room nickname (though it MAY be based on the full JID)
            and is completed by setting the role of a participant or visitor to a value of "none".
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname">Nickname od the occupant to kick</param>
            <param name="reason">A optional reason why you kick this occupant</param>
            <param name="cb">Callback which is invoked with the result to this iq</param>        
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.KickOccupant(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            Kick a occupant
            A moderator has permissions kick a visitor or participant from a room.
            The kick is normally performed based on the occupant's room nickname (though it MAY be based on the full JID)
            and is completed by setting the role of a participant or visitor to a value of "none".
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname">Nickname od the occupant to kick</param>
            <param name="reason">A optional reason why you kick this occupant</param>
            <param name="cb">Callback which is invoked with the result to this iq</param>
            <param name="cbArg">Callback which is invoked with the result to this iq</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantVoice(agsXMPP.Jid,System.String)">
            <summary>
            
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantVoice(agsXMPP.Jid,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname"></param>
            <param name="reason"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantVoice(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB)">
            <summary>
            
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname"></param>
            <param name="reason"></param>
            <param name="cb"></param>        
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantVoice(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname"></param>
            <param name="reason"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeVoice(agsXMPP.Jid,System.String)">
            <summary>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak.
            The moderator can revoke voice from a participant by changing the participant's role to "visitor":
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeVoice(agsXMPP.Jid,System.String,System.String)">
            <summary>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak.
            The moderator can revoke voice from a participant by changing the participant's role to "visitor":
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname"></param>
            <param name="reason"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeVoice(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB)">
            <summary>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak.
            The moderator can revoke voice from a participant by changing the participant's role to "visitor":
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname"></param>
            <param name="reason"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeVoice(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak.
            The moderator can revoke voice from a participant by changing the participant's role to "visitor":
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname"></param>
            <param name="reason"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestVoiceList(agsXMPP.Jid)">
            <summary>
            A moderator in a moderated room may want to modify the voice list. 
            To do so, the moderator first requests the voice list by querying the room for all occupants 
            with a role of 'participant'.
            The service MUST then return the voice list to the moderator; each item MUST include 
            the 'nick' and 'role' attributes and SHOULD include the 'affiliation' and 'jid' attributes.
            The moderator MAY then modify the voice list. In order to do so, the moderator MUST send the 
            changed items (i.e., only the "delta") back to the service; each item MUST include 
            the 'nick' attribute and 'role' attribute (normally set to a value of "participant" or "visitor") 
            but SHOULD NOT include the 'jid' attribute and MUST NOT include the 'affiliation' attribute 
            (which is used to manage affiliations such as owner rather than the participant role),
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestVoiceList(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            A moderator in a moderated room may want to modify the voice list. 
            To do so, the moderator first requests the voice list by querying the room for all occupants 
            with a role of 'participant'.
            The service MUST then return the voice list to the moderator; each item MUST include 
            the 'nick' and 'role' attributes and SHOULD include the 'affiliation' and 'jid' attributes.
            The moderator MAY then modify the voice list. In order to do so, the moderator MUST send the 
            changed items (i.e., only the "delta") back to the service; each item MUST include 
            the 'nick' attribute and 'role' attribute (normally set to a value of "participant" or "visitor") 
            but SHOULD NOT include the 'jid' attribute and MUST NOT include the 'affiliation' attribute 
            (which is used to manage affiliations such as owner rather than the participant role),        
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestVoiceList(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            A moderator in a moderated room may want to modify the voice list. 
            To do so, the moderator first requests the voice list by querying the room for all occupants 
            with a role of 'participant'.
            The service MUST then return the voice list to the moderator; each item MUST include 
            the 'nick' and 'role' attributes and SHOULD include the 'affiliation' and 'jid' attributes.
            The moderator MAY then modify the voice list. In order to do so, the moderator MUST send the 
            changed items (i.e., only the "delta") back to the service; each item MUST include 
            the 'nick' attribute and 'role' attribute (normally set to a value of "participant" or "visitor") 
            but SHOULD NOT include the 'jid' attribute and MUST NOT include the 'affiliation' attribute 
            (which is used to manage affiliations such as owner rather than the participant role),        
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.BanUser(agsXMPP.Jid,agsXMPP.Jid)">
            <summary>
            
            </summary>
            <param name="room"></param>
            <param name="user"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.BanUser(agsXMPP.Jid,agsXMPP.Jid,System.String)">
            <summary>
            
            </summary>
            <param name="room"></param>
            <param name="user"></param>
            <param name="reason"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.BanUser(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.IqCB)">
            <summary>
            
            </summary>
            <param name="room"></param>
            <param name="user"></param>
            <param name="reason"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.BanUser(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            
            </summary>
            <param name="room"></param>
            <param name="user"></param>
            <param name="reason"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestBanList(agsXMPP.Jid)">
            <summary>
            A room admin may want to modify the ban list. 
            <remarks>
            Note: The ban list is always based on a user's bare JID, 
            although a nick (perhaps the last room nickname associated with that JID) MAY be included for convenience. 
            To modify the list of banned JIDs, the admin first requests the ban list by querying the room for all 
            users with an affiliation of 'outcast'.
            </remarks>
            </summary>
            <param name="room"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestBanList(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            A room admin may want to modify the ban list. 
            <remarks>
            Note: The ban list is always based on a user's bare JID, 
            although a nick (perhaps the last room nickname associated with that JID) MAY be included for convenience. 
            To modify the list of banned JIDs, the admin first requests the ban list by querying the room for all 
            users with an affiliation of 'outcast'.
            </remarks>
            </summary>
            <param name="room"></param>        
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestBanList(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            A room admin may want to modify the ban list. 
            <remarks>
            Note: The ban list is always based on a user's bare JID, 
            although a nick (perhaps the last room nickname associated with that JID) MAY be included for convenience. 
            To modify the list of banned JIDs, the admin first requests the ban list by querying the room for all 
            users with an affiliation of 'outcast'.
            </remarks>
            </summary>
            <param name="room"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantAdminPrivileges(agsXMPP.Jid,agsXMPP.Jid)">
            <summary>
            Grant administrative privileges to a member or unaffiliated user.
            This could be done by an room owner
            </summary>
            <param name="room"></param>
            <param name="user"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantAdminPrivileges(agsXMPP.Jid,agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            Grant administrative privileges to a member or unaffiliated user.
            This could be done by an room owner
            </summary>
            <param name="room"></param>
            <param name="user"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantAdminPrivileges(agsXMPP.Jid,agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            Grant administrative privileges to a member or unaffiliated user.
            This could be done by an room owner
            </summary>
            <param name="room"></param>
            <param name="user"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,agsXMPP.Jid)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room"></param>
            <param name="user"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,agsXMPP.Jid,System.String)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room"></param>
            <param name="user"></param>
            <param name="reason"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.IqCB)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room"></param>
            <param name="user"></param>
            <param name="reason"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room"></param>
            <param name="user"></param>
            <param name="reason"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,System.String)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,System.String,System.String)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
            <param name="reason"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
            <param name="reason"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
            <param name="reason"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantOwnershipPrivileges(agsXMPP.Jid,agsXMPP.Jid)">
            <summary>
            If allowed by an implementation, an owner MAY grant ownership privileges to another user.        
            </summary>
            <param name="room"></param>
            <param name="user"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantOwnershipPrivileges(agsXMPP.Jid,agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            If allowed by an implementation, an owner MAY grant ownership privileges to another user.        
            </summary>
            <param name="room"></param>
            <param name="user"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantOwnershipPrivileges(agsXMPP.Jid,agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            If allowed by an implementation, an owner MAY grant ownership privileges to another user.        
            </summary>
            <param name="room"></param>
            <param name="user"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeMembership(agsXMPP.Jid,System.String)">
            <summary>
            An admin may want to revoke a user's membership
            this is done by changing the user's affiliation to "none"
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeMembership(agsXMPP.Jid,System.String,System.String)">
            <summary>
            An admin may want to revoke a user's membership
            this is done by changing the user's affiliation to "none"
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
            <param name="reason"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeMembership(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB)">
            <summary>
            An admin may want to revoke a user's membership
            this is done by changing the user's affiliation to "none"
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
            <param name="reason"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeMembership(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            An admin may want to revoke a user's membership
            this is done by changing the user's affiliation to "none"
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
            <param name="reason"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestAdminList(agsXMPP.Jid)">
            <summary>
            Request the list of admins. This could be done by the room owner
            </summary>
            <param name="room"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestAdminList(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            Request the list of admins. This could be done by the room owner
            </summary>
            <param name="room"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestAdminList(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            Request the list of admins. This could be done by the room owner
            </summary>
            <param name="room"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestOwnerList(agsXMPP.Jid)">
            <summary>
            Request the owner list of a room
            </summary>
            <param name="room"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestOwnerList(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            Request the owner list of a room
            </summary>
            <param name="room"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestOwnerList(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            Request the owner list of a room
            </summary>
            <param name="room"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestMemberList(agsXMPP.Jid)">
            <summary>
            In the context of a members-only room, the member list is essentially a "whitelist" of people 
            who are allowed to enter the room. Anyone who is not a member is effectively banned from entering the room, 
            even if their affiliation is not "outcast".
            In the context of an open room, the member list is simply a list of users (bare JID and reserved nick) 
            who are registered with the room. Such users may appear in a room roster, have their room nickname reserved, 
            be returned in search results or FAQ queries, and the like.
            It is RECOMMENDED that only room admins have the privilege to modify the member list in members-only rooms. 
            To do so, the admin first requests the member list by querying the room for all users with an affiliation of "member"
            </summary>
            <param name="room"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestMemberList(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            In the context of a members-only room, the member list is essentially a "whitelist" of people 
            who are allowed to enter the room. Anyone who is not a member is effectively banned from entering the room, 
            even if their affiliation is not "outcast".
            In the context of an open room, the member list is simply a list of users (bare JID and reserved nick) 
            who are registered with the room. Such users may appear in a room roster, have their room nickname reserved, 
            be returned in search results or FAQ queries, and the like.
            It is RECOMMENDED that only room admins have the privilege to modify the member list in members-only rooms. 
            To do so, the admin first requests the member list by querying the room for all users with an affiliation of "member"
            </summary>
            <param name="room"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestMemberList(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            In the context of a members-only room, the member list is essentially a "whitelist" of people 
            who are allowed to enter the room. Anyone who is not a member is effectively banned from entering the room, 
            even if their affiliation is not "outcast".
            In the context of an open room, the member list is simply a list of users (bare JID and reserved nick) 
            who are registered with the room. Such users may appear in a room roster, have their room nickname reserved, 
            be returned in search results or FAQ queries, and the like.
            It is RECOMMENDED that only room admins have the privilege to modify the member list in members-only rooms. 
            To do so, the admin first requests the member list by querying the room for all users with an affiliation of "member"
            </summary>
            <param name="room"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantModeratorPrivileges(agsXMPP.Jid,System.String)">
            <summary>
            An admin may want to grant moderator privileges to a participant or visitor
            this is done by changing the user's role to "moderator"
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantModeratorPrivileges(agsXMPP.Jid,System.String,System.String)">
            <summary>
            An admin may want to grant moderator privileges to a participant or visitor
            this is done by changing the user's role to "moderator"
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
            <param name="reason"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantModeratorPrivileges(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB)">
            <summary>
            An admin may want to grant moderator privileges to a participant or visitor
            this is done by changing the user's role to "moderator"
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
            <param name="reason"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantModeratorPrivileges(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            An admin may want to grant moderator privileges to a participant or visitor
            this is done by changing the user's role to "moderator"
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
            <param name="reason"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestModeratorList(agsXMPP.Jid)">
            <summary>
            Requests the moderator list.
            </summary>
            <param name="room">The room.</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestModeratorList(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            Requests the moderator list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestModeratorList(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            Requests the moderator list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">The cb.</param>
            <param name="cbArg">The cb arg.</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.CreateReservedRoom(agsXMPP.Jid)">
            <summary>
            Creates a reserved room. The MUC server replies to this request either with an error if the room already exists 
            or another error occured. Or with the configuration for, for the reserved room which you have submit in the
            second step
            </summary>
            <param name="room">Jid of the room to create</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.CreateReservedRoom(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            <para>
            Creates a reserved room. The MUC server replies to this request either with an error if the room already exists 
            or another error occured. Or with the configuration for, for the reserved room which you have submit in the
            second step.
            </para>        
            </summary>
            <param name="room">Jid of the room to create</param>
            <param name="cb">callback for the response</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.CreateReservedRoom(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            <para>
            Creates a reserved room. The MUC server replies to this request either with an error if the room already exists 
            or another error occured. Or with the configuration for, for the reserved room which you have submit in the
            second step.
            </para>        
            </summary>
            <param name="room">Jid of the room to create</param>
            <param name="cb">callback for the response</param>
            <param name="cbArg">optional callback arguments</param>
        </member>
        <member name="T:agsXMPP.protocol.iq.browse.BrowseIq">
            <summary>
            Summary description for BrowseIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bytestreams.ByteStream">
            <summary>
            ByteStreams
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bytestreams.ByteStream.AddStreamHost">
            <summary>
            Add a StreamHost
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bytestreams.ByteStream.AddStreamHost(agsXMPP.protocol.extensions.bytestreams.StreamHost)">
            <summary>
            Add a StreamHost
            </summary>
            <param name="sh"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bytestreams.ByteStream.AddStreamHost(agsXMPP.Jid,System.String)">
            <summary>
            Add a StreamHost
            </summary>
            <param name="jid"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bytestreams.ByteStream.AddStreamHost(agsXMPP.Jid,System.String,System.Int32)">
            <summary>
            Add a StreamHost
            </summary>
            <param name="jid"></param>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bytestreams.ByteStream.AddStreamHost(agsXMPP.Jid,System.String,System.Int32,System.String)">
            <summary>
            Add a StreamHost
            </summary>
            <param name="jid"></param>
            <param name="host"></param>
            <param name="port"></param>
            <param name="zeroconf"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bytestreams.ByteStream.GetStreamHosts">
            <summary>
            Get the list of streamhosts
            </summary>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.ByteStream.Activate">
            <summary>
            The activate Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bookmarks.Storage">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddConference(agsXMPP.protocol.extensions.bookmarks.Conference)">
            <summary>
            Add a conference bookmark to the storage object
            </summary>
            <param name="conf"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddConference(agsXMPP.Jid,System.String)">
            <summary>
            Add a conference bookmark to the storage object
            </summary>
            <param name="jid"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddConference(agsXMPP.Jid,System.String,System.String)">
            <summary>
            Add a conference bookmark to the storage object
            </summary>
            <param name="jid"></param>
            <param name="name"></param>
            <param name="nickname"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddConference(agsXMPP.Jid,System.String,System.String,System.String)">
            <summary>
            Add a conference bookmark to the storage object
            </summary>
            <param name="jid"></param>
            <param name="name"></param>
            <param name="nickname"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddConference(agsXMPP.Jid,System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="jid"></param>
            <param name="name"></param>
            <param name="nickname"></param>
            <param name="password"></param>
            <param name="autojoin"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddConferences(agsXMPP.protocol.extensions.bookmarks.Conference[])">
            <summary>
            add multiple conference bookmarks
            </summary>
            <param name="confs"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.GetConferences">
            <summary>
            get all conference booksmarks
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddUrl(agsXMPP.protocol.extensions.bookmarks.Url)">
            <summary>
            add a url bookmark
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddUrls(agsXMPP.protocol.extensions.bookmarks.Url[])">
            <summary>
            add multiple url bookmarks
            </summary>
            <param name="urls"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.GetUrls">
            <summary>
            Get all url bookmarks
            </summary>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.protocol.component.Presence">
            <summary>
            Summary description for Presence.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.Presence">
            <summary>
            Zusammenfassung für Presence.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.Status">
            <summary>
            The OPTIONAL statuc contains a natural-language description of availability status. 
            It is normally used in conjunction with the show element to provide a detailed description of an availability state 
            (e.g., "In a meeting").
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.Type">
            <summary>
            The type of a presence stanza is OPTIONAL. 
            A presence stanza that does not possess a type attribute is used to signal to the server that the sender is online and available 
            for communication. If included, the type attribute specifies a lack of availability, a request to manage a subscription 
            to another entity's presence, a request for another entity's current presence, or an error related to a previously-sent 
            presence stanza.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.Error">
            <summary>
            Error Child Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.Show">
            <summary>
            The OPTIONAL show element contains non-human-readable XML character data that specifies the particular availability
            status of an entity or specific resource.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.Priority">
            <summary>
            The priority level of the resource. The value MUST be an integer between -128 and +127. 
            If no priority is provided, a server SHOULD consider the priority to be zero.         
            </summary>
            <remarks>
            For information regarding the semantics of priority values in stanza routing 
            within instant messaging and presence applications, refer to Server Rules 
            for Handling XML StanzasServer Rules for Handling XML Stanzas.
            </remarks>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.MucUser">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.Nickname">
            <summary>
            Nickname Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.Presence.Error">
            <summary>
            Error Child Element
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.PendingBuffer.buf">
            <summary>Internal work buffer
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufsize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            write a byte to buffer
            </summary>
            <param name="b">
            value to write
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="s">
            value to write
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="len">number of bytes to write</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">
            the output array;
            </param>
            <param name="offset">
            the offset into output array;
            </param>
            <param name="length">		
            length the maximum number of bytes to store;
            </param>
            <exception name="ArgumentOutOfRangeException">
            IndexOutOfBoundsException if offset or length are invalid.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            converted buffer contents contents
            </returns>
        </member>
        <member name="P:agsXMPP.IO.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:agsXMPP.Factory.ElementType">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.Factory.ElementType.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="TagName"></param>
            <param name="Namespace"></param>
        </member>
        <member name="T:agsXMPP.XmppComponentConnection">
            <summary>
            <para>
            use this class to write components that connect to a Jabebr/XMPP server
            </para>
            <para>
            http://www.xmpp.org/extensions/xep-0114.html
            </para>
            </summary>
        </member>
        <member name="T:agsXMPP.XmppConnection">
            <summary>
            abstract base class XmppConnection.
            </summary>
        </member>
        <member name="M:agsXMPP.XmppConnection.SocketConnect">
            <summary>
            Starts connecting of the socket
            </summary>
        </member>
        <member name="M:agsXMPP.XmppConnection.Send(System.String)">
            <summary>
            Send a xml string over the XmppConnection
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:agsXMPP.XmppConnection.Send(agsXMPP.Xml.Dom.Element)">
            <summary>
            Send a xml element over the XmppConnection
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:agsXMPP.XmppConnection.Close">
            <summary>
            Send the end of stream
            </summary>
        </member>
        <member name="E:agsXMPP.XmppConnection.OnXmppConnectionStateChanged">
            <summary>
            This event just informs about the current state of the XmppConnection
            </summary>
        </member>
        <member name="E:agsXMPP.XmppConnection.OnReadXml">
            <summary>
            a XML packet or text is received. 
            This are no winsock events. The Events get generated from the XML parser
            </summary>
        </member>
        <member name="E:agsXMPP.XmppConnection.OnWriteXml">
            <summary>
            XML or Text is written to the Socket this includes also the keep alive packages (a single space)		
            </summary>
        </member>
        <member name="E:agsXMPP.XmppConnection.OnReadSocketData">
            <summary>
            Data received from the Socket
            </summary>
        </member>
        <member name="E:agsXMPP.XmppConnection.OnWriteSocketData">
            <summary>
            Data was sent to the socket for sending
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.Port">
            <summary>
            The Port of the remote server for the connection
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.Server">
            <summary>
            domain or ip-address of the remote server for the connection
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.ConnectServer">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.StreamId">
            <summary>
            the id of the current xmpp xml-stream
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.StreamVersion">
            <summary>
            Set to null for old Jabber Protocol without SASL andstream features
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.ClientSocket">
            <summary>
            Read Online Property ClientSocket
            returns the SOcket object used for this connection
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.StreamParser">
            <summary>
            the underlaying XMPP StreamParser. Normally you don't need it, but we make it accessible for
            low level access to the stream
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.KeepAliveInterval">
            <summary>
            <para>
            the keep alive interval in seconds.
            Default value is 120
            </para>
            <para>
            Keep alive packets prevent disconenct on NAT and broadband connections which often
            disconnect if they are idle.
            </para>
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.KeepAlive">
            <summary>
            Send Keep Alives (for NAT)
            </summary>
        </member>
        <member name="M:agsXMPP.XmppComponentConnection.#ctor">
            <summary>
            Creates a new Component Connection to a given server and port
            </summary>
        </member>
        <member name="M:agsXMPP.XmppComponentConnection.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Component Connection to a given server and port
            </summary>
            <param name="server">host/ip of the listening server</param>
            <param name="port">port the server listens for the connection</param>
        </member>
        <member name="M:agsXMPP.XmppComponentConnection.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates a new Component Connection to a given server, port and password (secret)
            </summary>
            <param name="server">host/ip of the listening server</param>
            <param name="port">port the server listens for the connection</param>
            <param name="password">password</param>
        </member>
        <member name="M:agsXMPP.XmppComponentConnection.Open(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="server"></param>
            <param name="port"></param>
        </member>
        <member name="P:agsXMPP.XmppComponentConnection.Authenticated">
            <summary>
            Are we Authenticated to the server? This is readonly and set by the library
            </summary>
        </member>
        <member name="P:agsXMPP.XmppComponentConnection.ComponentJid">
            <summary>
            The Domain of the component.
            <para>
            eg: <c>jabber.ag-software.de</c>
            </para>
            </summary>		
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnLogin">
            <summary>
            connection is authenticated now and ready for receiving Route, Log and Xdb Packets
            </summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnRoute">
            <summary>
            handler for incoming routet packtes from the server
            </summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnAuthError">
            <summary>
            Event that occurs on authentication errors
            e.g. wrong password, user doesnt exist etc...
            </summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnStreamError">
            <summary>
            Stream errors &lt;stream:error/&gt;
            </summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnSocketError">
            <summary>
            Event occurs on Socket Errors
            </summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnIq">
            <summary>
            
            </summary>        
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnMessage">
            <summary>
            We received a message. This could be a chat message, headline, normal message or a groupchat message. 
            There are also XMPP extension which are embedded in messages. 
            e.g. X-Data forms.
            </summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnPresence">
            <summary>
            We received a presence from a contact or chatroom.
            Also subscriptions is handles in this event.
            </summary>
        </member>
        <member name="T:agsXMPP.sasl.SaslHandler">
            <summary>
            Summary description for SaslHandler.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Item">
            <summary>
            Summary description for Item.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.Item.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation)">
            <summary>
            
            </summary>
            <param name="affiliation"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.Item.#ctor(agsXMPP.protocol.x.muc.Role)">
            <summary>
            
            </summary>
            <param name="role"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation,agsXMPP.protocol.x.muc.Role)">
            <summary>
            
            </summary>
            <param name="affiliation"></param>
            <param name="role"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation,agsXMPP.protocol.x.muc.Role,System.String)">
            <summary>
            
            </summary>
            <param name="affiliation"></param>
            <param name="role"></param>
            <param name="reason"></param>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Item.Role">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Item.Affiliation">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Item.Nickname">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Item.Reason">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation)">
            <summary>
            
            </summary>
            <param name="affiliation"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor(agsXMPP.protocol.x.muc.Role)">
            <summary>
            
            </summary>
            <param name="role"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation,agsXMPP.protocol.x.muc.Role)">
            <summary>
            
            </summary>
            <param name="affiliation"></param>
            <param name="role"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation,agsXMPP.protocol.x.muc.Role,agsXMPP.Jid)">
            <summary>
            
            </summary>
            <param name="affiliation"></param>
            <param name="role"></param>
            <param name="jid"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation,agsXMPP.protocol.x.muc.Role,System.String)">
            <summary>
            
            </summary>
            <param name="affiliation"></param>
            <param name="role"></param>
            <param name="reason"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation,agsXMPP.protocol.x.muc.Role,agsXMPP.Jid,System.String)">
            <summary>
            
            </summary>
            <param name="affiliation"></param>
            <param name="role"></param>
            <param name="jid"></param>
            <param name="reason"></param>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.owner.Destroy">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.owner.Destroy.AlternateVenue">
            <summary>
            Pptional attribute for a alternate venue
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Auth">
            <summary>
            Summary description for Auth.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.roster.Roster">
            <summary>
            Zusammenfassung für Roster.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.last.LastIq">
            <summary>
            Summary description for LastIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoInfo">
            <summary>
            Discovering Information About a Jabber Entity
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.disco.DiscoInfo.GetFeatures">
            <summary>
            Gets all Features
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.disco.DiscoInfo.HasFeature(System.String)">
            <summary>
            Check if a feature is supported
            </summary>
            <param name="var"></param>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoInfo.Node">
            <summary>
            Optional node Attrib
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoIdentity">
            <summary>
            Summary description for DiscoIdentity.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoIdentity.Type">
            <summary>
            type name for the entity
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoIdentity.Name">
            <summary>
            natural-language name for the entity
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoIdentity.Category">
            <summary>
            category name for the entity
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.avatar.AvatarIq">
            <summary>
            Summary description for AvatarIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.rpc.MethodCall">
            <summary>
            The methodCall element.     
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodCall.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodCall.#ctor(System.String,System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="methodName"></param>
            <param name="Params"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodCall.WriteCall(System.String,System.Collections.ArrayList)">
            <summary>
            Write the functions call with params to this Element
            </summary>
            <param name="name"></param>
            <param name="Params"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodCall.WriteValue(System.Object,agsXMPP.Xml.Dom.Element)">
            <summary>
            Writes a single value to a call
            </summary>
            <param name="param"></param>
            <param name="parent"></param>
        </member>
        <member name="P:agsXMPP.protocol.iq.rpc.MethodCall.MethodName">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.Stanza">
            <summary>
            enum for block or allow communications.
            This flags could be combined under the following conditions.
            </summary>
            <remarks>
            <list type="bullet">
                <item>All must stand alone, its not allowed to combine thsi flag</item>
                <item>Message, Iq, IncomingPresence and Outgoing Presence could be combined, 
                    <b>but</b> its not allowed to combine more than 3 of this flag.
                    If you need all of them you have to use the All flag</item>
            </list>
            </remarks>    
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Stanza.All">
            <summary>
            Block all stanzas
            !!! Don't combine this flag with others!!!
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Stanza.Message">
            <summary>
            Block messages
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Stanza.Iq">
            <summary>
            Block IQs
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Stanza.IncomingPresence">
            <summary>
            Block Incoming Presences
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Stanza.OutgoingPresence">
            <summary>
            Block Outgoing Presences
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.PubSub.Create">
            <summary>
            the Create Element of the Pubsub Element 
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.PubSub.Configure">
            <summary>
            The Configure Element of the PunSub Element
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Affiliates.AddAffiliate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Affiliates.AddAffiliate(agsXMPP.protocol.extensions.pubsub.owner.Affiliate)">
            <summary>
            
            </summary>
            <param name="affiliate"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Affiliates.AddAffiliates(agsXMPP.protocol.extensions.pubsub.owner.Affiliate[])">
            <summary>
            
            </summary>
            <param name="affiliates"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Affiliates.GetAffiliates">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.protocol.Stream">
            <summary>
            stream:stream Element
            This is the first Element we receive from the server.
            It encloses our whole xmpp session.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.Stream">
            <summary>
            Summary description for Stream.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.Base.Stream.StreamId">
            <summary>
            The StreamID of the current JabberSession.
            Returns null when none available.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.Base.Stream.Version">
            <summary>
            See XMPP-Core 4.4.1 "Version Support"
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.PrivacyManager">
            <summary>
            Helper class for managing server side privacy lists (blocking communication)
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.GetLists">
            <summary>
            Retrieving all Privacy Lists
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.GetLists(agsXMPP.IqCB,System.Object)">
            <summary>
            Retrieving all Privacy Lists
            </summary>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.GetList(System.String)">
            <summary>
            Requests a privacy list from the server by its name
            </summary>
            <param name="name">name of the privacy list to retrieve</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.GetList(System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            Requests a privacy list from the server by its name
            </summary>
            <param name="name">name of the privacy list to retrieve</param>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.RemoveList(System.String)">
            <summary>
            Remove a privacy list
            </summary>
            <param name="name">name of the privacy list to remove</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.RemoveList(System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            Remove a privacy list
            </summary>
            <param name="name">name of the privacy list to remove</param>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.DeclineActiveList">
            <summary>
            Decline the use of any active list
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.DeclineActiveList(agsXMPP.IqCB,System.Object)">
            <summary>
            Decline the use of any active list
            </summary>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.ChangeActiveList(System.String)">
            <summary>
            Change the active list
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.ChangeActiveList(System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            Change the active list
            </summary>
            <param name="name"></param>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.ChangeDefaultList(System.String)">
            <summary>
            Change the default list
            </summary>
            <param name="name">name of the new default list</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.ChangeDefaultList(System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            Change the default list
            </summary>
            <param name="name">name of the new default list</param>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.DeclineDefaultList">
            <summary>
            Decline the use of the default list
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.DeclineDefaultList(agsXMPP.IqCB,System.Object)">
            <summary>
            Decline the use of the default list
            </summary>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.UpdateList(System.String,agsXMPP.protocol.iq.privacy.Item[])">
            <summary>
            Update the list with the given name and rules.
            </summary>
            <remarks>
            Specify the desired changes to the list by including all elements/rules in the list 
            (not the "delta")
            </remarks>
            <param name="name">name of the list</param>
            <param name="rules">rules of this list</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.UpdateList(System.String,agsXMPP.protocol.iq.privacy.Item[],agsXMPP.IqCB,System.Object)">
            <summary>
            Update the list with the given name and rules.
            </summary>
            <remarks>
            Specify the desired changes to the list by including all elements/rules in the list 
            (not the "delta")
            </remarks>
            <param name="name">name of this list</param>
            <param name="rules">rules of this list</param>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.AddList(System.String,agsXMPP.protocol.iq.privacy.Item[])">
            <summary>
            Add a new list with the given name and rules
            </summary>
            <param name="name"></param>
            <param name="rules"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.AddList(System.String,agsXMPP.protocol.iq.privacy.Item[],agsXMPP.IqCB,System.Object)">
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.SendStanza(agsXMPP.protocol.iq.privacy.PrivacyIq,agsXMPP.IqCB,System.Object)">
            <summary>
            Sends a PrivacyIq over the active connection
            </summary>
            <param name="pIq"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.RequestBookmarks">
            <summary>
            Request the bookmarks from the storage on the server
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.RequestBookmarks(agsXMPP.IqCB)">
            <summary>
            Request the bookmarks from the storage on the server
            </summary>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.RequestBookmarks(agsXMPP.IqCB,System.Object)">
            <summary>
            Request the bookmarks from the storage on the server
            </summary>
            <param name="cb"></param>
            <param name="cbArgs"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Url[])">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="urls"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Url[],agsXMPP.IqCB)">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="urls"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Url[],agsXMPP.IqCB,System.Object)">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="urls"></param>
            <param name="cb"></param>
            <param name="cbArgs"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Conference[])">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="conferences"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Conference[],agsXMPP.IqCB)">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="conferences"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Conference[],agsXMPP.IqCB,System.Object)">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="conferences"></param>
            <param name="cb"></param>
            <param name="cbArgs"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Url[],agsXMPP.protocol.extensions.bookmarks.Conference[])">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="urls"></param>
            <param name="conferences"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Url[],agsXMPP.protocol.extensions.bookmarks.Conference[],agsXMPP.IqCB)">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="urls"></param>
            <param name="conferences"></param>
            <param name="cb"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Url[],agsXMPP.protocol.extensions.bookmarks.Conference[],agsXMPP.IqCB,System.Object)">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="urls"></param>
            <param name="conferences"></param>
            <param name="cb"></param>
            <param name="cbArgs"></param>
        </member>
        <member name="T:agsXMPP.Jid">
            <summary>
            Class for building and handling XMPP Id's (JID's)
            </summary>  
        </member>
        <member name="M:agsXMPP.Jid.#ctor(System.String)">
            <summary>
            Create a new JID object from a string. The input string must be a valid jabberId and already prepared with stringprep.
            Otherwise use one of the other constructors with escapes the node and prepares the gives balues with the stringprep
            profiles
            </summary>
            <param name="jid">XMPP ID, in string form examples: user@server/Resource, user@server</param>
        </member>
        <member name="M:agsXMPP.Jid.#ctor(System.String,System.String,System.String)">
            <summary>
            builds a new Jid object
            </summary>
            <param name="user">XMPP User part</param>
            <param name="server">XMPP Domain part</param>
            <param name="resource">XMPP Resource part</param>        
        </member>
        <member name="M:agsXMPP.Jid.Parse(System.String)">
            <summary>
            Parses a JabberId from a string. If we parse a jid we assume it's correct and already prepared via stringprep.
            </summary>
            <param name="fullJid">jis to parse as string</param>
            <returns>true if the jid could be parsed, false if an error occured</returns>
        </member>
        <member name="M:agsXMPP.Jid.Equals(System.Object)">
            <summary>
            This compares the full Jid by default
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Jid.EscapeNode(System.String)">
            <summary>
            <para>
            Escape a node according to XEP-0106
            </para>
            <para>
            <a href="http://www.xmpp.org/extensions/xep-0106.html">http://www.xmpp.org/extensions/xep-0106.html</a>
            </para>        
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Jid.UnescapeNode(System.String)">
            <summary>
            <para>
            unescape a node according to XEP-0106
            </para>
            <para>
            <a href="http://www.xmpp.org/extensions/xep-0106.html">http://www.xmpp.org/extensions/xep-0106.html</a>
            </para>        
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.Jid.User">
            <summary>
            the user part of the JabberId.
            </summary>
        </member>
        <member name="P:agsXMPP.Jid.Server">
            <summary>
            Only Server
            </summary>
        </member>
        <member name="P:agsXMPP.Jid.Resource">
            <summary>
            Only the Resource field.
            null for none
            </summary>        
        </member>
        <member name="P:agsXMPP.Jid.Bare">
            <summary>
            The Bare Jid only (user@server).
            </summary>		
        </member>
        <member name="T:agsXMPP.IO.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="abyte">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="len">length of pattern to copy</param>
            <param name="dist">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.CopyStored(agsXMPP.IO.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="len">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dict">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="len">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:agsXMPP.IO.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.iq.admin.Admin">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Admin.AddItem(agsXMPP.protocol.x.muc.iq.admin.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Admin.AddItems(agsXMPP.protocol.x.muc.iq.admin.Item[])">
            <summary>
            Adds the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Admin.GetItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.protocol.iq.time.TimeIq">
            <summary>
            Summary description for TimeIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.private.PrivateIq">
            <summary>
            Summary description for PrivateIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.last.Last">
            <summary>
            Zusammenfassung für Last.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.last.Last.Seconds">
            <summary>
            Seconds since the last activity.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.filetransfer.File">
            <summary>
            Summary description for File.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.File.Name">
            <summary>
            The file name. Its required
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.File.Size">
            <summary>
            Size of the file. This is required
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.File.Hash">
            <summary>
            a Hash checksum of the file
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.File.Date">
            <summary>
            file date
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.File.Description">
            <summary>
            is used to provide a sender-generated description of the file so the receiver can better understand what is being sent. 
            It MUST NOT be sent in the result.
            </summary>		 
        </member>
        <member name="T:agsXMPP.protocol.x.data.Reported">
            <summary>
            Used in XData seach reports.
            includes the headers of the search results
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.Subscription.Node">
            <summary>
            Node (optional)
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.Subscription.SubId">
            <summary>
            Subscription ID (optional)
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.chatstates.Paused">
            <summary>
            User had been composing but now has stopped.
            User was composing but has not interacted with the message input interface for a short period of time (e.g., 5 seconds).
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.chatstates.Paused.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.chatstates.Gone">
            <summary>
            User has effectively ended their participation in the chat session.
            User has not interacted with the chat interface, system, or device for a relatively long period of time 
            (e.g., 2 minutes), or has terminated the chat interface (e.g., by closing the chat window).
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.chatstates.Gone.#ctor">
            <summary>
                   
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.browse.Service">
            <summary>
            Historically each category was used as the name of an element, 
            and the type was an attribute, such as &lt;service type="aim"/&gt;. 
            The proper expression for all new implementations supporting this specification is to express the type information 
            as attributes on a generic item element: &lt;item category="service" type="aim"/&gt;. 
            When processing returned browse information this new syntax should always be handled first, 
            and the old syntax only used if it is important to be able to access older implementations.
            Additional unofficial categories or types may be specified by prefixing their name with 
            an "x-", such as "service/x-virgeim" or "x-location/gps". 
            Changes to the official categories and subtypes may be defined either by revising this JEP or by activating another JEP.
            Removal of a category or subtype must be noted in this document.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.browse.Service.GetNamespaces">
            <summary>
            Gets all advertised namespaces of this service
            </summary>
            <returns>string array that contains the advertised namespaces</returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.browse.Service.GetServices">
            <summary>
            Gets all "ChilsServices" od this service
            </summary>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.PacketGrabber">
            <summary>
            Summary description for Grabber.
            </summary>
        </member>
        <member name="M:agsXMPP.PacketGrabber.Remove(System.String)">
            <summary>
            Pending request can be removed.
            This is useful when a ressource for the callback is destroyed and
            we are not interested anymore at the result.
            </summary>
            <param name="id">ID of the Iq we are not interested anymore</param>
        </member>
        <member name="M:agsXMPP.IqGrabber.#ctor(agsXMPP.XmppClientConnection)">
            <summary>
            
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:agsXMPP.IqGrabber.OnIq(System.Object,agsXMPP.protocol.client.IQ)">
            <summary>
            An IQ Element is received. Now check if its one we are looking for and
            raise the event in this case.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:agsXMPP.IqGrabber.SendIq(agsXMPP.protocol.client.IQ,agsXMPP.IqCB)">
            <summary>
            Send an IQ Request and store the object with callback in the Hashtable
            </summary>
            <param name="iq">The iq to send</param>
            <param name="cb">the callback function which gets raised for the response</param>
        </member>
        <member name="M:agsXMPP.IqGrabber.SendIq(agsXMPP.protocol.client.IQ,agsXMPP.IqCB,System.Object)">
            <summary>
            Send an IQ Request and store the object with callback in the Hashtable
            </summary>
            <param name="iq">The iq to send</param>
            <param name="cb">the callback function which gets raised for the response</param>
            <param name="cbArg">additional object for arguments</param>
        </member>
        <member name="M:agsXMPP.IqGrabber.SendIq(agsXMPP.protocol.client.IQ,System.Int32)">
            <summary>
            Sends an Iq synchronous and return the response or null on timeout
            </summary>
            <param name="iq">The IQ to send</param>
            <param name="timeout"></param>
            <returns>The response IQ or null on timeout</returns>
        </member>
        <member name="M:agsXMPP.IqGrabber.SendIq(agsXMPP.protocol.client.IQ)">
            <summary>
            Sends an Iq synchronous and return the response or null on timeout.
            Timeout time used is <see cref="P:agsXMPP.IqGrabber.SynchronousTimeout"/>
            </summary>
            <param name="iq">The IQ to send</param>        
            <returns>The response IQ or null on timeout</returns>
        </member>
        <member name="M:agsXMPP.IqGrabber.SynchronousIqResult(System.Object,agsXMPP.protocol.client.IQ,System.Object)">
            <summary>
            Callback for synchronous iq grabbing
            </summary>
            <param name="sender"></param>
            <param name="iq"></param>
            <param name="data"></param>
        </member>
        <member name="P:agsXMPP.IqGrabber.SynchronousTimeout">
            <summary>
            Timeout for synchronous requests, default value is 5000 (5 seconds)
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.StreamParser">
            <summary>
            Stream Parser is a lighweight Streaming XML Parser.
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.StreamParser.Reset">
            <summary>
            Reset the XML Stream
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.StreamParser.Push(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put bytes into the parser.
            </summary>
            <param name="buf">The bytes to put into the parse stream</param>
            <param name="offset">Offset into buf to start at</param>
            <param name="length">Number of bytes to write</param>
        </member>
        <member name="M:agsXMPP.Xml.StreamParser.DoRaiseOnStreamElement(agsXMPP.Xml.Dom.Element)">
            <summary>
            If users didnt use the library correctly and had no local error handles
            it always crashed here and disconencted the socket.
            Catch this errors here now and foreward them.
            </summary>
            <param name="el"></param>
        </member>
        <member name="E:agsXMPP.Xml.StreamParser.OnStreamError">
            <summary>
            Event for XML-Stream errors
            </summary>
        </member>
        <member name="E:agsXMPP.Xml.StreamParser.OnError">
            <summary>
            Event for general errors
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.StreamParser.Depth">
            <summary>
            Reset the XML Stream
            </summary>
            <param name="sr">new Stream that is used for parsing</param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.ElementList.#ctor">
            <summary>
            A Collection of Element Nodes
            </summary>		
        </member>
        <member name="T:agsXMPP.util.Enum">
            <summary>
            Provides helper functions for Enumerations.
            </summary>
            <remarks>Extends the <see cref="T:System.Enum">System.Enum Class</see>.</remarks>
            <seealso cref="T:System.Enum">System.Enum Class</seealso>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Abort">
            <summary>
            Summary description for Abort.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.jivesoftware.phone.PhoneEvent">
            <summary>
            Events are sent to the user when their phone is ringing, when a call ends, etc. 
            This packet is send within a message packet (subelement of message)
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.pubsub.AffiliationType">
            <summary>
            
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.pubsub.AffiliationType.none">
            <summary>
            the absence of an affiliation
            </summary>
        </member>
        <member name="T:agsXMPP.net.PollClientSocket">
            <summary>
            JEP-0025 Jabber HTTP Polling Socket
            </summary>
        </member>
        <member name="T:agsXMPP.net.BaseSocket">
            <summary>
            Base Socket class
            </summary>
        </member>
        <member name="M:agsXMPP.net.BaseSocket.Reset">
            <summary>
            Added for Bosh because we have to tell the BoshClientSocket when to reset the stream
            </summary>
        </member>
        <member name="M:agsXMPP.net.BaseSocket.Send(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:agsXMPP.net.BaseSocket.Send(System.Byte[])">
            <summary>
            Send data to the server.
            </summary>
        </member>
        <member name="F:agsXMPP.net.PollClientSocket.m_Lock">
            <summary>
            Object for synchronizing threads
            </summary>
        </member>
        <member name="M:agsXMPP.net.PollClientSocket.GenerateRandomKey">
            <summary>
            Simple algotithm for generating a random key
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.net.PollClientSocket.GenerateKeys">
            <summary>
            Generates a bunch of keys
            </summary>
        </member>
        <member name="P:agsXMPP.net.PollClientSocket.Connected">
            <summary>
            because the client socket is no presintant socket we return always true
            </summary>
        </member>
        <member name="P:agsXMPP.net.PollClientSocket.Interval">
            <summary>
            Poll interval in milliseconds.	
            The maximum interval recommended for clients between requests is two minutes (120000);
            Default is 10 seconds (10000)
            </summary>
        </member>
        <member name="P:agsXMPP.net.PollClientSocket.CountKeys">
            <summary>
            count of keys to generate each time. Keys are generated with the Sha1 algoritm.
            You can reduce the num,ber of keys to gemerate each time if your device is to slow on generating the keys
            or you want to save memory.
            256 is the default value, 32 on CF
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of deflate and setInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.#ctor(agsXMPP.IO.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>		
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="lit"></param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="dist">Distance code</param>
            <param name="len">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="T:agsXMPP.IO.Compression.DeflaterHuffman.Tree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterHuffman.Tree.freqs">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterHuffman.Tree.length">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterHuffman.Tree.minNumCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterHuffman.Tree.numCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.#ctor(agsXMPP.IO.Compression.DeflaterHuffman,System.Int32,System.Int32,System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.WriteSymbol(System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that at least one frequency is non-zero
            </summary>
            <exception cref="T:agsXMPP.IO.Compression.SharpZipBaseException">
            No frequencies are non-zero
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="stCodes">new codes</param>
            <param name="stLength">length for new codes</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.BuildTree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.CalcBLFreq(agsXMPP.IO.Compression.DeflaterHuffman.Tree)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.WriteTree(agsXMPP.IO.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:agsXMPP.Collections.FullJidComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.Collections.FullJidComparer.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.util.Hash">
            <summary>
            Summary description for Hash.
            </summary>
            
        </member>
        <member name="M:agsXMPP.util.Hash.HexToString(System.Byte[])">
            <summary>
            Converts all bytes in the Array to a string representation.
            </summary>
            <param name="buf"></param>
            <returns>string representation</returns>
        </member>
        <member name="T:agsXMPP.protocol.tls.Proceed">
            <summary>
            Summary description for Proceed.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.stream.feature.Register">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.bind.Bind">
            <summary>
            Summary description for Bind.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.bind.Bind.Resource">
            <summary>
            The resource to bind
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.bind.Bind.Jid">
            <summary>
            The jid the server created
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.version.Version">
            <summary>
            Zusammenfassung für Version.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.roster.Delimiter">
            <summary>
            Extension JEP-0083, delimiter for nested roster groups
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.register.Register">
            <summary>
            Used for registering new usernames on Jabber/XMPP Servers
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.register.Register.RemoveAccount">
            <summary>
            Remove registration from the server
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.register.Register.Data">
            <summary>
            The X-Data Element
            </summary>
        </member>
        <member name="T:agsXMPP.net.dns.ResourceRecord">
            <summary>
            Represents a Resource Record as detailed in RFC1035 4.1.3
            </summary>	
        </member>
        <member name="M:agsXMPP.net.dns.ResourceRecord.#ctor(agsXMPP.net.dns.Pointer)">
            <summary>
            Construct a resource record from a pointer to a byte array
            </summary>
            <param name="pointer">the position in the byte array of the record</param>
        </member>
        <member name="T:agsXMPP.net.dns.IPConfigurationInformation">
            <summary>
            Summary description for IPConfigurationInformation.
            </summary>
        </member>
        <member name="T:agsXMPP.net.ClientSocket">
            <summary>
            Use async sockets to connect, send and receive data over TCP sockets.
            </summary>
        </member>
        <member name="F:agsXMPP.net.ClientSocket.m_Compressed">
            <summary>
            is compression used for this connection
            </summary>
        </member>
        <member name="F:agsXMPP.net.ClientSocket.deflater">
            <summary>
            is used to compress data
            </summary>
        </member>
        <member name="F:agsXMPP.net.ClientSocket.inflater">
            <summary>
            is used to decompress data
            </summary>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.Connect(System.String,System.Int32)">
            <summary>
            Connect to the specified address and port number.
            </summary>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.connectTimeoutTimerDelegate(System.Object)">
            <summary>
            Connect Timeout Timer Callback
            </summary>
            <param name="stateInfo"></param>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.StartTls">
            <summary>
            Starts TLS on a "normal" connection
            </summary>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.InitSSL">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.InitSSL(System.Security.Authentication.SslProtocols)">
            <summary>
            
            </summary>
            <param name="protocol"></param>		
        </member>
        <member name="M:agsXMPP.net.ClientSocket.ValidateCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Validate the SSL certificate here
            for now we dont stop the SSL connection an return always true
            </summary>
            <param name="certificate"></param>
            <param name="certificateErrors"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.StartCompression">
            <summary>
            Start Compression on the socket
            </summary>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.InitCompression">
            <summary>
            Initialize compression stuff (Inflater, Deflater)
            </summary>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.Disconnect">
            <summary>
            Disconnect from the server.
            </summary>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.Send(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.Send(System.Byte[])">
            <summary>
            Send data to the server.
            </summary>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.Receive">
            <summary>
            Read data from server.
            </summary>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.Compress(System.Byte[])">
            <summary>
            Compress bytes
            </summary>
            <param name="bIn"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.net.ClientSocket.Decompress(System.Byte[],System.Int32)">
            <summary>
            Decompress bytes
            </summary>
            <param name="bIn"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.net.ClientSocket.Connected">
            <summary>
            Returns true if the socket is connected to the server. The property 
            Socket.Connected does not always indicate if the socket is currently 
            connected, this polls the socket to determine the latest connection state.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.agent.Agents">
            <summary>
            Zusammenfassung für Agent.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bosh.Body.Wait">
            <summary>
            Specifies the longest time (in seconds) that the connection manager is allowed to wait before responding to any request 
            during the session. This enables the client to limit the delay before it discovers any network failure, 
            and to prevent its HTTP/TCP connection from expiring due to inactivity.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bosh.Body.MaxPause">
            <summary>
            If the connection manager supports session pausing (inactivity) then it SHOULD advertise that to the client by including a 'maxpause'
            attribute in the session creation response element. The value of the attribute indicates the maximum length of a temporary 
            session pause (in seconds) that a client MAY request.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bosh.Body.To">
            <summary>
            Specifies the target domain of the first stream.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bosh.Body.Hold">
            <summary>
            specifies the maximum number of requests the connection manager is allowed to keep waiting at any one time during the session. 
            If the client is not able to use HTTP Pipelining then this SHOULD be set to "1".
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:agsXMPP.protocol.extensions.bosh.Body.Version" -->
        <member name="F:agsXMPP.IdType.Numeric">
            <summary>
            Numeric Id's are generated by increasing a long value
            </summary>
        </member>
        <member name="F:agsXMPP.IdType.Guid">
            <summary>
            Guid Id's are unique, Guid packet Id's should be used for server and component applications,
            or apps which very long sessions (multiple days, weeks or years)
            </summary>
        </member>
        <member name="T:agsXMPP.Id">
            <summary>
            This class takes care anout out unique Message Ids
            </summary>
        </member>
        <member name="M:agsXMPP.Id.Reset">
            <summary>
            Reset the id counter to agsXmpp_1 again
            </summary>
        </member>
        <member name="P:agsXMPP.Id.Prefix">
            <summary>
            to Save Bandwidth on Mobile devices you can change the prefix
            null is also possible to optimize Bandwidth usage
            </summary>
        </member>
        <member name="M:agsXMPP.Idn.Punycode.Encode(System.String)">
            <summary>
            Punycodes a unicode string.
            </summary>
            <param name="input">Unicode string.</param>
            <returns> Punycoded string.</returns>
        </member>
        <member name="M:agsXMPP.Idn.Punycode.Decode(System.String)">
            <summary>
            Decode a punycoded string.
            </summary>
            <param name="input">Punycode string</param>
            <returns> Unicode string.</returns>
        </member>
        <member name="F:agsXMPP.Idn.NFKC.SBase">
            <summary>
            Entire hangul code copied from:
            http://www.unicode.org/unicode/reports/tr15/
            Several hangul specific constants
            </summary>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.NormalizeNFKC(System.String)">
            <summary>
            Applies NFKC normalization to a string.
            </summary>
            <param name="in">The string to normalize.</param>
            <returns> An NFKC normalized string.</returns>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.decomposeIndex(System.Char)">
            <summary>
            Returns the index inside the decomposition table, implemented
            using a binary search.
            </summary>
            <param name="c">Character to look up.</param>
            <returns> Index if found, -1 otherwise.</returns>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.combiningClass(System.Char)">
            <summary>
            Returns the combining class of a given character.
            </summary>
            <param name="c">The character.</param>
            <returns> The combining class.</returns>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.canonicalOrdering(System.Text.StringBuilder)">
            <summary>
            Rearranges characters in a stringbuffer in order to respect the
            canonical ordering properties.
            </summary>
            <param name="The">StringBuffer to rearrange.</param>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.composeIndex(System.Char)">
            <summary>
            Returns the index inside the composition table.		
            </summary>
            <param name="a">Character to look up.</param>
            <returns> Index if found, -1 otherwise.</returns>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.compose(System.Char,System.Char)">
            <summary>
            Tries to compose two characters canonically.
            </summary>
            <param name="a">First character.</param>
            <param name="b">Second character.</param>
            <returns> The composed character or -1 if no composition could be found.</returns>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.decomposeHangul(System.Char)">
            <summary>
            Decomposes a hangul character.
            </summary>
            <param name="s">A character to decompose.</param>
            <returns> A string containing the hangul decomposition of the input
            character. If no hangul decomposition can be found, a string
            containing the character itself is returned.</returns>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.composeHangul(System.Char,System.Char)">
            <summary>
            Composes two hangul characters.
            </summary>
            <param name="a">First character.</param>
            <param name="b">Second character.</param>
            <returns> Returns the composed character or -1 if the two characters cannot be composed.</returns>
        </member>
        <member name="T:agsXMPP.Xml.xpnet.ContentToken">
            <summary>
            Represents information returned by <code>Encoding.tokenizeContent</code>.
            @see Encoding#tokenizeContent
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.ContentToken.getAttributeSpecifiedCount">
            <summary>
            Returns the number of attributes specified in the start-tag or empty element tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.ContentToken.getAttributeNameStart(System.Int32)">
            <summary>
            Returns the index of the first character of the name of the
            attribute index <code>i</code>.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.ContentToken.getAttributeNameEnd(System.Int32)">
            Returns the index following the last character of the name of the
            attribute index <code>i</code>.
        </member>
        <member name="M:agsXMPP.Xml.xpnet.ContentToken.getAttributeValueStart(System.Int32)">
            Returns the index of the character following the opening quote of
            attribute index <code>i</code>.
        </member>
        <member name="M:agsXMPP.Xml.xpnet.ContentToken.getAttributeValueEnd(System.Int32)">
            Returns the index of the closing quote attribute index <code>i</code>.
        </member>
        <member name="M:agsXMPP.Xml.xpnet.ContentToken.isAttributeNormalized(System.Int32)">
            Returns true if attribute index <code>i</code> does not need to
            be normalized.  This is an optimization that allows further processing
            of the attribute to be avoided when it is known that normalization
            cannot change the value of the attribute.
        </member>
        <member name="M:agsXMPP.Xml.xpnet.ContentToken.clearAttributes">
            <summary>
            Clear out all of the current attributes
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.ContentToken.appendAttribute(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add a new attribute
            </summary>
            <param name="nameStart"></param>
            <param name="nameEnd"></param>
            <param name="valueStart"></param>
            <param name="valueEnd"></param>
            <param name="normalized"></param>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.ContentToken.checkAttributeUniqueness(System.Byte[])">
            <summary>
            Is the current attribute unique?
            </summary>
            <param name="buf"></param>
        </member>
        <member name="T:agsXMPP.Xml.Dom.Comment">
            <summary>
            Summary description for Comment.
            </summary>
        </member>
        <member name="T:agsXMPP.sasl.DigestMD5.Step2">
            <summary>
            Summary description for Step2.
            </summary>
        </member>
        <member name="T:agsXMPP.sasl.DigestMD5.Step1">
            <summary>
            Summary description for Step1.
            </summary>
        </member>
        <member name="T:agsXMPP.sasl.DigestMD5.DigestMD5Mechanism">
            <summary>
            Handels the SASL Digest MD5 authentication
            </summary>
        </member>
        <member name="T:agsXMPP.sasl.DigestMD5.Step1.ChallengeParseException">
            <summary>
            Exception occurs when we were unable to parse the challenge
            </summary>
        </member>
        <member name="M:agsXMPP.sasl.DigestMD5.Step2.#ctor(agsXMPP.sasl.DigestMD5.Step1,System.String,System.String,System.String)">
            <summary>
            builds a step2 message reply to the given step1 message
            </summary>
            <param name="step1"></param>
        </member>
        <member name="M:agsXMPP.sasl.DigestMD5.Step2.SupportsAuth(System.String)">
            <summary>
            Does the server support Auth?
            </summary>
            <param name="qop"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.sasl.DigestMD5.Step2.#ctor(System.String)">
            <summary>
            parses a message and returns the step2 object
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:agsXMPP.sasl.DigestMD5.Step2.AddQuotes(System.String)">
            <summary>
            return the given string with quotes
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.sasl.SaslEventArgs.Auto">
            <summary>
            Set Auto to true if the library should choose the mechanism
            Set it to false for choosing the authentication method yourself
            </summary>
        </member>
        <member name="P:agsXMPP.sasl.SaslEventArgs.Mechanism">
            <summary>
            SASL Mechanism for authentication as string
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.RuleManager">
            <summary>
            Helper class for creating rules for communication blocking
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.BlockByJid(agsXMPP.Jid,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Block stanzas by Jid
            </summary>
            <param name="JidToBlock"></param>
            <param name="Order"></param>
            <param name="stanza">stanzas you want to block</param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.BlockByGroup(System.String,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Block stanzas for a given roster group
            </summary>
            <param name="group"></param>
            <param name="Order"></param>
            <param name="stanza">stanzas you want to block</param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.BlockBySubscription(agsXMPP.protocol.iq.roster.SubscriptionType,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Block stanzas by subscription type
            </summary>
            <param name="subType"></param>
            <param name="Order"></param>
            <param name="stanza">stanzas you want to block</param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.BlockGlobal(System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Block globally (all users) the given stanzas
            </summary>
            <param name="Order"></param>
            <param name="stanza">stanzas you want to block</param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.AllowByJid(agsXMPP.Jid,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Allow stanzas by Jid
            </summary>
            <param name="JidToBlock"></param>
            <param name="Order"></param>
            <param name="stanza">stanzas you want to block</param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.AllowByGroup(System.String,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Allow stanzas for a given roster group
            </summary>
            <param name="group"></param>
            <param name="Order"></param>
            <param name="stanza">stanzas you want to block</param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.AllowBySubscription(agsXMPP.protocol.iq.roster.SubscriptionType,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Allow stanzas by subscription type
            </summary>
            <param name="subType"></param>
            <param name="Order"></param>
            <param name="stanza">stanzas you want to block</param>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.protocol.x.rosterx.RosterItem">
            <summary>
            Summary description for RosterItem.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.RosterItem">
            <summary>
            Item is used in jabber:iq:roster, x roster
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.Base.RosterItem.GetGroups">
            <summary>
            Groups a roster Item is assigned to
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.Base.RosterItem.AddGroup(System.String)">
            <summary>
            Add a new group to the Rosteritem
            </summary>
            <param name="groupname"></param>
        </member>
        <member name="T:agsXMPP.protocol.x.data.Field">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.GetValue">
            <summary>
            The value of the field.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.SetValue(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.SetValueBool(System.Boolean)">
            <summary>
            Set the value of boolean fields
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.GetValueBool">
            <summary>
            Get the value of boolean fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.GetValueJid">
            <summary>
            Returns the value as Jif for the Jid fields. 
            Or null when the value is not a valid Jid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.AddValue(System.String)">
            <summary>
            Adds a value
            </summary>
            <remarks>
            you can call this function multiple times to add values to "multi" fields
            </remarks> 
            <param name="val"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.AddValues(System.String[])">
            <summary>
            Adds multiple values to the already existing values from a string array
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.SetValues(System.String[])">
            <summary>
            Adds multiple values. All already existing values will be removed
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.GetValues">
            <summary>
            Gets all values for multi fields as Array
            </summary>
            <returns>string Array that contains all the values</returns>
        </member>
        <member name="P:agsXMPP.protocol.x.data.Field.IsRequired">
            <summary>
            Is this field a required field?
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.version.VersionIq">
            <summary>
            Summary description for VersionIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.VcardIq">
            <summary>
            Summary description for VcardIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Photo">
            <summary>
            Vcard Photo
            When you dont want System.Drawing in the Lib just remove the photo stuff
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.vcard.Photo.SetImage(System.String)">
            <summary>
            Sets the URL of an external image
            </summary>
            <param name="url"></param>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Photo.Type">
            <summary>
            The Media Type, Only available when BINVAL
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Photo.ImageFormat">
            <summary>
            returns the image format or null for unknown formats or TYPES
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Photo.Image">
            <summary>
            gets or sets the from internal (binary) or external source
            When external then it trys to get the image with a Webrequest
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.Active">
            <summary>
            The active list
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.List.GetItems">
            <summary>
            Gets all Rules (Items) when available
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.List.AddItem(agsXMPP.protocol.iq.privacy.Item)">
            <summary>
            Adds a rule (item) to the list
            </summary>
            <param name="itm"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.List.RemoveAllItems">
            <summary>
            Remove all items/rules of this list
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.commands.Note.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.commands.Note.#ctor(agsXMPP.protocol.extensions.commands.NoteType)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.commands.Note.#ctor(System.String,agsXMPP.protocol.extensions.commands.NoteType)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="type"></param>
        </member>
        <member name="P:agsXMPP.protocol.extensions.commands.Actions.Execute">
            <summary>
            Optional Execute Action, only complete, next and previous is allowed
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.commands.Actions.Complete">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.commands.Actions.Action">
            <summary>
            Actions, only complete, prev and next are allowed here and can be combined
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.chatstates.Inactive">
            <summary>
            User has not been actively participating in the chat session.
            User has not interacted with the chat interface for an intermediate period of time (e.g., 30 seconds).
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.chatstates.Inactive.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.component.Log">
            <summary>
            Zusammenfassung für Log.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.component.Log.#ctor(System.String)">
            <summary>
            creates a new Log Packet with the given message
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:agsXMPP.protocol.component.Log.Type">
            <summary>
            Gets or Sets the logtype
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.Log.LogNamespace">
            <summary>
            The namespace for logging
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.MessageType">
            <summary>
            Enumeration that represents the type of a message
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.MessageType.normal">
            <summary>
            This in a normal message, much like an email. You dont expect a fast
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.MessageType.error">
            <summary>
            a error messages
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.MessageType.chat">
            <summary>
            is for chat like messages, person to person. Send this if you expect a fast reply. reply or no reply at all.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.MessageType.groupchat">
            <summary>
            is used for sending/receiving messages from/to a chatroom (IRC style chats) 
            </summary>
            
        </member>
        <member name="F:agsXMPP.protocol.client.MessageType.headline">
            <summary>
            Think of this as a news broadcast, or RRS Feed, the message will normally have a URL and Description Associated with it.
            </summary>
        </member>
        <member name="T:agsXMPP.net.dns.Response">
            <summary>
            A Response is a logical representation of the byte data returned from a DNS query
            </summary>
        </member>
        <member name="M:agsXMPP.net.dns.Response.#ctor(System.Byte[])">
            <summary>
            Construct a Response object from the supplied byte array
            </summary>
            <param name="message">a byte array returned from a DNS server query</param>
        </member>
        <member name="M:agsXMPP.net.dns.Response.GetShort(System.Byte[],System.Int32)">
            <summary>
            Convert 2 bytes to a short. It would have been nice to use BitConverter for this,
            it however reads the bytes in the wrong order (at least on Windows)
            </summary>
            <param name="message">byte array to look in</param>
            <param name="position">position to look at</param>
            <returns>short representation of the two bytes</returns>
        </member>
        <member name="T:agsXMPP.net.dns.NoResponseException">
            <summary>
            Thrown when the server does not respond
            </summary>	
        </member>
        <member name="T:agsXMPP.protocol.extensions.bytestreams.Mode">
            <summary>
            The Mode for the bytestream socket layer (tcp or udp)
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bookmarks.Conference">
            <summary>
            One of the most common uses of bookmarks will likely be to bookmark 
            conference rooms on various Jabber servers
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Conference.Name">
            <summary>
            A name/description for this bookmarked room
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Conference.AutoJoin">
            <summary>
            Should the client join this room automatically after successfuil login?
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Conference.Jid">
            <summary>
            The Jid of the bookmarked room
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Conference.Nickname">
            <summary>
            The Nickname for this room
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Conference.Password">
            <summary>
            The password for password protected rooms
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.amp.Rule.Val">
            <summary>
            The 'value' attribute defines how the condition is matched. 
            This attribute MUST be present, and MUST NOT be an empty string (""). 
            The interpretation of this attribute's value is determined by the 'condition' attribute.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.amp.Rule.Action">
            <summary>
            The 'action' attribute defines the result for this rule. 
            This attribute MUST be present, and MUST be either a value defined in the Defined Actions section, 
            or one registered with the XMPP Registrar.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.amp.Rule.Condition">
            <summary>
            The 'condition' attribute defines the overall condition this rule applies to. 
            This attribute MUST be present, and MUST be either a value defined in the Defined Conditions section, 
            or one registered with the XMPP Registrar.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.amp.Amp.GetRules">
            <summary>
            Gets a list of all form fields
            </summary>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.protocol.extensions.amp.Amp.Status">
            <summary>
            The 'status' attribute specifies the reason for the amp element.
            When specifying semantics to be applied (client to server), this attribute MUST NOT be present. 
            When replying to a sending entity regarding a met condition, this attribute MUST be present and 
            SHOULD be the value of the 'action' attribute for the triggered rule. 
            (Note: Individual action definitions MAY provide their own requirements.)
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.amp.Amp.PerHop">
            <summary>
            The 'per-hop' attribute flags the contained ruleset for processing at each server in the route 
            between the original sender and original intended recipient. 
            This attribute MAY be present, and MUST be either "true" or "false". 
            If not present, the default is "false".
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.ShowType">
            <summary>
            Enumeration that represents the online state.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ShowType.NONE">
            <summary>
            
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ShowType.away">
            <summary>
            The entity or resource is temporarily away.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ShowType.chat">
            <summary>
            The entity or resource is actively interested in chatting.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ShowType.dnd">
            <summary>
            The entity or resource is busy (dnd = "Do Not Disturb").
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ShowType.xa">
            <summary>
            The entity or resource is away for an extended period (xa = "eXtended Away").
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class with a specified error message.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message string</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:agsXMPP.Xml.xpnet.Position">
            Represents a position in an entity.
            A position can be modified by <code>Encoding.movePosition</code>.
            @see Encoding#movePosition
            @version $Revision: 1.2 $ $Date: 1998/02/17 04:24:15 $
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Position.#ctor">
            Creates a position for the start of an entity: the line number is
            1 and the column number is 0.
        </member>
        <member name="M:agsXMPP.Xml.xpnet.Position.Clone">
            Returns a copy of this position.
        </member>
        <member name="P:agsXMPP.Xml.xpnet.Position.LineNumber">
            Returns the line number.
            The first line number is 1.
        </member>
        <member name="P:agsXMPP.Xml.xpnet.Position.ColumnNumber">
            Returns the column number.
            The first column number is 0.
            A tab character is not treated specially.
        </member>
        <member name="T:agsXMPP.util.Time">
            <summary>
            Class handles the XMPP time format
            </summary>
        </member>
        <member name="M:agsXMPP.util.Time.Date(System.String)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.util.Time.Date(System.DateTime)">
            <summary>
            Get a XMPP string representation of a Date        
            </summary>
            <param name="date">DateTime</param>
            <returns>XMPP string representation of a DateTime value</returns>
        </member>
        <member name="M:agsXMPP.util.Time.ISO_8601Date(System.String)">
            <summary>
            The new standard used by XMPP in JEP-82 (ISO-8601)
            <example>1970-01-01T00:00Z</example>
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.util.Time.ISO_8601Date(System.DateTime)">
            <summary>
            The new standard used by XMPP in JEP-82 (ISO-8601)
            converts a local DateTime to a ISO-8601 formatted date in UTC format.
            <example>1970-01-01T00:00Z</example>
            </summary>
            <param name="date">local Datetime</param>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.iq.admin.AdminIq">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.Avatar">
            <summary>
            JEP-0008 avatars
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.featureneg.FeatureNeg">
            <summary>
            JEP-0020: Feature Negotiation
            This JEP defines a A protocol that enables two Jabber entities to mutually negotiate feature options.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.featureneg.FeatureNeg.Data">
            <summary>
            data form of type "form" which defines the available options for one or more features.
            Each feature is represented as an x-data "field", which MUST be of type "list-single".
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.Action">
            <summary>
            privacy lis action
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Action.allow">
            <summary>
            
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Action.deny">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.chatstates.Chatstate">
            <summary>
            Enumeration of supported Chatstates (JEP-0085)
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.chatstates.Chatstate.None">
            <summary>
            No Chatstate at all
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.chatstates.Chatstate.active">
            <summary>
            Active Chatstate
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.chatstates.Chatstate.inactive">
            <summary>
            Inactive Chatstate
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.chatstates.Chatstate.composing">
            <summary>
            Composing Chatstate
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.chatstates.Chatstate.gone">
            <summary>
            Gone Chatstate
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.chatstates.Chatstate.paused">
            <summary>
            Paused Chatstate
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.chatstates.Active">
            <summary>
            User is actively participating in the chat session.
            User accepts an initial content message, sends a content message, 
            gives focus to the chat interface, or is otherwise paying attention to the conversation.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.chatstates.Active.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.component.Handshake">
            <summary>
            Handshake Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.Handshake.Digest">
            <summary>
            Digest (Hash) for authentication
            </summary>
        </member>
        <member name="T:agsXMPP.net.PollSocketException">
            <summary>
            Summary description for PollingSocketException.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.browse.BrowseItem">
            <summary>
            Summary description for BrowseItem.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.browse.BrowseItem.GetNamespaces">
            <summary>
            Gets all advertised namespaces of this item
            </summary>
            <returns>string array that contains the advertised namespaces</returns>
        </member>
        <member name="T:agsXMPP.protocol.iq.browse.Browse">
            <summary>
            Summary description for Browse.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.agent.Agent">
            <summary>
            Zusammenfassung für Agent.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.agent.Agent.CanRegister">
            <summary>
            Can we register this agent/transport
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.agent.Agent.CanSearch">
            <summary>
            Can we search thru this agent/transport
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.agent.Agent.IsTransport">
            <summary>
            Is this agent a transport?
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.agent.Agent.IsGroupchat">
            <summary>
            Is this agent for groupchat
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bookmarks.StorageIq">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.component.Error">
            <summary>
            Summary description for Error.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.Error">
            <summary>
            Summary description for Error.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.client.Error.#ctor(agsXMPP.protocol.client.ErrorCondition)">
            <summary>
            Creates an error Element according the the condition
            The type attrib as added automatically as decribed in the XMPP specs
            This is the prefered way to create error Elements
            </summary>
            <param name="condition"></param>
        </member>
        <member name="P:agsXMPP.protocol.client.Error.Message">
            <summary>
            The error Description
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Error.ErrorText">
            <summary>
            The optional error text
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.component.Error.#ctor(agsXMPP.protocol.client.ErrorCondition)">
            <summary>
            Creates an error Element according the the condition
            The type attrib as added automatically as decribed in the XMPP specs
            This is the prefered way to create error Elements
            </summary>
            <param name="condition"></param>
        </member>
        <member name="T:agsXMPP.IO.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next n bits but don't increase input pointer.  n must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to PeekBits followed by dropBits, except for correct error handling.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies length bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.Reset">
            <summary>
            resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buf">data to be input</param>
            <param name="off">offset of first byte of input</param>
            <param name="len">length of input</param>
        </member>
        <member name="P:agsXMPP.IO.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:agsXMPP.IO.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:agsXMPP.IO.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="M:agsXMPP.exceptions.JidException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.exceptions.JidException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:agsXMPP.Xml.xpnet.TokenException">
            <summary>
            Base class for other exceptions
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.xpnet.EmptyTokenException">
            <summary>
            An empty token was detected.  This only happens with a buffer of length 0 is passed in
            to the parser.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.xpnet.EndOfPrologException">
            <summary>
            End of prolog.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.xpnet.ExtensibleTokenException">
            Thrown to indicate that the byte subarray being tokenized is a legal XML
            token, but that subsequent bytes in the same entity could be part of
            the token.  For example, <code>Encoding.tokenizeProlog</code>
            would throw this if the byte subarray consists of a legal XML name.
            @version $Revision: 1.3 $ $Date: 1998/02/17 04:24:06 $
        </member>
        <member name="M:agsXMPP.Xml.xpnet.ExtensibleTokenException.#ctor(agsXMPP.Xml.xpnet.TOK)">
            <summary>
            
            </summary>
            <param name="tokType"></param>
        </member>
        <member name="P:agsXMPP.Xml.xpnet.ExtensibleTokenException.TokenType">
            Returns the type of token in the byte subarrary.
        </member>
        <member name="T:agsXMPP.Xml.xpnet.InvalidTokenException">
            <summary>
            Several kinds of token problems.
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.InvalidTokenException.ILLEGAL_CHAR">
            <summary>
            An illegal character
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.InvalidTokenException.XML_TARGET">
            <summary>
            Doc prefix wasn't XML
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.InvalidTokenException.DUPLICATE_ATTRIBUTE">
            <summary>
            More than one attribute with the same name on the same element
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.InvalidTokenException.#ctor(System.Int32,System.Byte)">
            <summary>
            Some other type of bad token detected
            </summary>
            <param name="offset"></param>
            <param name="type"></param>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.InvalidTokenException.#ctor(System.Int32)">
            <summary>
            Illegal character detected
            </summary>
            <param name="offset"></param>
        </member>
        <member name="P:agsXMPP.Xml.xpnet.InvalidTokenException.Offset">
            <summary>
            Offset into the buffer where the problem ocurred.
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.xpnet.InvalidTokenException.Type">
            <summary>
            Type of exception
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.xpnet.PartialCharException">
            Thrown to indicate that the subarray being tokenized is not the
            complete encoding of one or more characters, but might be if
            more bytes were added.
            @version $Revision: 1.2 $ $Date: 1998/02/17 04:24:11 $
        </member>
        <member name="T:agsXMPP.Xml.xpnet.PartialTokenException">
            <summary>
            A partial token was received.  Try again, after you add more bytes to the buffer.
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.xpnet.PartialCharException.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="leadByteIndex"></param>
        </member>
        <member name="P:agsXMPP.Xml.xpnet.PartialCharException.LeadByteIndex">
            Returns the index of the first byte that is not part of the complete
            encoding of a character.
        </member>
        <member name="T:agsXMPP.sasl.Plain.PlainMechanism">
            <summary>
            Summary description for PlainMechanism.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.rosterx.RosterX">
            <summary>
            Roster Item Exchange (JEP-0144)
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.rosterx.RosterX.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.x.rosterx.RosterX"/> class.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.rosterx.RosterX.GetRoster">
            <summary>
            Gets the roster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.x.rosterx.RosterX.AddRosterItem(agsXMPP.protocol.x.rosterx.RosterItem)">
            <summary>
            Adds a roster item.
            </summary>
            <param name="r">The r.</param>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.History">
            <summary>
            This is used to get the history of a muc room
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.History.#ctor">
            <summary>
            Empty default constructor
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.History.#ctor(System.DateTime)">
            <summary>
            get the history starting from a given date when available
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.History.#ctor(System.Int32)">
            <summary>
            Specify the maximum nunber of messages to retrieve from the history
            </summary>
            <param name="max"></param>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.History.Seconds">
            <summary>
            request the last xxx seconds of history when available
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.History.MaxStanzas">
            <summary>
            Request maximum stanzas of history when available
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.History.Since">
            <summary>
            Request history from a given date when available
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.History.MaxCharacters">
            <summary>
            Limit the total number of characters in the history to "X" 
            (where the character count is the characters of the complete XML stanzas, 
            not only their XML character data).
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.XDataFormType">
            <summary>
            Form Types
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.XDataFormType.form">
            <summary>
            The forms-processing entity is asking the forms-submitting entity to complete a form.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.XDataFormType.submit">
            <summary>
            The forms-submitting entity is submitting data to the forms-processing entity.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.XDataFormType.cancel">
            <summary>
            The forms-submitting entity has cancelled submission of data to the forms-processing entity.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.XDataFormType.result">
            <summary>
            The forms-processing entity is returning data (e.g., search results) to the forms-submitting entity, or the data is a generic data set.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.Data">
            <summary>
            Summary for Data.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Data.AddItem">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Data.AddItem(agsXMPP.protocol.x.data.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Data.GetItems">
            <summary>
            Gets a list of all form fields
            </summary>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.protocol.x.data.Data.Type">
            <summary>
            Type of thie XDATA Form.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.session.Session">
            <summary>
            Summary description for Session.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Success">
            <summary>
            Summary description for Success.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Address">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.search.SearchItem">
             <summary>
            
             </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.search.SearchItem.Nickname">
            <summary>
            Nickname, null when not available
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.register.RegisterIq">
            <summary>
            Used for registering new usernames on Jabber/XMPP Servers
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.auth.Auth">
             <summary>
            
             </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.auth.Auth.SetAuthDigest(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="StreamID"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.auth.Auth.SetAuthPlain(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.auth.Auth.SetAuth(System.String,System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.rpc.MethodResponse">
            <summary>
            The method Response element. 
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodResponse.GetResponse">
            <summary>
            Parses the XML-RPC resonse and returns an ArrayList with all Parameters.
            In there is an XML-RPC Error it returns an XmlRpcException as single parameter in the ArrayList.
            </summary>
            <returns>Arraylist with parameters, or Arraylist with an exception</returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodResponse.ParseResponse">
            <summary>
            parse the response
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodResponse.ParseValue(agsXMPP.Xml.Dom.Element)">
            <summary>
            Parse a single response value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodResponse.ParseArray(agsXMPP.Xml.Dom.Element)">
            <summary>
            parse a response array
            </summary>
            <param name="elArray"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodResponse.ParseStruct(agsXMPP.Xml.Dom.Element)">
            <summary>
            parse a response struct
            </summary>
            <param name="el"></param>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.Item">
            <summary>
            This class represents a rule which is used for blocking communication
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Item.#ctor">
            <summary>
            Default Contructor
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Item.#ctor(agsXMPP.protocol.iq.privacy.Action,System.Int32)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="order"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Item.#ctor(agsXMPP.protocol.iq.privacy.Action,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="order"></param>
            <param name="block"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Item.#ctor(agsXMPP.protocol.iq.privacy.Action,System.Int32,agsXMPP.protocol.iq.privacy.Type,System.String)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="order"></param>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Item.#ctor(agsXMPP.protocol.iq.privacy.Action,System.Int32,agsXMPP.protocol.iq.privacy.Type,System.String,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="order"></param>
            <param name="type"></param>
            <param name="value"></param>
            <param name="block"></param>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.Order">
            <summary>
            The order of this rule
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.Val">
            <summary>
            The value to match of this rule
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.BlockIq">
            <summary>
            Block Iq stanzas
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.BlockMessage">
            <summary>
            Block messages
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.BlockIncomingPresence">
            <summary>
            Block incoming presence
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.BlockOutgoingPresence">
            <summary>
            Block outgoing presence
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.Stanza">
            <summary>
            which stanzas should be blocked?
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Subscribers.AddSubscriber">
            <summary>
            Add a Subscriber
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Subscribers.AddSubscriber(agsXMPP.protocol.extensions.pubsub.owner.Subscriber)">
            <summary>
            Add a Subscriber
            </summary>
            <param name="subscriber">the Subscriber to add</param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Subscribers.GetSubscribers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.protocol.extensions.si.SIIq">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bytestreams.ByteStreamIq">
            <summary>
            a Bytestream IQ
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bookmarks.Url">
            <summary>
            URLs are fairly simple, as they only need to store a URL and a title, 
            and the client then can simply launch the appropriate browser.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Url.Name">
            <summary>
            A description/name for this bookmark
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Url.Address">
            <summary>
            The url address to store e.g. http://www.ag-software,de/
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="!:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="!:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="T:agsXMPP.IO.Compression.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "bval">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:agsXMPP.IO.Compression.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with the byte b.
            </summary>
            <param name="bval">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buf">
            an array of bytes
            </param>
            <param name="off">
            the start of the data used for this update
            </param>
            <param name="len">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:agsXMPP.IO.Compression.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:agsXMPP.Idn.IDNA.ToASCII(System.String)">
            <summary>
            Converts a Unicode string to ASCII using the procedure in RFC3490
            section 4.1. Unassigned characters are not allowed and STD3 ASCII
            rules are enforced. The input string may be a domain name
            containing dots.
            </summary>
            <param name="input">Unicode string.</param>
            <returns> Encoded string.</returns>
        </member>
        <member name="M:agsXMPP.Idn.IDNA.ToASCII(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts a Unicode string to ASCII using the procedure in RFC3490
            section 4.1. Unassigned characters are not allowed and STD3 ASCII
            rules are enforced.
            </summary>
            <param name="input">Unicode string.</param>
            <param name="allowUnassigned">Unassigned characters, allowed or not?</param>
            <param name="useSTD3ASCIIRules">STD3 ASCII rules, enforced or not?</param>
            <returns> Encoded string.</returns>
        </member>
        <member name="M:agsXMPP.Idn.IDNA.ToUnicode(System.String)">
            <summary>
            Converts an ASCII-encoded string to Unicode. Unassigned
            characters are not allowed and STD3 hostnames are enforced. Input
            may be domain name containing dots.
            </summary>
            <param name="input">ASCII input string.</param>
            <returns> Unicode string.</returns>
        </member>
        <member name="M:agsXMPP.Idn.IDNA.ToUnicode(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts an ASCII-encoded string to Unicode.		
            </summary>
            <param name="input">ASCII input string.</param>
            <param name="allowUnassigned">Allow unassigned Unicode characters.</param>
            <param name="useSTD3ASCIIRules">Check that the output conforms to STD3.</param>
            <returns>Unicode string.</returns>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.Unknown">
            <summary>
            <para>This Enum Member is used if we have a unknown status code. In this case you have to parse
            the code on your own.</para>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.FullJidVisible">
            <summary>
            <para>Inform user that any occupant is allowed to see the user's full JID.</para>
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>message</description></item>
            <item><term>context</term><description>Entering a room</description></item>
            <item><term>code</term><description>100</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.AffiliationChanged">
            <summary>
            <para>Inform user that his or her affiliation changed while not in the room.</para>
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>message (out of band)</description></item>
            <item><term>context</term><description>Affiliation change</description></item>
            <item><term>code</term><description>101</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.ShowUnavailableMembers">
            <summary>
            <para>Inform occupants that room now shows unavailable members.</para>
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>message</description></item>
            <item><term>context</term><description>Configuration change</description></item>
            <item><term>code</term><description>102</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.HideUnavailableMembers">
            <summary>
            <para>Inform occupants that room now does not show unavailable members</para>
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>message</description></item>
            <item><term>context</term><description>Configuration change</description></item>
            <item><term>code</term><description>103</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.ConfigurationChanged">
            <summary>
            <para>Inform occupants that some room configuration has changed.</para>
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>message</description></item>
            <item><term>context</term><description>Configuration change</description></item>
            <item><term>code</term><description>104</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.RoomUiProhibitCutCopyPasteOperations">
            <summary>
            <para>Inform occupant that room UI should not allow cut-copy-and-paste operations.</para>        
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>message</description></item>
            <item><term>context</term><description>Entering a room; configuration change</description></item>
            <item><term>code</term><description>171</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.RoomUiAllowCutCopyPasteOperations">
            <summary>
            <para>Inform occupant that room UI should allow cut-copy-and-paste operations.</para>        
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>message</description></item>
            <item><term>context</term><description>Entering a room; configuration change</description></item>
            <item><term>code</term><description>172</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.RoomCreated">
            <summary>
            <para>Inform user that a new room has been created</para>        
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>presence</description></item>
            <item><term>context</term><description>Entering a room</description></item>
            <item><term>code</term><description>201</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.Banned">
            <summary>
            <para>Inform user that he or she has been banned from the room</para>        
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>presence</description></item>
            <item><term>context</term><description>Removal from room</description></item>
            <item><term>code</term><description>301</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.NewNickname">
            <summary>
            <para>Inform all occupants of new room nickname</para>        
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>presence</description></item>
            <item><term>context</term><description>Exiting a room</description></item>
            <item><term>code</term><description>303</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.Kicked">
            <summary>
            <para>Inform user that he or she has been kicked from the room</para>
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>presence</description></item>
            <item><term>context</term><description>Removal from room</description></item>
            <item><term>code</term><description>307</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.AffiliationChange">
            <summary>
            <para>Inform user that he or she is being removed from the room because of an affiliation change</para>
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>presence</description></item>
            <item><term>context</term><description>Removal from room</description></item>
            <item><term>code</term><description>321</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.MembersOnly">
            <summary>
            <para>Inform user that he or she is being removed from the room because the room has been changed
            to members-only and the user is not a member</para>
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>presence</description></item>
            <item><term>context</term><description>Removal from room</description></item>
            <item><term>code</term><description>322</description></item>
            </list>
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.Shutdown">
            <summary>
            <para>Inform user that he or she is being removed from the room because of a system shutdown</para>
            <list type="table">
            <listheader><term>Info</term><description>Description</description></listheader>
            <item><term>stanza</term><description>presence</description></item>
            <item><term>context</term><description>Removal from room</description></item>
            <item><term>code</term><description>332</description></item>
            </list>
            </summary>        
        </member>
        <member name="T:agsXMPP.protocol.x.Delay">
            <summary>
            <para>
            Delay class for Timestamps
            </para>
            <para>
            Mainly used in offline and groupchat messages. This is the time when the message was received by the server
            </para>
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.time.Time">
            <summary>
            XEP-0090: Entity Time
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.time.Time.Tz">
            <summary>
            Timezone
            </summary>		
        </member>
        <member name="P:agsXMPP.protocol.iq.time.Time.Display">
            <summary>
            Human-readable date/time.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.shim.Header">
            <summary>
            JEP-0131: Stanza Headers and Internet Metadata (SHIM)
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.Default">
            <summary>
            The default list
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.Subscriptions.AddSubscription">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.Subscriptions.AddSubscription(agsXMPP.protocol.extensions.pubsub.Subscription)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.owner.Configure.Data">
            <summary>
            The x-Data Element
            </summary>
        </member>
        <member name="M:agsXMPP.PresenceGrabber.#ctor(agsXMPP.XmppClientConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.PresenceGrabber"/> class.
            </summary>
            <param name="conn">The conn.</param>
        </member>
        <member name="M:agsXMPP.PresenceGrabber.Add(agsXMPP.Jid,System.Collections.IComparer,agsXMPP.PresenceCB,System.Object)">
            <summary>
            Adds the specified jid.
            </summary>
            <param name="jid">The jid.</param>
            <param name="comparer">The comparer.</param>
            <param name="cb">The callback.</param>
            <param name="cbArg">The callback Arguments.</param>
        </member>
        <member name="M:agsXMPP.PresenceGrabber.Remove(agsXMPP.Jid)">
            <summary>
            Pending request can be removed.
            This is useful when a ressource for the callback is destroyed and
            we are not interested anymore at the result.
            </summary>
            <param name="id">ID of the Iq we are not interested anymore</param>
        </member>
        <member name="M:agsXMPP.PresenceGrabber.m_connection_OnPresence(System.Object,agsXMPP.protocol.client.Presence)">
            <summary>
            A presence is received. Now check if its from a Jid we are looking for and
            raise the event in this case.
            </summary>
            <param name="sender"></param>
            <param name="pres"></param>
        </member>
        <member name="T:agsXMPP.net.dns.Pointer">
            <summary>
            Logical representation of a pointer, but in fact a byte array reference and a position in it. This
            is used to read logical units (bytes, shorts, integers, domain names etc.) from a byte array, keeping
            the pointer updated and pointing to the next record. This type of Pointer can be considered the logical
            equivalent of an (unsigned char*) in C++
            </summary>
        </member>
        <member name="M:agsXMPP.net.dns.Pointer.Copy">
            <summary>
            Shallow copy function
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.net.dns.Pointer.SetPosition(System.Int32)">
            <summary>
            Adjust the pointers position within the message
            </summary>
            <param name="position">new position in the message</param>
        </member>
        <member name="M:agsXMPP.net.dns.Pointer.op_Addition(agsXMPP.net.dns.Pointer,System.Int32)">
            <summary>
            Overloads the + operator to allow advancing the pointer by so many bytes
            </summary>
            <param name="pointer">the initial pointer</param>
            <param name="offset">the offset to add to the pointer in bytes</param>
            <returns>a reference to a new pointer moved forward by offset bytes</returns>
        </member>
        <member name="M:agsXMPP.net.dns.Pointer.Peek">
            <summary>
            Reads a single byte at the current pointer, does not advance pointer
            </summary>
            <returns>the byte at the pointer</returns>
        </member>
        <member name="M:agsXMPP.net.dns.Pointer.ReadByte">
            <summary>
            Reads a single byte at the current pointer, advancing pointer
            </summary>
            <returns>the byte at the pointer</returns>
        </member>
        <member name="M:agsXMPP.net.dns.Pointer.ReadShort">
            <summary>
            Reads two bytes to form a short at the current pointer, advancing pointer
            </summary>
            <returns>the byte at the pointer</returns>
        </member>
        <member name="M:agsXMPP.net.dns.Pointer.ReadInt">
            <summary>
            Reads four bytes to form a int at the current pointer, advancing pointer
            </summary>
            <returns>the byte at the pointer</returns>
        </member>
        <member name="M:agsXMPP.net.dns.Pointer.ReadChar">
            <summary>
            Reads a single byte as a char at the current pointer, advancing pointer
            </summary>
            <returns>the byte at the pointer</returns>
        </member>
        <member name="M:agsXMPP.net.dns.Pointer.ReadDomain">
            <summary>
            Reads a domain name from the byte array. The method by which this works is described
            in RFC1035 - 4.1.4. Essentially to minimise the size of the message, if part of a domain
            name already been seen in the message, rather than repeating it, a pointer to the existing
            definition is used. Each word in a domain name is a label, and is preceded by its length
            
            eg. bigdevelopments.co.uk
            
            is [15] (size of bigdevelopments) + "bigdevelopments"
               [2]  "co"
               [2]  "uk"
               [1]  0 (NULL)
            </summary>
            <returns>the byte at the pointer</returns>
        </member>
        <member name="P:agsXMPP.protocol.iq.register.RegisterEventArgs.Auto">
            <summary>
            Set Auto to true if the library should register automatically
            Set it to false if you want to fill out the registration fields manual
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.ping.PingIq">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.msgreceipts.Request">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.component.Message">
            <summary>
            Summary description for Message.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.Message.Error">
            <summary>
            Error Child Element
            </summary>
        </member>
        <member name="M:agsXMPP.MessageGrabber.#ctor(agsXMPP.XmppClientConnection)">
            <summary>
            
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:agsXMPP.MessageGrabber.Remove(agsXMPP.Jid)">
            <summary>
            Pending request can be removed.
            This is useful when a ressource for the callback is destroyed and
            we are not interested anymore at the result.
            </summary>
            <param name="id">ID of the Iq we are not interested anymore</param>
        </member>
        <member name="M:agsXMPP.MessageGrabber.m_connection_OnMessage(System.Object,agsXMPP.protocol.client.Message)">
            <summary>
            A Message is received. Now check if its from a Jid we are looking for and
            raise the event in this case.
            </summary>
            <param name="sender"></param>
            <param name="msg"></param>
        </member>
        <member name="T:agsXMPP.protocol.x.data.Option">
            <summary>
            Field Option.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Option.GetValue">
            <summary>
            Value of the Option
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.data.Option.Label">
            <summary>
            Label of the option
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.Conference">
            <summary>
            is used for inviting somebody to a chatroom
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.Conference.Chatroom">
            <summary>
            Room Jid
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.tls.StartTls">
            <summary>
            Summary description for starttls.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.auth.AuthIq">
            <summary>
            Summary description for AuthIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.si.SI">
            <summary>
            JEP-0095: Stream Initiation.
            This JEP defines a protocol for initiating a stream (with meta information) between any two Jabber entities.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.si.SI.Id">
            <summary>
            The "id" attribute is an opaque identifier. 
            This attribute MUST be present on type='set', and MUST be a valid string. 
            This SHOULD NOT be sent back on type='result', since the &lt;iq/&gt; "id" attribute provides the only context needed.
            This value is generated by the Sender, and the same value MUST be used throughout a session when talking to the Receiver.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.si.SI.MimeType">
            <summary>
            The "mime-type" attribute identifies the MIME-type for the data across the stream.
            This attribute MUST be a valid MIME-type as registered with the Internet Assigned Numbers Authority (IANA) [3] 
            (specifically, as listed at "http://www.iana.org/assignments/media-types"). 
            During negotiation, this attribute SHOULD be present, and is otherwise not required. 
            If not included during negotiation, its value is assumed to be "binary/octect-stream".
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.si.SI.Profile">
            <summary>
            The "profile" attribute defines the SI profile in use. This value MUST be present during negotiation,
            and is the namespace of the profile to use.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.si.SI.FeatureNeg">
            <summary>
            the FeatureNeg Element 
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.si.SI.File">
            <summary>
            the File Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.filetransfer.Range">
            <summary>
            When range is sent in the offer, it should have no attributes. 
            This signifies that the sender can do ranged transfers.
            When no range element is sent in the Stream Initiation result, the Sender MUST send the complete file starting at offset 0.
            More generally, data is sent over the stream byte for byte starting at the offset position for the length specified.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.Range.Offset">
            <summary>
            Specifies the position, in bytes, to start transferring the file data from.
            This defaults to zero (0) if not specified.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.Range.Length">
            <summary>
            Specifies the number of bytes to retrieve starting at offset.
            This defaults to the length of the file from offset to the end.
            </summary>
        </member>
        <member name="T:agsXMPP.net.dns.InvalidResponseException">
            <summary>
            Thrown when the server delivers a response we are not expecting to hear
            </summary>	
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.Activate.Jid">
            <summary>
            the full JID of the Target to activate
            </summary>
        </member>
        <member name="P:agsXMPP.net.WebRequestState.Started">
            <summary>
            when was this request started (timestamp)?
            </summary>
        </member>
        <member name="M:agsXMPP.net.BoshClientSocket.GenerateKeys">
            <summary>
            Generates a bunch of keys
            </summary>
        </member>
        <member name="M:agsXMPP.net.BoshClientSocket.ParseResponse(System.String,System.String@,System.String@)">
            <summary>
            This is ugly code, but currently all BOSH server implementaions are not namespace correct,
            which means we can't use the XML parser here and have to spit it with string functions.
            </summary>
            <param name="res"></param>
            <param name="body"></param>
            <param name="stanzas"></param>
        </member>
        <member name="P:agsXMPP.net.BoshClientSocket.Wait">
            <summary>
            The longest time (in seconds) that the connection manager is allowed to wait before responding to any request during the session.
            This enables the client to prevent its TCP connection from expiring due to inactivity, as well as to limit the delay before 
            it discovers any network failure.
            </summary>
        </member>
        <member name="P:agsXMPP.net.BoshClientSocket.Hold">
            <summary>
            This attribute specifies the maximum number of requests the connection manager is allowed to keep waiting 
            at any one time during the session. If the client is not able to use HTTP Pipelining then this SHOULD be set to "1".
            </summary>
        </member>
        <member name="P:agsXMPP.net.BoshClientSocket.KeepAlive">
            <summary>
            Keep Alive for HTTP Webrequests, its disables by default because not many BOSH implementations support Keep Alives
            </summary>
        </member>
        <member name="P:agsXMPP.net.BoshClientSocket.MaxPause">
            <summary>
            If the connection manager supports session pausing (see Inactivity) then it SHOULD advertise that to the client 
            by including a 'maxpause' attribute in the session creation response element. 
            The value of the attribute indicates the maximum length of a temporary session pause (in seconds) that a client MAY request.
            0 is the default value and indicated that the connection manager supports no session pausing.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.UnknownCondition">
            <summary>
            unknown error condition
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.BadFormat">
            <summary>
            the entity has sent XML that cannot be processed; this error MAY be used instead of the more specific XML-related errors, such as &lt;bad-namespace-prefix/&gt;, &lt;invalid-xml/&gt;, &lt;restricted-xml/&gt;, &lt;unsupported-encoding/&gt;, and &lt;xml-not-well-formed/&gt;, although the more specific errors are preferred.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.BadNamespacePrefix">
            <summary>
            the entity has sent a namespace prefix that is unsupported, or has sent no namespace prefix on an element that requires such a prefix (see XML Namespace Names and Prefixes (XML Namespace Names and Prefixes)).
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.Conflict">
            <summary>
            the server is closing the active stream for this entity because a new stream has been initiated that conflicts with the existing stream.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.ConnectionTimeout">
            <summary>
            the entity has not generated any traffic over the stream for some period of time (configurable according to a local service policy).
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.HostGone">
            <summary>
            the value of the 'to' attribute provided by the initiating entity in the stream header corresponds to a hostname that is no longer hosted by the server.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.HostUnknown">
            <summary>
            the value of the 'to' attribute provided by the initiating entity in the stream header does not correspond to a hostname that is hosted by the server.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.ImproperAddressing">
            <summary>
            a stanza sent between two servers lacks a 'to' or 'from' attribute (or the attribute has no value).
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.InternalServerError">
            <summary>
            the server has experienced a misconfiguration or an otherwise-undefined internal error that prevents it from servicing the stream.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.InvalidFrom">
            <summary>
            the JID or hostname provided in a 'from' address does not match an authorized JID or validated domain negotiated between servers via SASL or dialback, or between a client and a server via authentication and resource binding.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.InvalidId">
            <summary>
            the stream ID or dialback ID is invalid or does not match an ID previously provided.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.InvalidNamespace">
            <summary>
            the streams namespace name is something other than "http://etherx.jabber.org/streams" or the dialback namespace name is something other than "jabber:server:dialback" (see XML Namespace Names and Prefixes (XML Namespace Names and Prefixes)).
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.InvalidXml">
            <summary>
            the entity has sent invalid XML over the stream to a server that performs validation.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.NotAuthorized">
            <summary>
            the entity has attempted to send data before the stream has been authenticated, or otherwise is not authorized to perform an action related to stream negotiation; the receiving entity MUST NOT process the offending stanza before sending the stream error.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.PolicyViolation">
            <summary>
            the entity has violated some local service policy; the server MAY choose to specify the policy in the &lt;text/&gt; element or an application-specific condition element.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.RemoteConnectionFailed">
            <summary>
            the server is unable to properly connect to a remote entity that is required for authentication or authorization.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.ResourceConstraint">
            <summary>
            the server lacks the system resources necessary to service the stream.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.RestrictedXml">
            <summary>
            the entity has attempted to send restricted XML features such as a comment, processing instruction, DTD, entity reference, or unescaped character (see Restrictions (Restrictions)).
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.SeeOtherHost">
            <summary>
            the server will not provide service to the initiating entity but is redirecting traffic to another host; the server SHOULD specify the alternate hostname or IP address (which MUST be a valid domain identifier) as the XML character data of the &lt;see-other-host/&gt; element.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.SystemShutdown">
            <summary>
            the server is being shut down and all active streams are being closed.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.UndefinedCondition">
            <summary>
            the error condition is not one of those defined by the other conditions in this list; this error condition SHOULD be used only in conjunction with an application-specific condition.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.UnsupportedEncoding">
            <summary>
            the initiating entity has encoded the stream in an encoding that is not supported by the server.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.UnsupportedStanzaType">
            <summary>
            the initiating entity has sent a first-level child of the stream that is not supported by the server.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.UnsupportedVersion">
            <summary>
            the value of the 'version' attribute provided by the initiating entity in the stream header specifies a version of XMPP that is not supported by the server; the server MAY specify the version(s) it supports in the &lt;text/&gt; element.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.XmlNotWellFormed">
            <summary>
            the initiating entity has sent XML that is not well-formed as defined by the XML specs.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Error">
            <summary>
            Stream Errors &lt;stream:error&gt;
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.Error.Text">
            <summary>
            <para>
            The &lt;text/&gt; element is OPTIONAL. If included, it SHOULD be used only to provide descriptive or diagnostic information
            that supplements the meaning of a defined condition or application-specific condition. 
            </para>
            <para>
            It SHOULD NOT be interpreted programmatically by an application.
            It SHOULD NOT be used as the error message presented to a user, but MAY be shown in addition to the error message 
            associated with the included condition element (or elements).
            </para>
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Vcard">
            <summary>
            Summary description for Vcard.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.vcard.Vcard.GetAddresses">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.vcard.Vcard.GetAddress(agsXMPP.protocol.iq.vcard.AddressLocation)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.vcard.Vcard.AddEmailAddress(agsXMPP.protocol.iq.vcard.Email)">
            <summary>
            Adds a new Email Adress object
            </summary>
            <param name="mail"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.vcard.Vcard.GetEmailAddresses">
            <summary>
            Get all Email addresses
            </summary>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Url">
             <summary>
            
             </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Birthday">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Role">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Photo">
            <summary>
            a Photograph
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Organization">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Organization">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.search.Search">
            <summary>
            http://www.jabber.org/jeps/jep-0055.html
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.search.Search.GetItems">
            <summary>
            Retrieve the result items of a search
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.search.Search.Data">
            <summary>
            The X-Data Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.avatar.Avatar">
            <summary>
            Summary description for Avatar.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.jivesoftware.phone.ActionType">
            <summary>
            Action type, Currently supported types are DIAL and FORWARD
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.jivesoftware.phone.ActionType.DIAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.jivesoftware.phone.ActionType.FORWARD">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.ErrorCondition">
            <summary>
            stanza error condition as defined in RFC 3920 9.3
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.BadRequest">
            <summary>
            The sender has sent a stanza containing XML that does not conform to the appropriate schema or that 
            cannot be processed (e.g., an IQ stanza that includes an unrecognized value of the 'type' attribute);
            the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.Conflict">
            <summary>
            Access cannot be granted because an existing resource exists with the same name or address; 
            the associated error type SHOULD be "cancel". 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.FeatureNotImplemented">
            <summary>
            The feature represented in the XML stanza is not implemented by the intended recipient or 
            an intermediate server and therefore the stanza cannot be processed; the associated error type SHOULD 
            be "cancel" or "modify".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.Forbidden">
            <summary>
            The requesting entity does not possess the required permissions to perform the action; 
            the associated error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.Gone">
            <summary>
            The recipient or server can no longer be contacted at this address 
            (the error stanza MAY contain a new address in the XML character data of the &lt;gone/&gt; element); 
            the associated error type SHOULD be "cancel" or "modify".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.InternalServerError">
            <summary>
            The server could not process the stanza because of a misconfiguration or an otherwise-undefined 
            internal server error; the associated error type SHOULD be "wait" or "cancel".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.ItemNotFound">
            <summary>
            The addressed JID or item requested cannot be found; the associated error type SHOULD be "cancel" or "modify".
            </summary>
            <remarks>        
            An application MUST NOT return this error if doing so would provide information about the intended 
            recipient's network availability to an entity that is not authorized to know such information; 
            instead it SHOULD return a &lt;service-unavailable/&gt; error.
            </remarks>        
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.JidMalformed">
            <summary>
            The sending entity has provided or communicated an XMPP address 
            (e.g., a value of the 'to' attribute) or aspect thereof (e.g., an XMPP resource identifier) 
            that does not adhere to the syntax defined under RFC3920 Section 3 (Addresses); 
            the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.NotAcceptable">
            <summary>
            The recipient or server understands the request but is refusing to process it because it does not
            meet criteria defined by the recipient or server (e.g., a local policy regarding stanza size 
            limits or acceptable words in messages); the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.NotAllowed">
            <summary>
            The recipient or server does not allow any entity to perform the action (e.g., sending to entities at 
            a blacklisted domain); the associated error type SHOULD be "cancel".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.NotAuthorized">
            <summary>
            The sender must provide proper credentials before being allowed to perform the action, or has provided 
            improper credentials; the associated error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.NotModified">
            <summary>
            The item requested has not changed since it was last requested; the associated error type SHOULD be "continue".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.PaymentRequired">
            <summary>
            The requesting entity is not authorized to access the requested service because payment is required; 
            the associated error type SHOULD be "auth".
            </summary>        
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.RecipientUnavailable">
            <summary>
            The intended recipient is temporarily unavailable; the associated error type SHOULD be "wait".
            </summary>
            <remarks>
            An application MUST NOT return this error if doing so would provide information about the 
            intended recipient's network availability to an entity that is not authorized to know such 
            information; instead it SHOULD return a &lt;service-unavailable/&gt; error.
            </remarks>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.Redirect">
            <summary>
            The recipient or server is redirecting requests for this information to another entity, 
            typically in a temporary fashion; the associated error type SHOULD be "modify" and the error stanza
            SHOULD contain the alternate address (which SHOULD be a valid JID) in the XML character data 
            of the &lt;redirect/&gt; element.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.RegistrationRequired">
            <summary>
            The requesting entity is not authorized to access the requested service because prior 
            registration is required; the associated error type SHOULD be &quot;auth&quot;.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.RemoteServerNotFound">
            <summary>
            A remote server or service specified as part or all of the JID of the intended recipient 
            does not exist; the associated error type SHOULD be &quot;cancel&quot;.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.RemoteServerTimeout">
            <summary>
            A remote server or service specified as part or all of the JID of the intended recipient 
            (or required to fulfill a request) could not be contacted within a reasonable amount 
            of time; the associated error type SHOULD be &quot;wait&quot;.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.ResourceConstraint">
            <summary>
            The server or recipient lacks the system resources necessary to service the request; 
            the associated error type SHOULD be "wait".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.ServiceUnavailable">
            <summary>
            The server or recipient does not currently provide the requested service; 
            the associated error type SHOULD be &quot;cancel&quot;.
            </summary>
            <remarks>
            An application SHOULD return a &lt;service-unavailable/&gt; error instead of 
            &lt;item-not-found/&gt; or &lt;recipient-unavailable/&gt; if sending one of the latter 
            errors would provide information about the intended recipient&#39;s network 
            availability to an entity that is not authorized to know such information.
            </remarks>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.SubscriptionRequired">
            <summary>
            The requesting entity is not authorized to access the requested service 
            because a prior subscription is required; the associated error type SHOULD be &quot;auth&quot;.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.UndefinedCondition">
            <summary>
            The error condition is not one of those defined by the other conditions in this list; 
            any error type may be associated with this condition, and it SHOULD be used only in conjunction 
            with an application-specific condition.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.UnexpectedRequest">
            <summary>
            The recipient or server understood the request but was not expecting it at this time 
            (e.g., the request was out of order); the associated error type SHOULD be "wait" or "modify".
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.ErrorCode">
            <summary>
            The legacy Error Code
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.BadRequest">
            <summary>
            Bad request
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.Unauthorized">
            <summary>
            Unauthorized
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.PaymentRequired">
            <summary>
            Payment required
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.Forbidden">
            <summary>
            Forbidden
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.NotFound">
            <summary>
            Not found
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.NotAllowed">
            <summary>
            Not allowed
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.NotAcceptable">
            <summary>
            Not acceptable
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.RegistrationRequired">
            <summary>
            Registration required 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.RequestTimeout">
            <summary>
            Request timeout
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.Conflict">
            <summary>
            Conflict
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.InternalServerError">
            <summary>
            Internal server error
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.NotImplemented">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.RemoteServerError">
            <summary>
            Remote server error
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.ServiceUnavailable">
            <summary>
            Service unavailable
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.RemoteServerTimeout">
            <summary>
            Remote server timeout
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.Disconnected">
            <summary>
            Disconnected
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.ibb.Open.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.ibb.Open.#ctor(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="sid"></param>
            <param name="blocksize"></param>
        </member>
        <member name="P:agsXMPP.protocol.extensions.ibb.Open.BlockSize">
            <summary>
            Block size
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.component.IQ">
            <summary>
            Summary description for Iq.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.IQ.Error">
            <summary>
            Error Child Element
            </summary>
        </member>
        <member name="T:agsXMPP.XmppClientConnection">
            <summary>
            Summary description for XmppClient.
            </summary>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.#ctor(agsXMPP.Jid,System.String)">
            <summary>
            create a new XmppClientConnection with the given JabberId and password
            </summary>
            <param name="jid">JabberId (user@example.com)</param>
            <param name="pass">password</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.#ctor(System.String)">
            <summary>
            create a new XmppClientConnection with the given server
            Username and Password gets set later
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.#ctor(System.String,System.Int32)">
            <summary>
            create a new XmppClientConnection with the given server and port number
            Username and Password gets set later
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.Open">
            <summary>
            This method open the connections to the xmpp server and authenticates you to ther server.
            This method is async, don't assume you are already connected when it returns. You have to wait for the OnLogin Event
            </summary>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.Open(System.String,System.String)">
            <summary>
            This method open the connections to the xmpp server and authenticates you to ther server.
            This method is async, don't assume you are already connected when it returns. You have to wait for the OnLogin Event
            </summary>
            <param name="username">your username</param>
            <param name="password">your password</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.Open(System.String,System.String,System.String)">
            <summary>
            This method open the connections to the xmpp server and authenticates you to ther server.
            This method is async, don't assume you are already connected when it returns. You have to wait for the OnLogin Event
            </summary>
            <param name="username">your username</param>
            <param name="password">your passowrd</param>
            <param name="resource">resource for this connection</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.Open(System.String,System.String,System.String,System.Int32)">
            <summary>
            This method open the connections to the xmpp server and authenticates you to ther server.
            This method is async, don't assume you are already connected when it returns. You have to wait for the OnLogin Event
            </summary>
            <param name="username">your username</param>
            <param name="password">your password</param>
            <param name="resource">resource for this connection</param>
            <param name="priority">priority which will be sent with presence packets</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.Open(System.String,System.String,System.Int32)">
            <summary>
            This method open the connections to the xmpp server and authenticates you to ther server.
            This method is async, don't assume you are already connected when it returns. You have to wait for the OnLogin Event
            </summary>
            <param name="username">your username</param>
            <param name="password">your password</param>
            <param name="priority">priority which will be sent with presence packets</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.ResolveSrv">
            <summary>
            Resolves the connection host of a xmpp domain when SRV records are set
            </summary>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.PickSRVRecord">
            <summary>
            Picks one of the SRV records.
            priority and weight are evaluated by the following algorithm.
            </summary>
            <returns>SRVRecord</returns>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.SendMyPresence">
            <summary>
            Sends our Presence, the packet is built of Status, Show and Priority
            </summary>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.UpdateCapsVersion">
            <summary>
            Sets the caps version automatically from the DiscoInfo object.
            Call this member after each change of the DiscoInfo object
            </summary>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.ChangePassword(System.String)">
            <summary>
            Changing the Password. You should use this function only when connected with SSL or TLS
            because the password is sent in plain text over the connection.		
            </summary>
            /// <remarks>
            	<para>
            		After this request was successful the new password is set automatically in the Username Property
            	</para>
            </remarks>		
            <param name="newPass">value of the new password</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.OnChangePasswordResult(System.Object,agsXMPP.protocol.client.IQ,System.Object)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="iq"></param>
            <param name="data">contains the new password</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.GetRegistrationFields(System.Object)">
            <summary>
            requests the registration fields
            </summary>
            <param name="obj">object which contains the features node which we need later for login again</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.BuildMyJid">
            <summary>
            Refreshes the myJid Member Variable
            </summary>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.CleanupSession">
            <summary>
            Does the Clieanup of the Session and sends the OnClose Event
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.ClientLanguage">
            <summary>
            The prefered Client Language Attribute
            </summary>
            <seealso cref="!:agsXMPP.protocol.Base.XmppPacket.Language"/>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.ServerLanguage">
            <summary>
            The language which the server decided to use.
            </summary>
            <seealso cref="!:agsXMPP.protocol.Base.XmppPacket.Language"/>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Username">
            <summary>
            the username that is used to authenticate to the xmpp server
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Password">
            <summary>
            the password that is used to authenticate to the xmpp server
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Resource">
            <summary>
            the resource for this connection each connection to the server with the same jid needs a unique resource.
            You can also set <code>Resource = null</code> and the server will assign a random Resource for you.
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.MyJID">
            <summary>
            our XMPP id build from Username, Server and Resource Property (user@server/resourcee)
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Status">
            <summary>
            The status message of this connection which is sent with the presence packets.
            </summary>
            <remarks>
            you have to call the method <b>SendMyPresence</b> to send your updated presence to the server.        
            </remarks>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Priority">
            <summary>
            The priority of this connection send with the presence packets.
            The OPTIONAL priority element contains non-human-readable XML character data that specifies the priority level 
            of the resource. The value MUST be an integer between -128 and +127. If no priority is provided, a server 
            SHOULD consider the priority to be zero.        
            </summary>
            <remarks>you have to call the method <b>SendMyPresence</b> to send your updated presence to the server.</remarks>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Show">
            <summary>
            change the showtype. 
            </summary>
            <remarks>you have to call the method <b>SendMyPresence</b> to send your updated presence to the server.</remarks>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.AutoRoster">
            <summary>
            If set to true then the Roster (contact list) is requested automatically after sucessful login. 
            Set this property to false if you don't want to receive your contact list, or request it manual. 
            To save bandwidth is makes sense to cache the contact list and don't receive it on each login.
            </summary>
            <remarks>default value is <b>true</b></remarks>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.AutoPresence">
            <summary>
            Sends the presence Automatically after successful login.
            This property works only in combination with AutoRoster (AutoRoster = true).
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.AutoAgents">
            <summary>
            If set to true then the Agents are requested automatically after sucessful login. 
            Set this property to false if you don't use agents at all, or if you request them manual.
            </summary>
            <remarks>default value is <b>true</b></remarks>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.UseSSL">
            <summary>
            use "old style" ssl for this connection (Port 5223).
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.UseStartTLS">
            <summary>
            use Start-TLS on this connection when the server supports it. Make sure UseSSL is false when 
            you want to use this feature.
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.UseCompression">
            <summary>
            Use Stream compression to save bandwidth?
            This should not be used in combination with StartTLS,
            because TLS has build in compression (see RFC 2246, http://www.ietf.org/rfc/rfc2246.txt)
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Authenticated">
            <summary>
            Are we Authenticated to the server? This is readonly and set by the library
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Binded">
            <summary>
            is the resource binded? This is readonly and set by the library
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.RegisterAccount">
            <summary>
            Should the library register a new account on the server
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.DiscoInfo">
            <summary>
            The DiscoInfo object is used to respond to DiscoInfo request if AutoAnswerDiscoInfoRequests == true in DisoManager objects,
            it's also used to build the Caps version when EnableCapabilities is set to true.
            <remarks>
            When EnableCapailities == true call UpdateCapsVersion after each update of the DiscoInfo object
            </remarks>
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnLogin">
            <summary>
            We are authenticated to the server now.
            </summary>	
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnBinded">
            <summary>
            This event occurs after the resource was binded
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnRegisterInformation">
            <summary>
            This event is fired when we get register information.
            You ca use this event for custom registrations.
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnRegistered">
            <summary>
            This event gets fired after a new account is registered
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnPasswordChanged">
            <summary>
            This event ets fired after a ChangePassword Request was successful
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnRegisterError">
            <summary>
            Event that occurs on registration errors
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnStreamError">
            <summary>
            Event occurs on Xmpp Stream error elements
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnAuthError">
            <summary>
            Event that occurs on authentication errors
            e.g. wrong password, user doesnt exist etc...
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnSocketError">
            <summary>
            Event occurs on Socket Errors
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnRosterStart">
            <summary>
            This event is raised when a response to a roster query is received. The roster query contains the contact list.
            This lost could be very large and could contain hundreds of contacts. The are all send in a single XML element from 
            the server. Normally you show the contact list in a GUI control in you application (treeview, listview). 
            When this event occurs you couls Suspend the GUI for faster drawing and show change the mousepointer to the hourglass
            </summary>
            <remarks>see also OnRosterItem and OnRosterEnd</remarks>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnRosterEnd">
            <summary>
            This event is raised when a response to a roster query is received. It notifies you that all RosterItems (contacts) are
            received now.
            When this event occurs you could Resume the GUI and show the normal mousepointer again.
            </summary>
            <remarks>see also OnRosterStart and OnRosterItem</remarks>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnRosterItem">
            <summary>
            This event is raised when a response to a roster query is received. This event always contains a single RosterItem. 
            e.g. you have 150 friends on your contact list, then this event is called 150 times.
            </summary>
            <remarks>see also OnRosterItem and OnRosterEnd</remarks>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnAgentStart">
            <summary>
            This event is raised when a response to an agents query which could contain multiple agentitems.
            Normally you show the items in a GUI. This event could be used to suspend the UI for faster drawing.
            </summary>
            <remarks>see also OnAgentItem and OnAgentEnd</remarks>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnAgentEnd">
            <summary>
            This event is raised when a response to an agents query which could contain multiple agentitems.
            Normally you show the items in a GUI. This event could be used to resume the suspended userinterface.
            </summary>
            <remarks>see also OnAgentStart and OnAgentItem</remarks>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnAgentItem">
            <summary>
            This event returns always a single AgentItem from a agents query result.
            This is from the old jabber protocol. Instead of agents Disco (Service Discovery) should be used in modern
            application. But still lots of servers use Agents.
            <seealso cref="!:"/>
            </summary>
            <remarks>see also OnAgentStart and OnAgentEnd</remarks>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnIq">
            <summary>
            
            </summary>        
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnMessage">
            <summary>
            We received a message. This could be a chat message, headline, normal message or a groupchat message. 
            There are also XMPP extension which are embedded in messages. 
            e.g. X-Data forms.
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnPresence">
            <summary>
            We received a presence from a contact or chatroom.
            Also subscriptions is handles in this event.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Dom.NodeList">
            <summary>
            
            </summary>	
        </member>
        <member name="F:agsXMPP.Xml.Dom.NodeList.m_Owner">
            <summary>
            Owner (Parent) of the ChildElement Collection
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Dom.DomLoader">
            <summary>
            internal class that loads a xml document from a string or stream
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.IQ_RPC">
            <summary>
            JEP-0009: Jabber-RPC
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.X_DATA">
            <summary>
            jabber:x:data
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.X_ROSTERX">
            <summary>
            JEP-0144 Roster Item Exchange
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.MUC">
            <summary>
            Multi User Chat (MUC) JEP-0045
            http://jabber.org/protocol/muc
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.MUC_USER">
            <summary>
            http://jabber.org/protocol/muc#user
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.MUC_ADMIN">
            <summary>
            "http://jabber.org/protocol/muc#admin
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.MUC_OWNER">
            <summary>
            http://jabber.org/protocol/muc#owner
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.STREAMS">
            <summary>
            urn:ietf:params:xml:ns:xmpp-streams
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.ACCEPT">
            <summary>
            jabber:component:accept
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.FEATURE_COMPRESS">
            <summary>
            Stream Compression http://jabber.org/features/compress
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.NICK">
            <summary>
            JEP-0172 User nickname
            http://jabber.org/protocol/nick
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.CHATSTATES">
            <summary>
            JEP-0085 Chat State Notifications
            http://jabber.org/protocol/chatstates
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.COMPRESS">
            <summary>
            JEP-0138: Stream Compression
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.FEATURE_NEG">
            <summary>
            JEP-0020: Feature Negotiation http://jabber.org/protocol/feature-neg
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.SI">
            <summary>
            JEO-0095 http://jabber.org/protocol/si
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.SI_FILE_TRANSFER">
            <summary>
            JEO-0096 http://jabber.org/protocol/si/profile/file-transfer
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.BYTESTREAMS">
            <summary>
            JEP-0065 SOCKS5 bytestreams
            http://jabber.org/protocol/bytestreams
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.JIVESOFTWARE_PHONE">
            <summary>
            Jivesoftware asterisk-im extension (http://jivesoftware.com/xmlns/phone);
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.XHTML_IM">
            <summary>
            JEP-0071: XHTML-IM (http://jivesoftware.com/xmlns/phone)
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.CAPS">
            <summary>
            XEP-0115: Entity Capabilities (http://jabber.org/protocol/caps)
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.JINGLE">
            <summary>
            Jingle http://jabber.org/protocol/jingle
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.JINGLE_AUDIO_DESCRIPTION">
            <summary>
            Jingle audio format description http://jabber.org/protocol/jingle/description/audio
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.JINGLE_AUDIO_INFO">
            <summary>
            Jingle Info audio http://jabber.org/protocol/jingle/info/audio;
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.GEOLOC">
            <summary>
            GeoLoc (http://jabber.org/protocol/geoloc)
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.PING">
            <summary>
            <para>XMPP ping</para>
            <para>Namespace: urn:xmpp:ping</para>
            <para><seealso cref="!:http://www.xmpp.org/extensions/xep-0199.html">http://www.xmpp.org/extensions/xep-0199.html</seealso></para>
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.COMMANDS">
            <summary>
            Ad-Hoc Commands (http://jabber.org/protocol/commands)
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.MSG_RECEIPT">
            <summary>
            <para>XEP-0184: Message Receipts</para>
            <para>urn:xmpp:receipts</para>        
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.STORAGE_BOOKMARKS">
            <summary>
            <para>XEP-0048: Bookmark Storage</para>
            <para>storage:bookmarks</para>
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.IBB">
            <summary>
            <para>XEP-0047: In-Band Bytestreams (IBB)</para>
            <para>http://jabber.org/protocol/ibb</para>
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.AMP">
            <summary>
            <para></para>
            <para>http://jabber.org/protocol/amp</para>
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.VCARD_UPDATE">
            <summary>
            <para>XEP-0153: vCard-Based Avatars</para>
            <para>vcard-temp:x:update</para>
            </summary>
        </member>
        <member name="T:agsXMPP.sasl.XGoogleToken.XGoogleTokenMechanism">
            <summary>
            X-GOOGLE-TOKEN Authentication
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.roster.RosterManager">
            <summary>
            Helper class that makes it easier to manage your contact list.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.#ctor(agsXMPP.XmppClientConnection)">
            <summary>
            Constructor
            </summary>
            <param name="con">The XmppClientConnection on which the RosterManager should send the packets</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.AddRosterItem(agsXMPP.Jid)">
            <summary>
            Add a contact to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.AddRosterItem(agsXMPP.Jid,System.String)">
            <summary>
            Add a contact to the Roster
            </summary>
            <param name="jid">The BARE jid of the contact that should be added.</param>
            <param name="nickname">Nickname for the new contact.</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.AddRosterItem(agsXMPP.Jid,System.String,System.String)">
            <summary>
            Add a contact to the Roster
            </summary>
            <param name="jid">The BARE jid of the contact that should be added.</param>
            <param name="nickname">Nickname for the new contact.</param>
            <param name="group">The group to which the contact should be added.</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.AddRosterItem(agsXMPP.Jid,System.String,System.String[])">
            <summary>
            Add a contact to the Roster.
            </summary>
            <param name="jid">The BARE jid of the contact that should be added.</param>
            <param name="nickname">Nickname for the contact.</param>
            <param name="group">An Array of groups when you want to add the contact to multiple groups.</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.UpdateRosterItem(agsXMPP.Jid)">
            <summary>
            Update a contact
            </summary>
            <param name="jid"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.UpdateRosterItem(agsXMPP.Jid,System.String)">
            <summary>
            Update a contact
            </summary>
            <param name="jid">The BARE jid of the contact that should be updated.</param>
            <param name="nickname">Nickname for the contact to update.</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.UpdateRosterItem(agsXMPP.Jid,System.String,System.String)">
            <summary>
            Update a contact
            </summary>
            <param name="jid"></param>
            <param name="nickname"></param>
            <param name="group"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.UpdateRosterItem(agsXMPP.Jid,System.String,System.String[])">
            <summary>
            Update a contact.
            </summary>
            <param name="jid">The BARE jid of the contact that should be updated.</param>
            <param name="nickname">Nickname for the contact to update.</param>
            <param name="group">An Array of groups when you want to add the contact to multiple groups.</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.RemoveRosterItem(agsXMPP.Jid)">
            <summary>
            Removes a contact from the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Muc">
            <summary>
            Summary description for MucUser.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Muc.History">
            <summary>
            The History object
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Telephone">
            <summary>
            Zusammenfassung für Telephone.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.rpc.RpcIq">
            <summary>
            RpcIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.rpc.Rpc">
            <summary>
            JEP-0009: Jabber-RPC, transport RPC over Jabber/XMPP
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.rpc.Rpc.MethodCall">
            <summary>
            
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.rpc.Rpc.MethodResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Privacy.AddList(agsXMPP.protocol.iq.privacy.List)">
            <summary>
            Add a provacy list
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Privacy.GetList">
            <summary>
            Get all Lists
            </summary>
            <returns>Array of all privacy lists</returns>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Privacy.Active">
            <summary>
            The active list
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Privacy.Default">
            <summary>
            The default list
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.Options.Data">
            <summary>
            The X-Data Element/Form
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.Configure.Data">
            <summary>
            The x-Data Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.Group">
            <summary>
            Summary description for Group.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.Base.Group.Name">
            <summary>
            gets or sets the Name of the contact group
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.ibb.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.ibb.Data.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.ibb.Data.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="sid"></param>
            <param name="seq"></param>
        </member>
        <member name="P:agsXMPP.protocol.extensions.ibb.Data.Sequence">
            <summary>
            the sequence
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bytestreams.StreamHostUsed">
            <summary>
            The <streamhost-used/> element indicates the StreamHost connected to. 
            This element has a single attribute for the JID of the StreamHost to which the Target connected. 
            This element MUST NOT contain any content node.
            The "jid" attribute specifies the full JID of the StreamHost. 
            This attribute MUST be present, and MUST be a valid JID for use with an &lt;iq/&gt;.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.StreamHostUsed.Jid">
            <summary>
            Jid of the streamhost
            </summary>
        </member>
        <member name="T:agsXMPP.Factory.SaslFactory">
            <summary>
            SASL factory
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:agsXMPP.Factory.SaslFactory.m_table" -->
        <member name="M:agsXMPP.Factory.SaslFactory.AddMechanism(System.String,System.Type)">
            <summary>
            Adds new Element Types to the Hashtable
            Use this function to register new SASL mechanisms
            </summary>
            <param name="mechanism"></param>
            <param name="t"></param>
        </member>
        <member name="T:agsXMPP.Factory.ElementFactory">
            <summary>
            Factory class that implements the factory pattern for builing our Elements.
            </summary>
        </member>
        <member name="F:agsXMPP.Factory.ElementFactory.m_table">
            <summary>
            This Hashtable stores Mapping of protocol (tag/namespace) to the agsXMPP objects
            </summary>
        </member>
        <member name="M:agsXMPP.Factory.ElementFactory.AddElementType(System.String,System.String,System.Type)">
            <summary>
            Adds new Element Types to the Hashtable
            Use this function also to register your own created Elements.
            If a element is already registered it gets overwritten. This behaviour is also useful if you you want to overwrite
            classes and add your own derived classes to the factory.
            </summary>
            <param name="tag">FQN</param>
            <param name="ns"></param>
            <param name="t"></param>
        </member>
        <member name="M:agsXMPP.Factory.ElementFactory.GetElement(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="prefix"></param>
            <param name="tag"></param>
            <param name="ns"></param>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.XmppConnectionState">
            <summary>
            Represents the current state of a XMPPConnection
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Disconnected">
            <summary>
            Session is Disconnected
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Connecting">
            <summary>
            The Socket is Connecting
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Connected">
            <summary>
            The Socket is Connected
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Authenticating">
            <summary>
            The XMPP Session is authenticating
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Authenticated">
            <summary>
            The XMPP session is autrhenticated
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Binding">
            <summary>
            Resource Binding gets started
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Binded">
            <summary>
            Resource Binded with sucess
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.StartCompression">
            <summary>
            Initialize Stream Compression
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Compressed">
            <summary>
            Stream is compressed now
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Securing">
            <summary>
            We are switching from a normal connection to a secure SSL connection (StartTLS)
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Registering">
            <summary>
            started the progress to register a new account
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Registered">
            <summary>
            Account was registered successful
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.xpnet.TOK">
            <summary>
            Tokens that might have been found
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.DATA_CHARS">
            Represents one or more characters of data.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.DATA_NEWLINE">
            Represents a newline (CR, LF or CR followed by LF) in data.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.START_TAG_NO_ATTS">
            Represents a complete start-tag <code>&lt;name&gt;</code>,
            that doesn't have any attribute specifications.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.START_TAG_WITH_ATTS">
            Represents a complete start-tag <code>&lt;name
            att="val"&gt;</code>, that contains one or more
            attribute specifications.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.EMPTY_ELEMENT_NO_ATTS">
            Represents an empty element tag <code>&lt;name/&gt;</code>,
            that doesn't have any attribute specifications.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.EMPTY_ELEMENT_WITH_ATTS">
            Represents an empty element tag <code>&lt;name
            att="val"/&gt;</code>, that contains one or more
            attribute specifications.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.END_TAG">
            Represents a complete end-tag <code>&lt;/name&gt;</code>.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.CDATA_SECT_OPEN">
            Represents the start of a CDATA section
            <code>&lt;![CDATA[</code>.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.CDATA_SECT_CLOSE">
            Represents the end of a CDATA section <code>]]&gt;</code>.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.ENTITY_REF">
            Represents a general entity reference.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.MAGIC_ENTITY_REF">
            Represents a general entity reference to a one of the 5
            predefined entities <code>amp</code>, <code>lt</code>,
            <code>gt</code>, <code>quot</code>, <code>apos</code>.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.CHAR_REF">
            Represents a numeric character reference (decimal or
            hexadecimal), when the referenced character is less
            than or equal to 0xFFFF and so is represented by a
            single char.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.CHAR_PAIR_REF">
            Represents a numeric character reference (decimal or
            hexadecimal), when the referenced character is greater
            than 0xFFFF and so is represented by a pair of chars.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.PI">
            Represents a processing instruction.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.XML_DECL">
            Represents an XML declaration or text declaration (a
            processing instruction whose target is
            <code>xml</code>).
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.COMMENT">
            Represents a comment <code>&lt;!-- comment --&gt;</code>.
            This can occur both in the prolog and in content.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.ATTRIBUTE_VALUE_S">
            Represents a white space character in an attribute
            value, excluding white space characters that are part
            of line boundaries.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.PARAM_ENTITY_REF">
            Represents a parameter entity reference in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.PROLOG_S">
            Represents whitespace in the prolog.
            The token contains one or more whitespace characters.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.DECL_OPEN">
            Represents <code>&lt;!NAME</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.DECL_CLOSE">
            Represents <code>&gt;</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.NAME">
            Represents a name in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.NMTOKEN">
            Represents a name token in the prolog that is not a name.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.POUND_NAME">
            Represents <code>#NAME</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.OR">
            Represents <code>|</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.PERCENT">
            Represents a <code>%</code> in the prolog that does not start
            a parameter entity reference.
            This can occur in an entity declaration.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.OPEN_PAREN">
            Represents a <code>(</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.CLOSE_PAREN">
            Represents a <code>)</code> in the prolog that is not
            followed immediately by any of
             <code>*</code>, <code>+</code> or <code>?</code>.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.OPEN_BRACKET">
            Represents <code>[</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.CLOSE_BRACKET">
            Represents <code>]</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.LITERAL">
            Represents a literal (EntityValue, AttValue, SystemLiteral or
            PubidLiteral).
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.NAME_QUESTION">
            Represents a name followed immediately by <code>?</code>.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.NAME_ASTERISK">
            Represents a name followed immediately by <code>*</code>.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.NAME_PLUS">
            Represents a name followed immediately by <code>+</code>.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.COND_SECT_OPEN">
            Represents <code>&lt;![</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.COND_SECT_CLOSE">
            Represents <code>]]&gt;</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.CLOSE_PAREN_QUESTION">
            Represents <code>)?</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.CLOSE_PAREN_ASTERISK">
            Represents <code>)*</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.CLOSE_PAREN_PLUS">
            Represents <code>)+</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.xpnet.TOK.COMMA">
            Represents <code>,</code> in the prolog.
        </member>
        <member name="T:agsXMPP.protocol.x.muc.User">
            <summary>
            Summary description for MucUser.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.User.Status">
            <summary>
            The Status Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.User.Invite">
            <summary>
            The Invite Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.User.Decline">
            <summary>
            The Decline Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Affiliation">
            <summary>
            There are five defined affiliations that a user may have in relation to a room
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.Affiliation.none">
            <summary>
            the absence of an affiliation
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.FieldType">
            <summary>
            Field Types
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Unknown">
            <summary>
            a unknown fieldtype
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Boolean">
            <summary>
            The field enables an entity to gather or provide an either-or choice between two options. The allowable values are 1 for yes/true/assent and 0 for no/false/decline. The default value is 0.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Fixed">
            <summary>
            The field is intended for data description (e.g., human-readable text such as "section" headers) rather than data gathering or provision. The <value/> child SHOULD NOT contain newlines (the \n and \r characters); instead an application SHOULD generate multiple fixed fields, each with one <value/> child.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Hidden">
            <summary>
            The field is not shown to the entity providing information, but instead is returned with the form.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Jid_Multi">
            <summary>
            The field enables an entity to gather or provide multiple Jabber IDs.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Jid_Single">
            <summary>
            The field enables an entity to gather or provide a single Jabber ID.	
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.List_Multi">
            <summary>
            The field enables an entity to gather or provide one or more options from among many.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.List_Single">
            <summary>
            The field enables an entity to gather or provide one option from among many.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Text_Multi">
            <summary>
            The field enables an entity to gather or provide multiple lines of text.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Text_Private">
            <summary>
            password style textbox.
            The field enables an entity to gather or provide a single line or word of text, which shall be obscured in an interface (e.g., *****).
            </summary>		
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Text_Single">
            <summary>
            The field enables an entity to gather or provide a single line or word of text, which may be shown in an interface. This field type is the default and MUST be assumed if an entity receives a field type it does not understand.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.bind.BindIq">
            <summary>
            Summary description for BindIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Mechanisms">
            <summary>
            Summary description for Mechanisms.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.sasl.Mechanisms.GetMechanism(agsXMPP.protocol.sasl.MechanismType)">
            <summary>
            Gets the given mechanism.
            </summary>
            <param name="type">The mechanism type.</param>
            <returns></returns>
        </member>
        <member name="T:agsXMPP.protocol.iq.roster.RosterItem">
            <summary>
            Item is used in jabber:iq:roster, jabber:iq:search
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.roster.RosterIq">
            <summary>
            Build a new roster query, jabber:iq:roster
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoItems">
            <summary>
            Discovering the Items Associated with a Jabber Entity
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoItems.Node">
            <summary>
            The node to discover (Optional)
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.stream.feature.compression.Compression.AddMethod(agsXMPP.protocol.extensions.compression.CompressionMethod)">
            <summary>
            Add a compression method/algorithm
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:agsXMPP.protocol.stream.feature.compression.Compression.SupportsMethod(agsXMPP.protocol.extensions.compression.CompressionMethod)">
            <summary>
            Is the given compression method/algrithm supported?
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="P:agsXMPP.protocol.stream.feature.compression.Compression.Method">
            <summary>
            method/algorithm used to compressing the stream
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Type.jid">
            <summary>
            
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Type.group">
            <summary>
            
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Type.subscription">
            <summary>
            
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.pubsub.SubscriptionState.none">
            <summary>
            The node MUST NOT send event notifications or payloads to the Entity.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.pubsub.SubscriptionState.pending">
            <summary>
            An entity has requested to subscribe to a node and the request has not yet been approved 
            by a node owner. The node MUST NOT send event notifications or payloads to the entity 
            while it is in this state.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.pubsub.SubscriptionState.unconfigured">
            <summary>
            An entity has subscribed but its subscription options have not yet been configured. 
            The node MAY send event notifications or payloads to the entity while it is in this state. 
            The service MAY timeout unconfigured subscriptions.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.pubsub.SubscriptionState.subscribed">
            <summary>
            
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.geoloc.GeoLocIq">
            <summary>
            a GeoLoc InfoQuery
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.PresenceManager">
            <summary>
            Helper class for managing presence and subscriptions
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.client.PresenceManager.Subscribe(agsXMPP.Jid)">
            <summary>
            Subscribe to a contact
            </summary>
            <param name="to">Bare Jid of the rosteritem we want to subscribe</param>
        </member>
        <member name="M:agsXMPP.protocol.client.PresenceManager.Subscribe(agsXMPP.Jid,System.String)">
            <summary>        
            Subscribe to a contact
            </summary>        
            <param name="to">Bare Jid of the rosteritem we want to subscribe</param>
            <param name="message">a message which normally contains the reason why we want to subscibe to this contact</param>
        </member>
        <member name="M:agsXMPP.protocol.client.PresenceManager.Unsubscribe(agsXMPP.Jid)">
            <summary>
            Unsubscribe from a contact
            </summary>
            <param name="to">Bare Jid of the rosteritem we want to unsubscribe</param>
        </member>
        <member name="M:agsXMPP.protocol.client.PresenceManager.ApproveSubscriptionRequest(agsXMPP.Jid)">
            <summary>
            Approve a subscription request
            </summary>
            <param name="to">Bare Jid to approve</param>
        </member>
        <member name="M:agsXMPP.protocol.client.PresenceManager.RefuseSubscriptionRequest(agsXMPP.Jid)">
            <summary>
            Refuse  subscription request
            </summary>
            <param name="to">Bare Jid to approve</param>
        </member>
        <member name="T:agsXMPP.net.dns.DnsType">
            <summary>
            The DNS TYPE (RFC1035 3.2.2/3).  Not all are supported
            </summary>
        </member>
        <member name="F:agsXMPP.net.dns.DnsType.ANAME">
            <summary>
            a host address
            </summary>
        </member>
        <member name="F:agsXMPP.net.dns.DnsType.NS">
            <summary>
            an authoritative name server
            </summary>
        </member>
        <member name="F:agsXMPP.net.dns.DnsType.CNAME">
            <summary>
            the canonical name for an alias
            </summary>
        </member>
        <member name="F:agsXMPP.net.dns.DnsType.SOA">
            <summary>
            marks the start of a zone of authority
            </summary>
        </member>
        <member name="F:agsXMPP.net.dns.DnsType.WKS">
            <summary>
            a well known service description
            </summary>
        </member>
        <member name="F:agsXMPP.net.dns.DnsType.PTR">
            <summary>
            a domain name pointer
            </summary>
        </member>
        <member name="F:agsXMPP.net.dns.DnsType.HINFO">
            <summary>
            host information
            </summary>
        </member>
        <member name="F:agsXMPP.net.dns.DnsType.MINFO">
            <summary>
            mailbox or mail list information
            </summary>
        </member>
        <member name="F:agsXMPP.net.dns.DnsType.MX">
            <summary>
            mail exchange
            </summary>
        </member>
        <member name="F:agsXMPP.net.dns.DnsType.TXT">
            <summary>
            text strings
            </summary>
        </member>
        <member name="F:agsXMPP.net.dns.DnsType.SRV">
            <summary>
            SRV Records
            </summary>
        </member>
        <member name="T:agsXMPP.net.dns.DnsClass">
            <summary>
            The DNS CLASS (RFC1035 3.2.4/5)
            Internet will be the one we'll be using (IN), the others are for completeness
            </summary>
        </member>
        <member name="T:agsXMPP.net.dns.ReturnCode">
            <summary>
            (RFC1035 4.1.1) These are the return codes the server can send back
            </summary>
        </member>
        <member name="T:agsXMPP.net.dns.Opcode">
            <summary>
            (RFC1035 4.1.1) These are the Query Types which apply to all questions in a request
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.aborted">
            <summary>
            The receiving entity acknowledges an <abort/> element sent by the initiating entity; sent in reply to the <abort/> element.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.incorrect_encoding">
            <summary>
            The data provided by the initiating entity could not be processed because the [BASE64] (Josefsson, S., “The Base16, Base32, and Base64 Data Encodings,” July 2003.) encoding is incorrect (e.g., because the encoding does not adhere to the definition in Section 3 of [BASE64] (Josefsson, S., “The Base16, Base32, and Base64 Data Encodings,” July 2003.)); sent in reply to a <response/> element or an <auth/> element with initial response data.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.invalid_authzid">
            <summary>
            The authzid provided by the initiating entity is invalid, either because it is incorrectly formatted or because the initiating entity does not have permissions to authorize that ID; sent in reply to a <response/> element or an <auth/> element with initial response data.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.invalid_mechanism">
            <summary>
            The initiating entity did not provide a mechanism or requested a mechanism that is not supported by the receiving entity; sent in reply to an <auth/> element.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.mechanism_too_weak">
            <summary>
            The mechanism requested by the initiating entity is weaker than server policy permits for that initiating entity; sent in reply to a <response/> element or an <auth/> element with initial response data.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.not_authorized">
            <summary>
            The authentication failed because the initiating entity did not provide valid credentials (this includes but is not limited to the case of an unknown username); sent in reply to a <response/> element or an <auth/> element with initial response data.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.temporary_auth_failure">
            <summary>
            The authentication failed because of a temporary error condition within the receiving entity; sent in reply to an <auth/> element or <response/> element.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.StreamHost.Port">
            <summary>
            a port associated with the hostname or IP address for SOCKS5 communications over TCP
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.StreamHost.Host">
            <summary>
            the hostname or IP address of the StreamHost for SOCKS5 communications over TCP
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.StreamHost.Jid">
            <summary>
            The XMPP/Jabber id of the streamhost
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.StreamHost.Zeroconf">
            <summary>
            a zeroconf [5] identifier to which an entity may connect, for which the service identifier and 
            protocol name SHOULD be "_jabber.bytestreams".
            </summary>
        </member>
        <member name="M:agsXMPP.Idn.PunycodeException.#ctor(System.String)">
            <summary>
            Creates a new PunycodeException.
            </summary>
            <param name="message">message</param>
        </member>
    </members>
</doc>
